.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH ExtUtils::MakeMaker 3 "perl 5.003, patch 93" "7/Mar/97" "Perl Programmers Reference Guide"
.IX Title "ExtUtils::MakeMaker 3"
.UC
.IX Name "ExtUtils::MakeMaker - create an extension Makefile"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
ExtUtils::MakeMaker \- create an extension Makefile
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\f(CWuse ExtUtils::MakeMaker;\fR
.PP
\f(CW\fIWriteMakefile\fR\|( ATTRIBUTE => VALUE [, ...] );\fR
.PP
which is really
.PP
\f(CWMM->\fInew\fR\|(\e%att)->flush;\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This utility is designed to write a Makefile for an extension module
from a Makefile.PL. It is based on the Makefile.SH model provided by
Andy Dougherty and the perl5-porters.
.PP
It splits the task of generating the Makefile into several subroutines
that can be individually overridden.  Each subroutine returns the text
it wishes to have written to the Makefile.
.PP
MakeMaker is object oriented. Each directory below the current
directory that contains a Makefile.PL. Is treated as a separate
object. This makes it possible to write an unlimited number of
Makefiles with a single invocation of \fIWriteMakefile()\fR.
.Sh "How To Write A Makefile.\s-1PL\s0"
.IX Subsection "How To Write A Makefile.\s-1PL\s0"
The short answer is: Don't.
.PP
.Vb 3
\&        Always begin with h2xs.
\&        Always begin with h2xs!
\&        ALWAYS BEGIN WITH H2XS!
.Ve
even if you're not building around a header file, and even if you
don't have an \s-1XS\s0 component.
.PP
Run \fIh2xs\fR\|(1) before you start thinking about writing a module. For so
called pm-only modules that consist of \f(CW*.pm\fR files only, h2xs has
the \f(CW-X\fR switch. This will generate dummy files of all kinds that are
useful for the module developer.
.PP
The medium answer is:
.PP
.Vb 2
\&    use ExtUtils::MakeMaker;
\&    WriteMakefile( NAME => "Foo::Bar" );
.Ve
The long answer is the rest of the manpage :\-)
.Sh "Default Makefile Behaviour"
.IX Subsection "Default Makefile Behaviour"
The generated Makefile enables the user of the extension to invoke
.PP
.Vb 4
\&  perl Makefile.PL # optionally "perl Makefile.PL verbose"
\&  make
\&  make test        # optionally set TEST_VERBOSE=1
\&  make install     # See below
.Ve
The Makefile to be produced may be altered by adding arguments of the
form \f(CWKEY=VALUE\fR. E.g.
.PP
.Vb 1
\&  perl Makefile.PL PREFIX=/tmp/myperl5
.Ve
Other interesting targets in the generated Makefile are
.PP
.Vb 5
\&  make config     # to check if the Makefile is up-to-date
\&  make clean      # delete local temp files (Makefile gets renamed)
\&  make realclean  # delete derived files (including ./blib)
\&  make ci         # check in all the files in the MANIFEST file
\&  make dist       # see below the Distribution Support section
.Ve
.Sh "make test"
.IX Subsection "make test"
MakeMaker checks for the existence of a file named \fItest.pl\fR in the
current directory and if it exists it adds commands to the test target
of the generated Makefile that will execute the script with the proper
set of perl \f(CW-I\fR options.
.PP
MakeMaker also checks for any files matching \fIglob\fR\|("t/*.t"). It will
add commands to the test target of the generated Makefile that execute
all matching files via the the \fITest::Harness\fR manpage module with the \f(CW-I\fR
switches set correctly.
.Sh "make testdb"
.IX Subsection "make testdb"
A useful variation of the above is the target \f(CWtestdb\fR. It runs the
test under the Perl debugger (see the \fIperldebug\fR manpage). If the file
\fItest.pl\fR exists in the current directory, it is used for the test.
.PP
If you want to debug some other testfile, set \f(CWTEST_FILE\fR variable
thusly:
.PP
.Vb 1
\&  make testdb TEST_FILE=t/mytest.t
.Ve
By default the debugger is called using \f(CW-d\fR option to perl. If you
want to specify some other option, set \f(CWTESTDB_SW\fR variable:
.PP
.Vb 1
\&  make testdb TESTDB_SW=-Dx
.Ve
.Sh "make install"
.IX Subsection "make install"
make alone puts all relevant files into directories that are named by
the macros \s-1INST_LIB\s0, \s-1INST_ARCHLIB\s0, \s-1INST_SCRIPT\s0, \s-1INST_MAN1DIR\s0, and
\s-1INST_MAN3DIR\s0. All these default to something below ./blib if you are
\fInot\fR building below the perl source directory. If you \fIare\fR
building below the perl source, \s-1INST_LIB\s0 and \s-1INST_ARCHLIB\s0 default to
 ../../lib, and \s-1INST_SCRIPT\s0 is not defined.
.PP
The \fIinstall\fR target of the generated Makefile copies the files found
below each of the \s-1INST_\s0* directories to their \s-1INSTALL\s0*
counterparts. Which counterparts are chosen depends on the setting of
\s-1INSTALLDIRS\s0 according to the following table:
.PP
.Vb 2
\&                           INSTALLDIRS set to
\&                        perl              site
.Ve
.Vb 6
\&    INST_ARCHLIB    INSTALLARCHLIB    INSTALLSITEARCH
\&    INST_LIB        INSTALLPRIVLIB    INSTALLSITELIB
\&    INST_BIN                  INSTALLBIN
\&    INST_SCRIPT              INSTALLSCRIPT
\&    INST_MAN1DIR             INSTALLMAN1DIR
\&    INST_MAN3DIR             INSTALLMAN3DIR
.Ve
The \s-1INSTALL\s0... macros in turn default to their \f(CW%Config\fR
($Config{installprivlib}, \f(CW$Config\fR{installarchlib}, etc.) counterparts.
.PP
You can check the values of these variables on your system with
.PP
.Vb 1
\&    perl '-V:install.*'
.Ve
And to check the sequence in which the library directories are
searched by perl, run
.PP
.Vb 1
\&    perl -le 'print join $/, @INC'
.Ve
.Sh "\s-1PREFIX\s0 and \s-1LIB\s0 attribute"
.IX Subsection "\s-1PREFIX\s0 and \s-1LIB\s0 attribute"
\s-1PREFIX\s0 and \s-1LIB\s0 can be used to set several \s-1INSTALL\s0* attributes in one
go. The quickest way to install a module in a non-standard place might
be
.PP
.Vb 1
\&    perl Makefile.PL LIB=~/lib
.Ve
This will install the module's architecture-independent files into
~/lib, the architecture-dependent files into ~/lib/$archname/auto.
.PP
Another way to specify many \s-1INSTALL\s0 directories with a single
parameter is \s-1PREFIX\s0.
.PP
.Vb 1
\&    perl Makefile.PL PREFIX=~
.Ve
This will replace the string specified by \f(CW$Config\fR{prefix} in all
\f(CW$Config\fR{install*} values.
.PP
Note, that in both cases the tilde expansion is done by MakeMaker, not
by perl by default, nor by make. Conflicts between parmeters \s-1LIB\s0,
\s-1PREFIX\s0 and the various \s-1INSTALL\s0* arguments are resolved so that 
\s-1XXX\s0
.PP
If the user has superuser privileges, and is not working on \s-1AFS\s0
(Andrew File System) or relatives, then the defaults for
\s-1INSTALLPRIVLIB\s0, \s-1INSTALLARCHLIB\s0, \s-1INSTALLSCRIPT\s0, etc. will be appropriate,
and this incantation will be the best:
.PP
.Vb 2
\&    perl Makefile.PL; make; make test
\&    make install
.Ve
make install per default writes some documentation of what has been
done into the file \f(CW$(INSTALLARCHLIB)/perllocal.pod\fR. This feature
can be bypassed by calling make pure_install.
.Sh "\s-1AFS\s0 users"
.IX Subsection "\s-1AFS\s0 users"
will have to specify the installation directories as these most
probably have changed since perl itself has been installed. They will
have to do this by calling
.PP
.Vb 3
\&    perl Makefile.PL INSTALLSITELIB=/afs/here/today \e
\&        INSTALLSCRIPT=/afs/there/now INSTALLMAN3DIR=/afs/for/manpages
\&    make
.Ve
Be careful to repeat this procedure every time you recompile an
extension, unless you are sure the \s-1AFS\s0 installation directories are
still valid.
.Sh "Static Linking of a new Perl Binary"
.IX Subsection "Static Linking of a new Perl Binary"
An extension that is built with the above steps is ready to use on
systems supporting dynamic loading. On systems that do not support
dynamic loading, any newly created extension has to be linked together
with the available resources. MakeMaker supports the linking process
by creating appropriate targets in the Makefile whenever an extension
is built. You can invoke the corresponding section of the makefile with
.PP
.Vb 1
\&    make perl
.Ve
That produces a new perl binary in the current directory with all
extensions linked in that can be found in \s-1INST_ARCHLIB\s0 , \s-1SITELIBEXP\s0,
and \s-1PERL_ARCHLIB\s0. To do that, MakeMaker writes a new Makefile, on
\s-1UNIX\s0, this is called Makefile.aperl (may be system dependent). If you
want to force the creation of a new perl, it is recommended, that you
delete this Makefile.aperl, so the directories are searched-through
for linkable libraries again.
.PP
The binary can be installed into the directory where perl normally
resides on your machine with
.PP
.Vb 1
\&    make inst_perl
.Ve
To produce a perl binary with a different name than \f(CWperl\fR, either say
.PP
.Vb 3
\&    perl Makefile.PL MAP_TARGET=myperl
\&    make myperl
\&    make inst_perl
.Ve
or say
.PP
.Vb 3
\&    perl Makefile.PL
\&    make myperl MAP_TARGET=myperl
\&    make inst_perl MAP_TARGET=myperl
.Ve
In any case you will be prompted with the correct invocation of the
\f(CWinst_perl\fR target that installs the new binary into \s-1INSTALLBIN\s0.
.PP
make inst_perl per default writes some documentation of what has been
done into the file \f(CW$(INSTALLARCHLIB)/perllocal.pod\fR. This
can be bypassed by calling make pure_inst_perl.
.PP
Warning: the inst_perl: target will most probably overwrite your
existing perl binary. Use with care!
.PP
Sometimes you might want to build a statically linked perl although
your system supports dynamic loading. In this case you may explicitly
set the linktype with the invocation of the Makefile.\s-1PL\s0 or make:
.PP
.Vb 1
\&    perl Makefile.PL LINKTYPE=static    # recommended
.Ve
or
.PP
.Vb 1
\&    make LINKTYPE=static                # works on most systems
.Ve
.Sh "Determination of Perl Library and Installation Locations"
.IX Subsection "Determination of Perl Library and Installation Locations"
MakeMaker needs to know, or to guess, where certain things are
located.  Especially \s-1INST_LIB\s0 and \s-1INST_ARCHLIB\s0 (where to put the files
during the \fImake\fR\|(1) run), \s-1PERL_LIB\s0 and \s-1PERL_ARCHLIB\s0 (where to read
existing modules from), and \s-1PERL_INC\s0 (header files and \f(CWlibperl*.*\fR).
.PP
Extensions may be built either using the contents of the perl source
directory tree or from the installed perl library. The recommended way
is to build extensions after you have run \*(L'make install\*(R' on perl
itself. You can do that in any directory on your hard disk that is not
below the perl source tree. The support for extensions below the ext
directory of the perl distribution is only good for the standard
extensions that come with perl.
.PP
If an extension is being built below the \f(CWext/\fR directory of the perl
source then MakeMaker will set \s-1PERL_SRC\s0 automatically (e.g.,
\f(CW../..\fR).  If \s-1PERL_SRC\s0 is defined and the extension is recognized as
a standard extension, then other variables default to the following:
.PP
.Vb 5
\&  PERL_INC     = PERL_SRC
\&  PERL_LIB     = PERL_SRC/lib
\&  PERL_ARCHLIB = PERL_SRC/lib
\&  INST_LIB     = PERL_LIB
\&  INST_ARCHLIB = PERL_ARCHLIB
.Ve
If an extension is being built away from the perl source then MakeMaker
will leave \s-1PERL_SRC\s0 undefined and default to using the installed copy
of the perl library. The other variables default to the following:
.PP
.Vb 5
\&  PERL_INC     = $archlibexp/CORE
\&  PERL_LIB     = $privlibexp
\&  PERL_ARCHLIB = $archlibexp
\&  INST_LIB     = ./blib/lib
\&  INST_ARCHLIB = ./blib/arch
.Ve
If perl has not yet been installed then \s-1PERL_SRC\s0 can be defined on the
command line as shown in the previous section.
.Sh "Which architecture dependent directory?"
.IX Subsection "Which architecture dependent directory?"
If you don't want to keep the defaults for the \s-1INSTALL\s0* macros,
MakeMaker helps you to minimize the typing needed: the usual
relationship between \s-1INSTALLPRIVLIB\s0 and \s-1INSTALLARCHLIB\s0 is determined
by Configure at perl compilation time. MakeMaker supports the user who
sets \s-1INSTALLPRIVLIB\s0. If \s-1INSTALLPRIVLIB\s0 is set, but \s-1INSTALLARCHLIB\s0 not,
then MakeMaker defaults the latter to be the same subdirectory of
\s-1INSTALLPRIVLIB\s0 as Configure decided for the counterparts in \f(CW%Config\fR ,
otherwise it defaults to \s-1INSTALLPRIVLIB\s0. The same relationship holds
for \s-1INSTALLSITELIB\s0 and \s-1INSTALLSITEARCH\s0.
.PP
MakeMaker gives you much more freedom than needed to configure
internal variables and get different results. It is worth to mention,
that \fImake\fR\|(1) also lets you configure most of the variables that are
used in the Makefile. But in the majority of situations this will not
be necessary, and should only be done, if the author of a package
recommends it (or you know what you're doing).
.Sh "Using Attributes and Parameters"
.IX Subsection "Using Attributes and Parameters"
The following attributes can be specified as arguments to \fIWriteMakefile()\fR
or as \s-1NAME\s0=\s-1VALUE\s0 pairs on the command line:
.Ip "C" 2
.IX Item "C"
Ref to array of *.c file names. Initialised from a directory scan
and the values portion of the \s-1XS\s0 attribute hash. This is not
currently used by MakeMaker but may be handy in Makefile.PLs.
.Ip "\s-1CONFIG\s0" 2
.IX Item "\s-1CONFIG\s0"
Arrayref. E.g. [\fIqw\fR\|(archname manext)] defines \s-1ARCHNAME\s0 & \s-1MANEXT\s0 from
config.sh. MakeMaker will add to \s-1CONFIG\s0 the following values anyway:
ar
cc
cccdlflags
ccdlflags
dlext
dlsrc
ld
lddlflags
ldflags
libc
lib_ext
obj_ext
ranlib
sitelibexp
sitearchexp
so
.Ip "\s-1CONFIGURE\s0" 2
.IX Item "\s-1CONFIGURE\s0"
\s-1CODE\s0 reference. The subroutine should return a hash reference. The
hash may contain further attributes, e.g. {\s-1LIBS\s0 => ...}, that have to
be determined by some evaluation method.
.Ip "\s-1DEFINE\s0" 2
.IX Item "\s-1DEFINE\s0"
Something like \f(CW"-DHAVE_UNISTD_H"\fR
.Ip "\s-1DIR\s0" 2
.IX Item "\s-1DIR\s0"
Ref to array of subdirectories containing Makefile.PLs e.g. [ \*(L'sdbm\*(R'
] in ext/SDBM_File
.Ip "\s-1DISTNAME\s0" 2
.IX Item "\s-1DISTNAME\s0"
Your name for distributing the package (by tar file). This defaults to
\s-1NAME\s0 above.
.Ip "\s-1DL_FUNCS\s0" 2
.IX Item "\s-1DL_FUNCS\s0"
Hashref of symbol names for routines to be made available as
universal symbols.  Each key/value pair consists of the package name
and an array of routine names in that package.  Used only under \s-1AIX\s0
(export lists) and \s-1VMS\s0 (linker options) at present.  The routine
names supplied will be expanded in the same way as \s-1XSUB\s0 names are
expanded by the \fI\s-1XS\s0()\fR macro.  Defaults to
.Sp
.Vb 1
\&  {"$(NAME)" => ["boot_$(NAME)" ] }
.Ve
e.g.
.Sp
.Vb 2
\&  {"RPC" => [qw( boot_rpcb rpcb_gettime getnetconfigent )],
\&   "NetconfigPtr" => [ 'DESTROY'] }
.Ve
.Ip "\s-1DL_VARS\s0" 2
.IX Item "\s-1DL_VARS\s0"
Array of symbol names for variables to be made available as
universal symbols.  Used only under \s-1AIX\s0 (export lists) and \s-1VMS\s0
(linker options) at present.  Defaults to [].  (e.g. [ \fIqw\fR\|(
Foo_version Foo_numstreams Foo_tree ) ])
.Ip "\s-1EXCLUDE_EXT\s0" 2
.IX Item "\s-1EXCLUDE_EXT\s0"
Array of extension names to exclude when doing a static build.  This
is ignored if \s-1INCLUDE_EXT\s0 is present.  Consult \s-1INCLUDE_EXT\s0 for more
details.  (e.g.  [ \fIqw\fR\|( Socket \s-1POSIX\s0 ) ] )
.Sp
This attribute may be most useful when specified as a string on the
commandline:  perl Makefile.\s-1PL\s0 \s-1EXCLUDE_EXT\s0='Socket Safe\*(R'
.Ip "\s-1EXE_FILES\s0" 2
.IX Item "\s-1EXE_FILES\s0"
Ref to array of executable files. The files will be copied to the
\s-1INST_SCRIPT\s0 directory. Make realclean will delete them from there
again.
.Ip "\s-1NO_VC\s0" 2
.IX Item "\s-1NO_VC\s0"
In general any generated Makefile checks for the current version of
MakeMaker and the version the Makefile was built under. If \s-1NO_VC\s0 is
set, the version check is neglected. Do not write this into your
Makefile.\s-1PL\s0, use it interactively instead.
.Ip "\s-1FIRST_MAKEFILE\s0" 2
.IX Item "\s-1FIRST_MAKEFILE\s0"
The name of the Makefile to be produced. Defaults to the contents of
\s-1MAKEFILE\s0, but can be overridden. This is used for the second Makefile
that will be produced for the \s-1MAP_TARGET\s0.
.Ip "\s-1FULLPERL\s0" 2
.IX Item "\s-1FULLPERL\s0"
Perl binary able to run this extension.
.Ip "H" 2
.IX Item "H"
Ref to array of *.h file names. Similar to C.
.Ip "\s-1INC\s0" 2
.IX Item "\s-1INC\s0"
Include file dirs eg: \f(CW"-I/usr/5include -I/path/to/inc"\fR
.Ip "\s-1INCLUDE_EXT\s0" 2
.IX Item "\s-1INCLUDE_EXT\s0"
Array of extension names to be included when doing a static build.
MakeMaker will normally build with all of the installed extensions when
doing a static build, and that is usually the desired behavior.  If
\s-1INCLUDE_EXT\s0 is present then MakeMaker will build only with those extensions
which are explicitly mentioned. (e.g.  [ \fIqw\fR\|( Socket \s-1POSIX\s0 ) ])
.Sp
It is not necessary to mention DynaLoader or the current extension when
filling in \s-1INCLUDE_EXT\s0.  If the \s-1INCLUDE_EXT\s0 is mentioned but is empty then
only DynaLoader and the current extension will be included in the build.
.Sp
This attribute may be most useful when specified as a string on the
commandline:  perl Makefile.\s-1PL\s0 \s-1INCLUDE_EXT\s0='\s-1POSIX\s0 Socket Devel::Peek\*(R'
.Ip "\s-1INSTALLARCHLIB\s0" 2
.IX Item "\s-1INSTALLARCHLIB\s0"
Used by \*(L'make install\*(R', which copies files from \s-1INST_ARCHLIB\s0 to this
directory if \s-1INSTALLDIRS\s0 is set to perl.
.Ip "\s-1INSTALLBIN\s0" 2
.IX Item "\s-1INSTALLBIN\s0"
Directory to install binary files (e.g. tkperl) into.
.Ip "\s-1INSTALLDIRS\s0" 2
.IX Item "\s-1INSTALLDIRS\s0"
Determines which of the two sets of installation directories to
choose: installprivlib and installarchlib versus installsitelib and
installsitearch. The first pair is chosen with \s-1INSTALLDIRS\s0=perl, the
second with \s-1INSTALLDIRS\s0=site. Default is site.
.Ip "\s-1INSTALLMAN1DIR\s0" 2
.IX Item "\s-1INSTALLMAN1DIR\s0"
This directory gets the man pages at \*(L'make install\*(R' time. Defaults to
\f(CW$Config\fR{installman1dir}.
.Ip "\s-1INSTALLMAN3DIR\s0" 2
.IX Item "\s-1INSTALLMAN3DIR\s0"
This directory gets the man pages at \*(L'make install\*(R' time. Defaults to
\f(CW$Config\fR{installman3dir}.
.Ip "\s-1INSTALLPRIVLIB\s0" 2
.IX Item "\s-1INSTALLPRIVLIB\s0"
Used by \*(L'make install\*(R', which copies files from \s-1INST_LIB\s0 to this
directory if \s-1INSTALLDIRS\s0 is set to perl.
.Ip "\s-1INSTALLSCRIPT\s0" 2
.IX Item "\s-1INSTALLSCRIPT\s0"
Used by \*(L'make install\*(R' which copies files from \s-1INST_SCRIPT\s0 to this
directory.
.Ip "\s-1INSTALLSITELIB\s0" 2
.IX Item "\s-1INSTALLSITELIB\s0"
Used by \*(L'make install\*(R', which copies files from \s-1INST_LIB\s0 to this
directory if \s-1INSTALLDIRS\s0 is set to site (default).
.Ip "\s-1INSTALLSITEARCH\s0" 2
.IX Item "\s-1INSTALLSITEARCH\s0"
Used by \*(L'make install\*(R', which copies files from \s-1INST_ARCHLIB\s0 to this
directory if \s-1INSTALLDIRS\s0 is set to site (default).
.Ip "\s-1INST_ARCHLIB\s0" 2
.IX Item "\s-1INST_ARCHLIB\s0"
Same as \s-1INST_LIB\s0 for architecture dependent files.
.Ip "\s-1INST_BIN\s0" 2
.IX Item "\s-1INST_BIN\s0"
Directory to put real binary files during \*(L'make\*(R'. These will be copied
to \s-1INSTALLBIN\s0 during \*(L'make install\*(R'
.Ip "\s-1INST_EXE\s0" 2
.IX Item "\s-1INST_EXE\s0"
Old name for \s-1INST_SCRIPT\s0. Deprecated. Please use \s-1INST_SCRIPT\s0 if you
need to use it.
.Ip "\s-1INST_LIB\s0" 2
.IX Item "\s-1INST_LIB\s0"
Directory where we put library files of this extension while building
it.
.Ip "\s-1INST_MAN1DIR\s0" 2
.IX Item "\s-1INST_MAN1DIR\s0"
Directory to hold the man pages at \*(L'make\*(R' time
.Ip "\s-1INST_MAN3DIR\s0" 2
.IX Item "\s-1INST_MAN3DIR\s0"
Directory to hold the man pages at \*(L'make\*(R' time
.Ip "\s-1INST_SCRIPT\s0" 2
.IX Item "\s-1INST_SCRIPT\s0"
Directory, where executable files should be installed during
\*(L'make\*(R'. Defaults to \*(L"./blib/bin\*(R", just to have a dummy location during
testing. make install will copy the files in \s-1INST_SCRIPT\s0 to
\s-1INSTALLSCRIPT\s0.
.Ip "\s-1LDFROM\s0" 2
.IX Item "\s-1LDFROM\s0"
defaults to \*(L"$(\s-1OBJECT\s0)\*(R" and is used in the ld command to specify
what files to link/load from (also see dynamic_lib below for how to
specify ld flags)
.Ip "\s-1LIBPERL_A\s0" 2
.IX Item "\s-1LIBPERL_A\s0"
The filename of the perllibrary that will be used together with this
extension. Defaults to libperl.a.
.Ip "\s-1LIB\s0" 2
.IX Item "\s-1LIB\s0"
\s-1LIB\s0 can only be set at \f(CWperl Makefile.PL\fR time. It has the effect of
setting both \s-1INSTALLPRIVLIB\s0 and \s-1INSTALLSITELIB\s0 to that value regardless any
.Ip "\s-1LIBS\s0" 2
.IX Item "\s-1LIBS\s0"
An anonymous array of alternative library
specifications to be searched for (in order) until
at least one library is found. E.g.
.Sp
.Vb 1
\&  'LIBS' => ["-lgdbm", "-ldbm -lfoo", "-L/path -ldbm.nfs"]
.Ve
Mind, that any element of the array
contains a complete set of arguments for the ld
command. So do not specify
.Sp
.Vb 1
\&  'LIBS' => ["-ltcl", "-ltk", "-lX11"]
.Ve
See ODBM_File/Makefile.\s-1PL\s0 for an example, where an array is needed. If
you specify a scalar as in
.Sp
.Vb 1
\&  'LIBS' => "-ltcl -ltk -lX11"
.Ve
MakeMaker will turn it into an array with one element.
.Ip "\s-1LINKTYPE\s0" 2
.IX Item "\s-1LINKTYPE\s0"
\*(L'static\*(R' or \*(L'dynamic\*(R' (default unless usedl=undef in
config.sh). Should only be used to force static linking (also see
linkext below).
.Ip "\s-1MAKEAPERL\s0" 2
.IX Item "\s-1MAKEAPERL\s0"
Boolean which tells MakeMaker, that it should include the rules to
make a perl. This is handled automatically as a switch by
MakeMaker. The user normally does not need it.
.Ip "\s-1MAKEFILE\s0" 2
.IX Item "\s-1MAKEFILE\s0"
The name of the Makefile to be produced.
.Ip "\s-1MAN1PODS\s0" 2
.IX Item "\s-1MAN1PODS\s0"
Hashref of pod-containing files. MakeMaker will default this to all
\s-1EXE_FILES\s0 files that include \s-1POD\s0 directives. The files listed
here will be converted to man pages and installed as was requested
at Configure time.
.Ip "\s-1MAN3PODS\s0" 2
.IX Item "\s-1MAN3PODS\s0"
Hashref of .pm and .pod files. MakeMaker will default this to all
 .pod and any .pm files that include \s-1POD\s0 directives. The files listed
here will be converted to man pages and installed as was requested
at Configure time.
.Ip "\s-1MAP_TARGET\s0" 2
.IX Item "\s-1MAP_TARGET\s0"
If it is intended, that a new perl binary be produced, this variable
may hold a name for that binary. Defaults to perl
.Ip "\s-1MYEXTLIB\s0" 2
.IX Item "\s-1MYEXTLIB\s0"
If the extension links to a library that it builds set this to the
name of the library (see SDBM_File)
.Ip "\s-1NAME\s0" 2
.IX Item "\s-1NAME\s0"
Perl module name for this extension (\s-1DBD::\s0Oracle). This will default
to the directory name but should be explicitly defined in the
Makefile.\s-1PL\s0.
.Ip "\s-1NEEDS_LINKING\s0" 2
.IX Item "\s-1NEEDS_LINKING\s0"
MakeMaker will figure out, if an extension contains linkable code
anywhere down the directory tree, and will set this variable
accordingly, but you can speed it up a very little bit, if you define
this boolean variable yourself.
.Ip "\s-1NOECHO\s0" 2
.IX Item "\s-1NOECHO\s0"
Defaults to \f(CW@\fR. By setting it to an empty string you can generate a
Makefile that echos all commands. Mainly used in debugging MakeMaker
itself.
.Ip "\s-1NORECURS\s0" 2
.IX Item "\s-1NORECURS\s0"
Boolean.  Attribute to inhibit descending into subdirectories.
.Ip "\s-1OBJECT\s0" 2
.IX Item "\s-1OBJECT\s0"
List of object files, defaults to \*(L'$(\s-1BASEEXT\s0)$(\s-1OBJ_EXT\s0)\*(R', but can be a long
string containing all object files, e.g. \*(L"tkpBind.o
tkpButton.o tkpCanvas.o\*(R"
.Ip "\s-1OPTIMIZE\s0" 2
.IX Item "\s-1OPTIMIZE\s0"
Defaults to \f(CW-O\fR. Set it to \f(CW-g\fR to turn debugging on. The flag is
passed to subdirectory makes.
.Ip "\s-1PERL\s0" 2
.IX Item "\s-1PERL\s0"
Perl binary for tasks that can be done by miniperl
.Ip "\s-1PERLMAINCC\s0" 2
.IX Item "\s-1PERLMAINCC\s0"
The call to the program that is able to compile perlmain.c. Defaults
to $(\s-1CC\s0).
.Ip "\s-1PERL_ARCHLIB\s0" 2
.IX Item "\s-1PERL_ARCHLIB\s0"
Same as above for architecture dependent files
.Ip "\s-1PERL_LIB\s0" 2
.IX Item "\s-1PERL_LIB\s0"
Directory containing the Perl library to use.
.Ip "\s-1PERL_SRC\s0" 2
.IX Item "\s-1PERL_SRC\s0"
Directory containing the Perl source code (use of this should be
avoided, it may be undefined)
.Ip "\s-1PL_FILES\s0" 2
.IX Item "\s-1PL_FILES\s0"
Ref to hash of files to be processed as perl programs. MakeMaker
will default to any found *.\s-1PL\s0 file (except Makefile.\s-1PL\s0) being keys
and the basename of the file being the value. E.g.
.Sp
.Vb 1
\&  {'foobar.PL' => 'foobar'}
.Ve
The *.\s-1PL\s0 files are expected to produce output to the target files
themselves.
.Ip "\s-1PM\s0" 2
.IX Item "\s-1PM\s0"
Hashref of .pm files and *.pl files to be installed.  e.g.
.Sp
.Vb 1
\&  {'name_of_file.pm' => '$(INST_LIBDIR)/install_as.pm'}
.Ve
By default this will include *.pm and *.pl. If a lib directory
exists and is not listed in \s-1DIR\s0 (above) then any *.pm and *.pl files
it contains will also be included by default.  Defining \s-1PM\s0 in the
Makefile.\s-1PL\s0 will override \s-1PMLIBDIRS\s0.
.Ip "\s-1PMLIBDIRS\s0" 2
.IX Item "\s-1PMLIBDIRS\s0"
Ref to array of subdirectories containing library files.  Defaults to
[ \*(L'lib\*(R', $(\s-1BASEEXT\s0) ]. The directories will be scanned and any files
they contain will be installed in the corresponding location in the
library.  A \fIlibscan()\fR method can be used to alter the behaviour.
Defining \s-1PM\s0 in the Makefile.\s-1PL\s0 will override \s-1PMLIBDIRS\s0.
.Ip "\s-1PREFIX\s0" 2
.IX Item "\s-1PREFIX\s0"
Can be used to set the three \s-1INSTALL\s0* attributes in one go (except for
probably \s-1INSTALLMAN1DIR\s0, if it is not below \s-1PREFIX\s0 according to
\f(CW%Config\fR).  They will have \s-1PREFIX\s0 as a common directory node and will
branch from that node into lib/, lib/\s-1ARCHNAME\s0 or whatever Configure
decided at the build time of your perl (unless you override one of
them, of course).
.Ip "\s-1PREREQ_PM\s0" 2
.IX Item "\s-1PREREQ_PM\s0"
Hashref: Names of modules that need to be available to run this
extension (e.g. Fcntl for SDBM_File) are the keys of the hash and the
desired version is the value. If the required version number is 0, we
only check if any version is installed already.
.Ip "\s-1SKIP\s0" 2
.IX Item "\s-1SKIP\s0"
Arryref. E.g. [\fIqw\fR\|(name1 name2)] skip (do not write) sections of the
Makefile. Caution! Do not use the \s-1SKIP\s0 attribute for the neglectible
speedup. It may seriously damage the resulting Makefile. Only use it,
if you really need it.
.Ip "\s-1TYPEMAPS\s0" 2
.IX Item "\s-1TYPEMAPS\s0"
Ref to array of typemap file names.  Use this when the typemaps are
in some directory other than the current directory or when they are
not named \fBtypemap\fR.  The last typemap in the list takes
precedence.  A typemap in the current directory has highest
precedence, even if it isn't listed in \s-1TYPEMAPS\s0.  The default system
typemap has lowest precedence.
.Ip "\s-1VERSION\s0" 2
.IX Item "\s-1VERSION\s0"
Your version number for distributing the package.  This defaults to
0.1.
.Ip "\s-1VERSION_FROM\s0" 2
.IX Item "\s-1VERSION_FROM\s0"
Instead of specifying the \s-1VERSION\s0 in the Makefile.\s-1PL\s0 you can let
MakeMaker parse a file to determine the version number. The parsing
routine requires that the file named by \s-1VERSION_FROM\s0 contains one
single line to compute the version number. The first line in the file
that contains the regular expression
.Sp
.Vb 1
\&    /\e$(([\ew\e:\e']*)\ebVERSION)\eb.*\e=/
.Ve
will be evaluated with \fIeval()\fR and the value of the named variable
\fBafter\fR the \fIeval()\fR will be assigned to the \s-1VERSION\s0 attribute of the
MakeMaker object. The following lines will be parsed o.k.:
.Sp
.Vb 3
\&    $VERSION = '1.00';
\&    ( $VERSION ) = '$Revision: 1.211 $ ' =~ /\e$Revision:\es+([^\es]+)/;
\&    $FOO::VERSION = '1.10';
.Ve
but these will fail:
.Sp
.Vb 3
\&    my $VERSION = '1.01';
\&    local $VERSION = '1.02';
\&    local $FOO::VERSION = '1.30';
.Ve
The file named in \s-1VERSION_FROM\s0 is added as a dependency to Makefile to
guarantee, that the Makefile contains the correct \s-1VERSION\s0 macro after
a change of the file.
.Ip "\s-1XS\s0" 2
.IX Item "\s-1XS\s0"
Hashref of .xs files. MakeMaker will default this.  e.g.
.Sp
.Vb 1
\&  {'name_of_file.xs' => 'name_of_file.c'}
.Ve
The .c files will automatically be included in the list of files
deleted by a make clean.
.Ip "\s-1XSOPT\s0" 2
.IX Item "\s-1XSOPT\s0"
String of options to pass to xsubpp.  This might include \f(CW-C++\fR or
\f(CW-extern\fR.  Do not include typemaps here; the \s-1TYPEMAP\s0 parameter exists for
that purpose.
.Ip "\s-1XSPROTOARG\s0" 2
.IX Item "\s-1XSPROTOARG\s0"
May be set to an empty string, which is identical to \f(CW-prototypes\fR, or
\f(CW-noprototypes\fR. See the xsubpp documentation for details. MakeMaker
defaults to the empty string.
.Ip "\s-1XS_VERSION\s0" 2
.IX Item "\s-1XS_VERSION\s0"
Your version number for the .xs file of this package.  This defaults
to the value of the \s-1VERSION\s0 attribute.
.Sh "Additional lowercase attributes"
.IX Subsection "Additional lowercase attributes"
can be used to pass parameters to the methods which implement that
part of the Makefile.
.Ip "clean" 2
.IX Item "clean"
.Sp
.Vb 1
\&  {FILES => "*.xyz foo"}
.Ve
.Ip "depend" 2
.IX Item "depend"
.Sp
.Vb 1
\&  {ANY_TARGET => ANY_DEPENDECY, ...}
.Ve
.Ip "dist" 2
.IX Item "dist"
.Sp
.Vb 3
\&  {TARFLAGS => 'cvfF', COMPRESS => 'gzip', SUFFIX => 'gz',
\&  SHAR => 'shar -m', DIST_CP => 'ln', ZIP => '/bin/zip',
\&  ZIPFLAGS => '-rl', DIST_DEFAULT => 'private tardist' }
.Ve
If you specify \s-1COMPRESS\s0, then \s-1SUFFIX\s0 should also be altered, as it is
needed to tell make the target file of the compression. Setting
\s-1DIST_CP\s0 to ln can be useful, if you need to preserve the timestamps on
your files. \s-1DIST_CP\s0 can take the values \*(L'cp\*(R', which copies the file,
\*(L'ln\*(R', which links the file, and \*(L'best\*(R' which copies symbolic links and
links the rest. Default is \*(L'best\*(R'.
.Ip "dynamic_lib" 2
.IX Item "dynamic_lib"
.Sp
.Vb 1
\&  {ARMAYBE => 'ar', OTHERLDFLAGS => '...', INST_DYNAMIC_DEP => '...'}
.Ve
.Ip "installpm" 2
.IX Item "installpm"
Deprecated as of MakeMaker 5.23. See the \f(CWpm_to_blib\fR entry in the \fIExtUtils::MM_Unix\fR manpage.
.Ip "linkext" 2
.IX Item "linkext"
.Sp
.Vb 1
\&  {LINKTYPE => 'static', 'dynamic' or ''}
.Ve
\s-1NB\s0: Extensions that have nothing but *.pm files had to say
.Sp
.Vb 1
\&  {LINKTYPE => ''}
.Ve
with Pre-5.0 MakeMakers. Since version 5.00 of MakeMaker such a line
can be deleted safely. MakeMaker recognizes, when there's nothing to
be linked.
.Ip "macro" 2
.IX Item "macro"
.Sp
.Vb 1
\&  {ANY_MACRO => ANY_VALUE, ...}
.Ve
.Ip "realclean" 2
.IX Item "realclean"
.Sp
.Vb 1
\&  {FILES => '$(INST_ARCHAUTODIR)/*.xyz'}
.Ve
.Ip "tool_autosplit" 2
.IX Item "tool_autosplit"
.Sp
.Vb 1
\&  {MAXLEN =E<gt> 8}
.Ve
.Sh "Overriding MakeMaker Methods"
.IX Subsection "Overriding MakeMaker Methods"
If you cannot achieve the desired Makefile behaviour by specifying
attributes you may define private subroutines in the Makefile.\s-1PL\s0.
Each subroutines returns the text it wishes to have written to
the Makefile. To override a section of the Makefile you can
either say:
.PP
.Vb 1
\&        sub MY::c_o { "new literal text" }
.Ve
or you can edit the default by saying something like:
.PP
.Vb 5
\&        sub MY::c_o {
\&            my($inherited) = shift->SUPER::c_o(@_);
\&            $inherited =~ s/old text/new text/;
\&            $inherited;
\&        }
.Ve
If you running experiments with embedding perl as a library into other
applications, you might find MakeMaker not sufficient. You'd better
have a look at ExtUtils::embed which is a collection of utilities for
embedding.
.PP
If you still need a different solution, try to develop another
subroutine, that fits your needs and submit the diffs to
\fIperl5-porters@nicoh.com\fR or \fIcomp.lang.perl.misc\fR as appropriate.
.PP
For a complete description of all MakeMaker methods see the \fIExtUtils::MM_Unix\fR manpage.
.PP
Here is a simple example of how to add a new target to the generated
Makefile:
.PP
.Vb 6
\&    sub MY::postamble {
\&        '
\&    $(MYEXTLIB): sdbm/Makefile
\&            cd sdbm && $(MAKE) all
\&    ';
\&    }
.Ve
.Sh "Hintsfile support"
.IX Subsection "Hintsfile support"
MakeMaker.pm uses the architecture specific information from
Config.pm. In addition it evaluates architecture specific hints files
in a \f(CWhints/\fR directory. The hints files are expected to be named
like their counterparts in \f(CWPERL_SRC/hints\fR, but with an \f(CW.pl\fR file
name extension (eg. \f(CWnext_3_2.pl\fR). They are simply \f(CWeval\fRed by
MakeMaker within the \fIWriteMakefile()\fR subroutine, and can be used to
execute commands as well as to include special variables. The rules
which hintsfile is chosen are the same as in Configure.
.PP
The hintsfile is \fIeval()\fRed immediately after the arguments given to
WriteMakefile are stuffed into a hash reference \f(CW$self\fR but before this
reference becomes blessed. So if you want to do the equivalent to
override or create an attribute you would say something like
.PP
.Vb 1
\&    $self->{LIBS} = ['-ldbm -lucb -lc'];
.Ve
.Sh "Distribution Support"
.IX Subsection "Distribution Support"
For authors of extensions MakeMaker provides several Makefile
targets. Most of the support comes from the ExtUtils::Manifest module,
where additional documentation can be found.
.Ip "make distcheck" 4
.IX Item "make distcheck"
reports which files are below the build directory but not in the
\s-1MANIFEST\s0 file and vice versa. (See \fIExtUtils::Manifest::fullcheck()\fR for
details)
.Ip "make skipcheck" 4
.IX Item "make skipcheck"
reports which files are skipped due to the entries in the
\f(CWMANIFEST.SKIP\fR file (See \fIExtUtils::Manifest::skipcheck()\fR for
details)
.Ip "make distclean" 4
.IX Item "make distclean"
does a realclean first and then the distcheck. Note that this is not
needed to build a new distribution as long as you are sure, that the
\s-1MANIFEST\s0 file is ok.
.Ip "make manifest" 4
.IX Item "make manifest"
rewrites the \s-1MANIFEST\s0 file, adding all remaining files found (See
\fIExtUtils::Manifest::mkmanifest()\fR for details)
.Ip "make distdir" 4
.IX Item "make distdir"
Copies all the files that are in the \s-1MANIFEST\s0 file to a newly created
directory with the name \f(CW$(DISTNAME)-$(VERSION)\fR. If that directory
exists, it will be removed first.
.Ip "make disttest" 4
.IX Item "make disttest"
Makes a distdir first, and runs a \f(CWperl Makefile.PL\fR, a make, and
a make test in that directory.
.Ip "make tardist" 4
.IX Item "make tardist"
First does a distdir. Then a command $(\s-1PREOP\s0) which defaults to a null
command, followed by $(\s-1TOUNIX\s0), which defaults to a null command under
\s-1UNIX\s0, and will convert files in distribution directory to \s-1UNIX\s0 format
otherwise. Next it runs \f(CWtar\fR on that directory into a tarfile and
deletes the directory. Finishes with a command $(\s-1POSTOP\s0) which
defaults to a null command.
.Ip "make dist" 4
.IX Item "make dist"
Defaults to $(\s-1DIST_DEFAULT\s0) which in turn defaults to tardist.
.Ip "make uutardist" 4
.IX Item "make uutardist"
Runs a tardist first and uuencodes the tarfile.
.Ip "make shdist" 4
.IX Item "make shdist"
First does a distdir. Then a command $(\s-1PREOP\s0) which defaults to a null
command. Next it runs \f(CWshar\fR on that directory into a sharfile and
deletes the intermediate directory again. Finishes with a command
$(\s-1POSTOP\s0) which defaults to a null command.  Note: For shdist to work
properly a \f(CWshar\fR program that can handle directories is mandatory.
.Ip "make zipdist" 4
.IX Item "make zipdist"
First does a distdir. Then a command $(\s-1PREOP\s0) which defaults to a null
command. Runs \f(CW$(ZIP) $(ZIPFLAGS)\fR on that directory into a
zipfile. Then deletes that directory. Finishes with a command
$(\s-1POSTOP\s0) which defaults to a null command.
.Ip "make ci" 4
.IX Item "make ci"
Does a $(\s-1CI\s0) and a $(\s-1RCS_LABEL\s0) on all files in the \s-1MANIFEST\s0 file.
.PP
Customization of the dist targets can be done by specifying a hash
reference to the dist attribute of the WriteMakefile call. The
following parameters are recognized:
.PP
.Vb 12
\&    CI           ('ci -u')
\&    COMPRESS     ('compress')
\&    POSTOP       ('@ :')
\&    PREOP        ('@ :')
\&    TO_UNIX      (depends on the system)
\&    RCS_LABEL    ('rcs -q -Nv$(VERSION_SYM):')
\&    SHAR         ('shar')
\&    SUFFIX       ('Z')
\&    TAR          ('tar')
\&    TARFLAGS     ('cvf')
\&    ZIP          ('zip')
\&    ZIPFLAGS     ('-r')
.Ve
An example:
.PP
.Vb 1
\&    WriteMakefile( 'dist' => { COMPRESS=>"gzip", SUFFIX=>"gz" })
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MM_Unix, ExtUtils::Manifest, ExtUtils::testlib,
ExtUtils::Install, ExtUtils::embed
.SH "AUTHORS"
.IX Header "AUTHORS"
Andy Dougherty <\fIdoughera@lafcol.lafayette.edu\fR>, Andreas Ko\*:nig
<\fIA.Koenig@franz.ww.TU\-Berlin.DE\fR>, Tim Bunce <\fITim.Bunce@ig.co.uk\fR>.
VMS support by Charles Bailey <\fIbailey@genetics.upenn.edu\fR>.  OS/2
support by Ilya Zakharevich <\fIilya@math.ohio-state.edu\fR>.  Contact the
makemaker mailing list \f(CWmailto:makemaker@franz.ww.tu-berlin.de\fR, if
you have any questions.

.rn }` ''
