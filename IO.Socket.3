.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH IO::Socket 3 "perl 5.004, patch 55" "25/Nov/97" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
IO::Socket \- Object interface to socket communications
.SH "SYNOPSIS"
.PP
.Vb 1
\&    use IO::Socket;
.Ve
.SH "DESCRIPTION"
\f(CWIO::Socket\fR provides an object interface to creating and using sockets. It
is built upon the the \fIIO::Handle\fR manpage interface and inherits all the methods defined
by the \fIIO::Handle\fR manpage.
.PP
\f(CWIO::Socket\fR only defines methods for those operations which are common to all
types of socket. Operations which are specified to a socket in a particular 
domain have methods defined in sub classes of \f(CWIO::Socket\fR
.PP
\f(CWIO::Socket\fR will export all functions (and constants) defined by the \fISocket\fR manpage.
.SH "CONSTRUCTOR"
.Ip "new ( [\s-1ARGS\s0] )" 4
Creates an \f(CWIO::Socket\fR, which is a reference to a
newly created symbol (see the \f(CWSymbol\fR package). \f(CWnew\fR
optionally takes arguments, these arguments are in key-value pairs.
\f(CWnew\fR only looks for one key \f(CWDomain\fR which tells new which domain
the socket will be in. All other arguments will be passed to the
configuration method of the package for that domain, See below.
.Sp
\f(CWIO::Socket\fRs will be in autoflush mode after creation.  Note that
versions of \s-1IO::\s0Socket prior to 1.1603 (as shipped with Perl 5.004_04)
did not do this.   So if you need backward compatibility, you should
set autoflush explicitly.
.SH "METHODS"
See the \fIperlfunc\fR manpage for complete descriptions of each of the following
supported \f(CWIO::Socket\fR methods, which are just front ends for the
corresponding built-in functions:
.PP
.Vb 9
\&    socket
\&    socketpair
\&    bind
\&    listen
\&    accept
\&    send
\&    recv
\&    peername (getpeername)
\&    sockname (getsockname)
.Ve
Some methods take slightly different arguments to those defined in the \fIperlfunc\fR manpage
in attempt to make the interface more flexible. These are
.Ip "accept([\s-1PKG\s0])" 4
perform the system call \f(CWaccept\fR on the socket and return a new object. The
new object will be created in the same class as the listen socket, unless
\f(CWPKG\fR is specified. This object can be used to communicate with the client
that was trying to connect. In a scalar context the new socket is returned,
or undef upon failure. In an array context a two-element array is returned
containing the new socket and the peer address, the list will
be empty upon failure.
.Sp
Additional methods that are provided are
.Ip "timeout([\s-1VAL\s0])" 4
Set or get the timeout value associated with this socket. If called without
any arguments then the current setting is returned. If called with an argument
the current setting is changed and the previous value returned.
.Ip "sockopt(\s-1OPT\s0 [, \s-1VAL\s0])" 4
Unified method to both set and get options in the \s-1SOL_SOCKET\s0 level. If called
with one argument then getsockopt is called, otherwise setsockopt is called.
.Ip "sockdomain" 4
Returns the numerical number for the socket domain type. For example, for
a \s-1AF_INET\s0 socket the value of &\s-1AF_INET\s0 will be returned.
.Ip "socktype" 4
Returns the numerical number for the socket type. For example, for
a \s-1SOCK_STREAM\s0 socket the value of &\s-1SOCK_STREAM\s0 will be returned.
.Ip "protocol" 4
Returns the numerical number for the protocol being used on the socket, if
known. If the protocol is unknown, as with an \s-1AF_UNIX\s0 socket, zero
is returned.
.SH "SUB\-CLASSES"
.Sh "\s-1IO::\s0Socket::\s-1INET\s0"
\f(CWIO::Socket::INET\fR provides a constructor to create an \s-1AF_INET\s0 domain socket
and some related methods. The constructor can take the following options
.PP
.Vb 9
\&    PeerAddr    Remote host address          <hostname>[:<port>]
\&    PeerPort    Remote port or service       <service>[(<no>)] | <no>
\&    LocalAddr   Local host bind address      hostname[:port]
\&    LocalPort   Local host bind port         <service>[(<no>)] | <no>
\&    Proto       Protocol name (or number)    "tcp" | "udp" | ...
\&    Type        Socket type                  SOCK_STREAM | SOCK_DGRAM | ...
\&    Listen      Queue size for listen
\&    Reuse       Set SO_REUSEADDR before binding
\&    Timeout     Timeout value for various operations
.Ve
If \f(CWListen\fR is defined then a listen socket is created, else if the
socket type, which is derived from the protocol, is \s-1SOCK_STREAM\s0 then
\fIconnect()\fR is called.
.PP
The \f(CWPeerAddr\fR can be a hostname or the \s-1IP\s0\-address on the
\*(L"xx.xx.xx.xx\*(R" form.  The \f(CWPeerPort\fR can be a number or a symbolic
service name.  The service name might be followed by a number in
parenthesis which is used if the service is not known by the system.
The \f(CWPeerPort\fR specification can also be embedded in the \f(CWPeerAddr\fR
by preceding it with a \*(L":\*(R".
.PP
If \f(CWProto\fR is not given and you specify a symbolic \f(CWPeerPort\fR port,
then the constructor will try to derive \f(CWProto\fR from the service
name.  As a last resort \f(CWProto\fR \*(L"tcp\*(R" is assumed.  The \f(CWType\fR
parameter will be deduced from \f(CWProto\fR if not specified.
.PP
If the constructor is only passed a single argument, it is assumed to
be a \f(CWPeerAddr\fR specification.
.PP
Examples:
.PP
.Vb 3
\&   $sock = IO::Socket::INET->new(PeerAddr => 'www.perl.org',
\&                                 PeerPort => 'http(80)',
\&                                 Proto    => 'tcp');
.Ve
.Vb 1
\&   $sock = IO::Socket::INET->new(PeerAddr => 'localhost:smtp(25)');
.Ve
.Vb 4
\&   $sock = IO::Socket::INET->new(Listen    => 5,
\&                                 LocalAddr => 'localhost',
\&                                 LocalPort => 9000,
\&                                 Proto     => 'tcp');
.Ve
.Vb 1
\&   $sock = IO::Socket::INET->new('127.0.0.1:25');
.Ve
.Sh "\s-1METHODS\s0"
.Ip "sockaddr ()" 4
Return the address part of the sockaddr structure for the socket
.Ip "sockport ()" 4
Return the port number that the socket is using on the local host
.Ip "sockhost ()" 4
Return the address part of the sockaddr structure for the socket in a
text form xx.xx.xx.xx
.Ip "peeraddr ()" 4
Return the address part of the sockaddr structure for the socket on
the peer host
.Ip "peerport ()" 4
Return the port number for the socket on the peer host.
.Ip "peerhost ()" 4
Return the address part of the sockaddr structure for the socket on the
peer host in a text form xx.xx.xx.xx
.Sh "\s-1IO::\s0Socket::\s-1UNIX\s0"
\f(CWIO::Socket::UNIX\fR provides a constructor to create an \s-1AF_UNIX\s0 domain socket
and some related methods. The constructor can take the following options
.PP
.Vb 4
\&    Type        Type of socket (eg SOCK_STREAM or SOCK_DGRAM)
\&    Local       Path to local fifo
\&    Peer        Path to peer fifo
\&    Listen      Create a listen socket
.Ve
.Sh "\s-1METHODS\s0"
.Ip "hostpath()" 4
Returns the pathname to the fifo at the local end
.Ip "peerpath()" 4
Returns the pathanme to the fifo at the peer end
.SH "SEE ALSO"
the \fISocket\fR manpage, the \fIIO::Handle\fR manpage
.SH "AUTHOR"
Graham Barr <\fIGraham.Barr@tiuk.ti.com\fR>
.SH "COPYRIGHT"
Copyright (c) 1996 Graham Barr. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms
as Perl itself.

.rn }` ''
.IX Title "IO::Socket 3"
.IX Name "IO::Socket - Object interface to socket communications"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "CONSTRUCTOR"

.IX Item "new ( [\s-1ARGS\s0] )"

.IX Header "METHODS"

.IX Item "accept([\s-1PKG\s0])"

.IX Item "timeout([\s-1VAL\s0])"

.IX Item "sockopt(\s-1OPT\s0 [, \s-1VAL\s0])"

.IX Item "sockdomain"

.IX Item "socktype"

.IX Item "protocol"

.IX Header "SUB\-CLASSES"

.IX Subsection "\s-1IO::\s0Socket::\s-1INET\s0"

.IX Subsection "\s-1METHODS\s0"

.IX Item "sockaddr ()"

.IX Item "sockport ()"

.IX Item "sockhost ()"

.IX Item "peeraddr ()"

.IX Item "peerport ()"

.IX Item "peerhost ()"

.IX Subsection "\s-1IO::\s0Socket::\s-1UNIX\s0"

.IX Subsection "\s-1METHODS\s0"

.IX Item "hostpath()"

.IX Item "peerpath()"

.IX Header "SEE ALSO"

.IX Header "AUTHOR"

.IX Header "COPYRIGHT"

