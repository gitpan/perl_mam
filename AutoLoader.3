.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH AutoLoader 3 "perl 5.004, patch 01" "6/Jun/97" "Perl Programmers Reference Guide"
.IX Title "AutoLoader 3"
.UC
.IX Name "AutoLoader - load subroutines only on demand"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
AutoLoader \- load subroutines only on demand
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 2
\&    package Foo;
\&    use AutoLoader 'AUTOLOAD';   # import the default AUTOLOAD subroutine
.Ve
.Vb 7
\&    package Bar;
\&    use AutoLoader;              # don't import AUTOLOAD, define our own
\&    sub AUTOLOAD {
\&        ...
\&        $AutoLoader::AUTOLOAD = "...";
\&        goto &AutoLoader::AUTOLOAD;
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \fBAutoLoader\fR module works with the \fBAutoSplit\fR module and the
\f(CW__END__\fR token to defer the loading of some subroutines until they are
used rather than loading them all at once.
.PP
To use \fBAutoLoader\fR, the author of a module has to place the
definitions of subroutines to be autoloaded after an \f(CW__END__\fR token.
(See the \fIperldata\fR manpage.)  The \fBAutoSplit\fR module can then be run manually to
extract the definitions into individual files \fIauto/funcname.al\fR.
.PP
\fBAutoLoader\fR implements an AUTOLOAD subroutine.  When an undefined
subroutine in is called in a client module of \fBAutoLoader\fR,
\fBAutoLoader\fR's AUTOLOAD subroutine attempts to locate the subroutine in a
file with a name related to the location of the file from which the
client module was read.  As an example, if \fIPOSIX.pm\fR is located in
\fI/usr/local/lib/perl5/POSIX.pm\fR, \fBAutoLoader\fR will look for perl
subroutines \fBPOSIX\fR in \fI/usr/local/lib/perl5/auto/POSIX/*.al\fR, where
the \f(CW.al\fR file has the same name as the subroutine, sans package.  If
such a file exists, AUTOLOAD will read and evaluate it,
thus (presumably) defining the needed subroutine.  AUTOLOAD will then
\f(CWgoto\fR the newly defined subroutine.
.PP
Once this process completes for a given funtion, it is defined, so
future calls to the subroutine will bypass the AUTOLOAD mechanism.
.Sh "Subroutine Stubs"
.IX Subsection "Subroutine Stubs"
In order for object method lookup and/or prototype checking to operate
correctly even when methods have not yet been defined it is necessary to
\*(L"forward declare\*(R" each subroutine (as in \f(CWsub NAME;\fR).  See
the section on \fI\s-1SYNOPSIS\s0\fR in the \fIperlsub\fR manpage.  Such forward declaration creates \*(L"subroutine
stubs\*(R", which are place holders with no code.
.PP
The AutoSplit and \fBAutoLoader\fR modules automate the creation of forward
declarations.  The AutoSplit module creates an \*(L'index\*(R' file containing
forward declarations of all the AutoSplit subroutines.  When the
AutoLoader module is \*(L'use'd it loads these declarations into its callers
package.
.PP
Because of this mechanism it is important that \fBAutoLoader\fR is always
\f(CWuse\fRd and not \f(CWrequire\fRd.
.Sh "Using \fBAutoLoader\fR's \s-1AUTOLOAD\s0 Subroutine"
.IX Subsection "Using \fBAutoLoader\fR's \s-1AUTOLOAD\s0 Subroutine"
In order to use \fBAutoLoader\fR's \s-1AUTOLOAD\s0 subroutine you \fImust\fR
explicitly import it:
.PP
.Vb 1
\&    use AutoLoader 'AUTOLOAD';
.Ve
.Sh "Overriding \fBAutoLoader\fR's \s-1AUTOLOAD\s0 Subroutine"
.IX Subsection "Overriding \fBAutoLoader\fR's \s-1AUTOLOAD\s0 Subroutine"
Some modules, mainly extensions, provide their own \s-1AUTOLOAD\s0 subroutines.
They typically need to check for some special cases (such as constants)
and then fallback to \fBAutoLoader\fR's \s-1AUTOLOAD\s0 for the rest.
.PP
Such modules should \fInot\fR import \fBAutoLoader\fR's \s-1AUTOLOAD\s0 subroutine.
Instead, they should define their own \s-1AUTOLOAD\s0 subroutines along these
lines:
.PP
.Vb 1
\&    use AutoLoader;
.Ve
.Vb 16
\&    sub AUTOLOAD {
\&        my $constname;
\&        ($constname = $AUTOLOAD) =~ s/.*:://;
\&        my $val = constant($constname, @_ ? $_[0] : 0);
\&        if ($! != 0) {
\&            if ($! =~ /Invalid/) {
\&                $AutoLoader::AUTOLOAD = $AUTOLOAD;
\&                goto &AutoLoader::AUTOLOAD;
\&            }
\&            else {
\&                croak "Your vendor has not defined constant $constname";
\&            }
\&        }
\&        eval "sub $AUTOLOAD { $val }";
\&        goto &$AUTOLOAD;
\&    }
.Ve
If any module's own \s-1AUTOLOAD\s0 subroutine has no need to fallback to the
AutoLoader's \s-1AUTOLOAD\s0 subroutine (because it doesn't have any AutoSplit
subroutines), then that module should not use \fBAutoLoader\fR at all.
.Sh "Package Lexicals"
.IX Subsection "Package Lexicals"
Package lexicals declared with \f(CWmy\fR in the main block of a package
using \fBAutoLoader\fR will not be visible to auto-loaded subroutines, due to
the fact that the given scope ends at the \f(CW__END__\fR marker.  A module
using such variables as package globals will not work properly under the
\fBAutoLoader\fR.
.PP
The \f(CWvars\fR pragma (see the section on \fIvars\fR in the \fIperlmod\fR manpage) may be used in such
situations as an alternative to explicitly qualifying all globals with
the package namespace.  Variables pre-declared with this pragma will be
visible to any autoloaded routines (but will not be invisible outside
the package, unfortunately).
.Sh "\fBAutoLoader\fR vs. \fBSelfLoader\fR"
.IX Subsection "\fBAutoLoader\fR vs. \fBSelfLoader\fR"
The \fBAutoLoader\fR is similar in purpose to \fBSelfLoader\fR: both delay the
loading of subroutines.
.PP
\fBSelfLoader\fR uses the \f(CW__DATA__\fR marker rather than \f(CW__END__\fR.
While this avoids the use of a hierarchy of disk files and the
associated open/close for each routine loaded, \fBSelfLoader\fR suffers a
startup speed disadvantage in the one-time parsing of the lines after
\f(CW__DATA__\fR, after which routines are cached.  \fBSelfLoader\fR can also
handle multiple packages in a file.
.PP
\fBAutoLoader\fR only reads code as it is requested, and in many cases
should be faster, but requires a machanism like \fBAutoSplit\fR be used to
create the individual files.  the \fIExtUtils::MakeMaker\fR manpage will invoke
\fBAutoSplit\fR automatically if \fBAutoLoader\fR is used in a module source
file.
.SH "CAVEATS"
.IX Header "CAVEATS"
AutoLoaders prior to Perl 5.002 had a slightly different interface.  Any
old modules which use \fBAutoLoader\fR should be changed to the new calling
style.  Typically this just means changing a require to a use, adding
the explicit \f(CW'AUTOLOAD'\fR import if needed, and removing \fBAutoLoader\fR
from \f(CW@ISA\fR.
.PP
On systems with restrictions on file name length, the file corresponding
to a subroutine may have a shorter name that the routine itself.  This
can lead to conflicting file names.  The \fIAutoSplit\fR package warns of
these potential conflicts when used to split a module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the \fISelfLoader\fR manpage \- an autoloader that doesn't use external files.

.rn }` ''
