.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH FAQ 1 "perl 5.005, patch 53" "4/Dec/97" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
libnetFAQ \- libnet Frequently Asked Questions
.Sh "Where to get this document"
This document is distributed with the libnet disribution, and is also
avaliable on the libnet web page at
.PP
.Vb 1
\&    http://www.connect.net/gbarr/libnet/
.Ve
.Sh "How to contribute to this document"
You may mail corrections, additions, and suggestions to me
gbarr@pobox.com.
.SH "Author and Copyright Information"
Copyright (c) 1997 Graham Barr.
All rights reserved.
.Sh "Non-commercial Reproduction"
Permission is granted to distribute this document, in part or in full,
via electronic means or printed copy providing that (1) that all credits
and copyright notices be retained, (2) that no charges beyond reproduction
be involved, and (3) that a reasonable attempt be made to use the most
current version available.
.Sh "Disclaimer"
This information is offered in good faith and in the hope that it may
be of use, but is not guaranteed to be correct, up to date, or suitable
for any particular purpose whatsoever.  The authors accept no liability
in respect of this information or its use.
.SH "Obtaining and installing libnet"
.Sh "What is libnet ?"
libnet is a collection of perl5 modules which all related to network
programming. The majority of the modules avaliable provided the
client side of popular server-client protocols that are used in
the internet community.
.Sh "Which version of perl do I need ?"
libnet has been know to work with versions of perl from 5.002 onwards. However
if your release of perl is prior to perl5.004 then you will need to
obtain and install the \s-1IO\s0 distribution from \s-1CPAN\s0. If you have perl5.004
or later then you will have the \s-1IO\s0 modules in your installation already,
but \s-1CPAN\s0 may contain updates.
.Sh "What other modules do I need ?"
The only modules you will need installed are the modules from the \s-1IO\s0
distribution. If you have perl5.004 or later you will already have
these modules.
.Sh "What machines support libnet ?"
libnet itself is an entirly perl-code distribution so it should work
on any machine that perl runs on. However \s-1IO\s0 may not work
with some machines and earlier releases of perl. But this
should not be the case with perl version 5.004 or later.
.Sh "Where can I get the latest libnet release"
The latest libnet release is always on \s-1CPAN\s0, you will find it
in 
.Sp
.Vb 4
\& http://www.perl.com/CPAN/modules/by-module/Net/
\& 
\&The latest release and information is also avaliable on the libnet web page
\&at
.Ve
.Vb 1
\& http://www.connect.net/gbarr/libnet/
.Ve
.SH "Using Net::FTP"
.Sh "How do I download files from a \s-1FTP\s0 server"
An example taken from an articlt posted to comp.lang.perl.misc
.Sp
.Vb 1
\&    #!/your/path/to/perl
.Ve
.Vb 1
\&    # a module making life easier
.Ve
.Vb 1
\&    use Net::FTP;
.Ve
.Vb 2
\&    # for debuging: $ftp = Net::FTP->new('site','Debug',10);
\&    # open a connection and log in!
.Ve
.Vb 2
\&    $ftp = Net::FTP->new('target_site.somewhere.xxx');
\&    $ftp->login('username','password');
.Ve
.Vb 1
\&    # set transfer mode to binary
.Ve
.Vb 1
\&    $ftp->binary();
.Ve
.Vb 1
\&    # change the directory on the ftp site
.Ve
.Vb 1
\&    $ftp->cwd('/some/path/to/somewhere/');
.Ve
.Vb 1
\&    foreach $name ('file1', 'file2', 'file3') {
.Ve
.Vb 4
\&    # get's arguments are in the following order:
\&    # ftp server's filename
\&    # filename to save the transfer to on the local machine
\&    # can be simply used as get($name) if you want the same name
.Ve
.Vb 2
\&      $ftp->get($name,$name);
\&    }
.Ve
.Vb 1
\&    # ftp done!
.Ve
.Vb 1
\&    $ftp->quit;
.Ve
.Sh "How do I transfer files in binary mode ?"
To transfer files without <\s-1LF\s0><\s-1CR\s0> translation Net::\s-1FTP\s0 provides
the \f(CWbinary\fR method
.Sp
.Vb 1
\&    $ftp->binary;
.Ve
.Sh "How can I can the size of a file on a remote \s-1FTP\s0 server ?"
.Sh "How can I can the modification time of a file on a remote \s-1FTP\s0 server ?"
.Sh "Can I do a reget operation like the ftp command ?"
.Sh "How do I get a directory listing from a \s-1FTP\s0 server ?"
.SH "Debugging scripts"
.Sh "How can I debug my scripts that use Net::* modules ?"
Most of the libnet client classes allow options to be passed to the
constructor, in most cases one option is called \f(CWDebug\fR. Passing
this option with a non-zero value will turn on a protocol trace, which
will be sent to \s-1STDERR\s0. This trace can be useful to see what commands
are being sent to the remote server and what responces are being
received back.
.Sp
.Vb 7
\&    #!/your/path/to/perl
\&    
\&    use Net::FTP;
\&    
\&    my $ftp = new Net::FTP($host, Debug => 1);
\&    $ftp->login('gbarr','password');
\&    $ftp->quit;
.Ve
this script would output something like
.Sp
.Vb 6
\& Net::FTP: Net::FTP(2.22)
\& Net::FTP:   Exporter
\& Net::FTP:   Net::Cmd(2.0801)
\& Net::FTP:   IO::Socket::INET
\& Net::FTP:     IO::Socket(1.1603)
\& Net::FTP:       IO::Handle(1.1504)
.Ve
.Vb 7
\& Net::FTP=GLOB(0x8152974)<<< 220 imagine FTP server (Version wu-2.4(5) Tue Jul 29 11:17:18 CDT 1997) ready.
\& Net::FTP=GLOB(0x8152974)>>> user gbarr
\& Net::FTP=GLOB(0x8152974)<<< 331 Password required for gbarr.
\& Net::FTP=GLOB(0x8152974)>>> PASS ....
\& Net::FTP=GLOB(0x8152974)<<< 230 User gbarr logged in.  Access restrictions apply.
\& Net::FTP=GLOB(0x8152974)>>> QUIT
\& Net::FTP=GLOB(0x8152974)<<< 221 Goodbye.
.Ve
The first few lines tell you the modules that Net::\s-1FTP\s0 uses and thier versions,
this is usefule data to me when a user reports a bug. The last seven lines
show the communication with the server. Each line has three parts. The first
part is the object itself, this is useful for separating the output
if you are using mutiple objects. The second part is either \f(CW<<<<\fR to
show data coming from the server or \f(CW&gt&gt&gt&gt\fR to show data
going to the server. The remainder of the line is the command
being sent or responce being received.
.SH ""
Copyright (c) 1997 Graham Barr.
All rights reserved.

.rn }` ''
.IX Title "FAQ 1"
.IX Name "libnetFAQ - libnet Frequently Asked Questions"

.IX Header "NAME"

.IX Subsection "Where to get this document"

.IX Subsection "How to contribute to this document"

.IX Header "Author and Copyright Information"

.IX Subsection "Non-commercial Reproduction"

.IX Subsection "Disclaimer"

.IX Header "Obtaining and installing libnet"

.IX Subsection "What is libnet ?"

.IX Subsection "Which version of perl do I need ?"

.IX Subsection "What other modules do I need ?"

.IX Subsection "What machines support libnet ?"

.IX Subsection "Where can I get the latest libnet release"

.IX Header "Using Net::FTP"

.IX Subsection "How do I download files from a \s-1FTP\s0 server"

.IX Subsection "How do I transfer files in binary mode ?"

.IX Subsection "How can I can the size of a file on a remote \s-1FTP\s0 server ?"

.IX Subsection "How can I can the modification time of a file on a remote \s-1FTP\s0 server ?"

.IX Subsection "Can I do a reget operation like the ftp command ?"

.IX Subsection "How do I get a directory listing from a \s-1FTP\s0 server ?"

.IX Header "Debugging scripts"

.IX Subsection "How can I debug my scripts that use Net::* modules ?"

.IX Header ""

