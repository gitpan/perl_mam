.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Benchmark 3 "perl 5.003, patch 05" "7/Jun/95" "Perl Programmers Reference Guide"
.IX Title "Benchmark 3"
.UC
.IX Name "Benchmark - benchmark running times of code"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
Benchmark \- benchmark running times of code
.PP
timethis \- run a chunk of code several times
.PP
timethese \- run several chunks of code several times
.PP
timeit \- run a chunk of code and see how long it goes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 1
\&    timethis ($count, "code");
.Ve
.Vb 4
\&    timethese($count, {
\&        'Name1' => '...code1...',
\&        'Name2' => '...code2...',
\&    });
.Ve
.Vb 2
\&    $t = timeit($count, '...other code...')
\&    print "$count loops of other code took:",timestr($t),"\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Benchmark module encapsulates a number of routines to help you
figure out how long it takes to execute some code.
.Sh "Methods"
.IX Subsection "Methods"
.Ip "new" 10
.IX Item "new"
Returns the current time.   Example:
.Sp
.Vb 6
\&    use Benchmark;
\&    $t0 = new Benchmark;
\&    # ... your code here ...
\&    $t1 = new Benchmark;
\&    $td = timediff($t1, $t0);
\&    print "the code took:",timestr($dt),"\en";
.Ve
.Ip "debug" 10
.IX Item "debug"
Enables or disable debugging by setting the \f(CW$Benchmark::Debug\fR flag:
.Sp
.Vb 3
\&    debug Benchmark 1; 
\&    $t = timeit(10, ' 5 ** $Global ');
\&    debug Benchmark 0; 
.Ve
.Sh "Standard Exports"
.IX Subsection "Standard Exports"
The following routines will be exported into your namespace 
if you use the Benchmark module:
.Ip "timeit(\s-1COUNT\s0, \s-1CODE\s0)" 10
.IX Item "timeit(\s-1COUNT\s0, \s-1CODE\s0)"
Arguments: \s-1COUNT\s0 is the number of time to run the loop, and 
the second is the code to run.  \s-1CODE\s0 may be a string containing the code,
a reference to the function to run, or a reference to a hash containing 
keys which are names and values which are more \s-1CODE\s0 specs.
.Sp
Side-effects: prints out noise to standard out.
.Sp
Returns: a Benchmark object.  
.Ip "timethis" 10
.IX Item "timethis"
.Ip "timethese" 10
.IX Item "timethese"
.Ip "timediff" 10
.IX Item "timediff"
.Ip "timestr" 10
.IX Item "timestr"
.Sh "Optional Exports"
.IX Subsection "Optional Exports"
The following routines will be exported into your namespace
if you specifically ask that they be imported:
clearcache
.Sp
clearallcache
.Sp
disablecache
.Sp
enablecache
.SH "NOTES"
.IX Header "NOTES"
The data is stored as a list of values from the time and times
functions: 
.PP
.Vb 1
\&      ($real, $user, $system, $children_user, $children_system)
.Ve
in seconds for the whole loop (not divided by the number of rounds).
.PP
The timing is done using \fItime\fR\|(3) and \fItimes\fR\|(3).
.PP
Code is executed in the caller's package.
.PP
Enable debugging by:  
.PP
.Vb 1
\&    $Benchmark::debug = 1;
.Ve
The time of the null loop (a loop with the same
number of rounds but empty loop body) is subtracted
from the time of the real loop.
.PP
The null loop times are cached, the key being the
number of rounds. The caching can be controlled using
calls like these:
.PP
.Vb 2
\&    clearcache($key); 
\&    clearallcache();
.Ve
.Vb 2
\&    disablecache(); 
\&    enablecache();
.Ve
.SH "INHERITANCE"
.IX Header "INHERITANCE"
Benchmark inherits from no other class, except of course
for Exporter.
.SH "CAVEATS"
.IX Header "CAVEATS"
The real time timing is done using \fItime\fR\|(2) and
the granularity is therefore only one second.
.PP
Short tests may produce negative figures because perl
can appear to take longer to execute the empty loop 
than a short test; try: 
.PP
.Vb 1
\&    timethis(100,'1');
.Ve
The system time of the null loop might be slightly
more than the system time of the loop with the actual
code and therefore the difference might end up being < 0.
.PP
More documentation is needed :\-( especially for styles and formats.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jarkko Hietaniemi <Jarkko.Hietaniemi@hut.fi>,
Tim Bunce <Tim.Bunce@ig.co.uk>
.SH "MODIFICATION HISTORY"
.IX Header "MODIFICATION HISTORY"
September 8th, 1994; by Tim Bunce.

.rn }` ''
