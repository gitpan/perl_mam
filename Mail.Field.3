.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Mail::Field 3 "perl 5.007, patch 00" "8/Feb/102" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Mail::Field \- Base class for manipulation of mail header fields
.SH "SYNOPSIS"
.PP
.Vb 4
\&    use Mail::Field;
\&    
\&    $field = Mail::Field->new('Subject', 'some subject text');
\&    print $field->tag,": ",$field->stringify,"\en";
.Ve
.Vb 1
\&    $field = Mail::Field->subject('some subject text');
.Ve
.SH "DESCRIPTION"
\f(CWMail::Field\fR is a base class for packages that create and manipulate
fields from Email (and MIME) headers. Each different field will have its
own sub-class, defining its own interface.
.PP
This document describes the minimum interface that each sub-class should
provide, and also guidlines on how the field specific interface should be
defined. 
.SH "CONSTRUCTOR"
Mail::Field, and it's sub-classes define several methods which return
new objects. These can all be termed to be constructors.
.Ip "new ( \s-1TAG\s0 [, \s-1STRING\s0 | \s-1OPTIONS\s0 ] )" 4
The new constructor will create an object in the class which defines
the field specified by the tag argument.
.Sp
After creation of the object :-
.Sp
If the tag argument is followed by a single string then the \f(CWparse\fR method
will be called with this string.
.Sp
If the tag argument is followed by more than one arguments then the \f(CWcreate\fR
method will be called with these arguments.
.Ip "extract ( \s-1TAG\s0, \s-1HEAD\s0 [, \s-1INDEX\s0 ] )" 4
This constuctor takes as arguments the tag name, a \f(CWMail::Head\fR object
and optionally an index.
.Sp
If the index argument is given then \f(CWextract\fR will retrieve the given tag
from the \f(CWMail::Head\fR object and create a new \f(CWMail::Field\fR based object.
\fIundef\fR will be returned in the field does not exist.
.Sp
If the index argument is not given the the result depends on the context
in which \f(CWextract\fR is called. If called in a scalar context the result
will be as if \f(CWextract\fR was called with an index value of zero. If called
in an array context then all tags will be retrieved and a list of
\f(CWMail::Field\fR objects will be returned.
.Ip "combine ( \s-1FIELD_LIST\s0 )" 4
This constructor takes as arguments a list of \f(CWMail::Field\fR objects, which
should all be of the same sub-class, and creates a new object in that same
class.
.Sp
This constructor is nor defined in \f(CWMail::Field\fR as there is no generic
way to combine the various field types. Each sub-class should define
its own combine constructor, if combining is possible/allowed.
.SH "METHODS"
.Ip "parse" 4
.Ip "set" 4
.Ip "tag" 4
.Ip "stringify" 4
.SH "SUB\-CLASS PACKAGE NAMES"
All sub-classes should be called Mail::Field::\fIname\fR where \fIname\fR is
derived from the tag using these rules.
.Ip "\(bu" 4
Consider a tag as being made up of elements separated by \*(L'\-\*(R'
.Ip "\(bu" 4
Convert all characters to lowercase except the first in each element, which
should be uppercase.
.Ip "\(bu" 4
\fIname\fR is then created from these elements by using the first
N characters from each element.
.Ip "\(bu" 4
N is calculated by using the formula :-
.Sp
.Vb 1
\&    int((7 + #elements) / #elements)
.Ve
.Ip "\(bu" 4
\fIname\fR is then limited to a maximum of 8 characters, keeping the first 8
characters
.PP
For an example of this take a look at the definition of the 
\f(CW_header_pkg_name\fR subroutine in \f(CWMail::Field\fR
.SH "AUTHOR"
Graham Barr.
.PP
Maintained by Mark Overmeer <mailtools@overmeer.net>
.SH "SEE ALSO"
the \fIMIME::*\fR manpages
.SH "CREDITS"
Eryq <eryq@rhine.gsfc.nasa.gov> \- for all the help in defining this package
so that \f(CWMail::*\fR and \f(CWMIME::*\fR can be integrated together.
.SH "COPYRIGHT"
Copyright (c) 1995-2001 Graham Barr. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms
as Perl itself.

.rn }` ''
.IX Title "Mail::Field 3"
.IX Name "Mail::Field - Base class for manipulation of mail header fields"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "CONSTRUCTOR"

.IX Item "new ( \s-1TAG\s0 [, \s-1STRING\s0 | \s-1OPTIONS\s0 ] )"

.IX Item "extract ( \s-1TAG\s0, \s-1HEAD\s0 [, \s-1INDEX\s0 ] )"

.IX Item "combine ( \s-1FIELD_LIST\s0 )"

.IX Header "METHODS"

.IX Item "parse"

.IX Item "set"

.IX Item "tag"

.IX Item "stringify"

.IX Header "SUB\-CLASS PACKAGE NAMES"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Header "AUTHOR"

.IX Header "SEE ALSO"

.IX Header "CREDITS"

.IX Header "COPYRIGHT"

