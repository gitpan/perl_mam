.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::XML::PatAct::ToObjects 3 "perl 5.007, patch 00" "22/Feb/100" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
XML::PatAct::ToObjects \- An action module for creating Perl objects
.SH "SYNOPSIS"
.PP
.Vb 1
\& use XML::PatAct::ToObjects;
.Ve
.Vb 3
\& my $patterns = [ PATTERN => [ OPTIONS ],
\&                  PATTERN => "PERL-CODE",
\&                  ... ];
.Ve
.Vb 4
\& my $matcher = XML::PatAct::ToObjects->new( Patterns => $patterns,
\&                                            Matcher => $matcher,
\&                                            CopyId => 1,
\&                                            CopyAttributes => 1 );
.Ve
.SH "DESCRIPTION"
XML::PatAct::ToObjects is a PerlSAX handler for applying
pattern-action lists to XML parses or trees.  XML::PatAct::ToObjects
creates Perl objects of the types and contents of the action items you
define.
.PP
New XML::PatAct::ToObject instances are creating by calling `\fInew()\fR\*(R'.
Parameters can be passed as a list of key, value pairs or a hash.
`\fInew()\fR\*(R' requires the Patterns and Matcher parameters, the rest are
optional:
.Ip "Patterns" 4
The pattern-action list to apply.
.Ip "Matcher" 4
An instance of the pattern or query matching module.
.Ip "CopyId" 4
Causes the `\s-1ID\s0\*(R' attribute, if any, in a source \s-1XML\s0 element to be
copied to an `\s-1ID\s0\*(R' attribute in newly created objects.  Note that IDs
may be lost of no pattern matches that element or an object is not
created (\f(CW-make\fR) for that element.
.Ip "CopyAttributes" 4
Causes all attributes of the element to be copied to the newly created
objects.
.PP
Each action can either be a list of options defined below or a string
containing a fragment of Perl code.  If the action is a string of Perl
code then simple then some simple substitutions are made as described
further below.
.PP
Options that can be used in an action item containing an option-list:
.Ip "\fB\-holder\fR" 4
Ignore this element, but continue processing it's children (compare to
\fB\-ignore\fR).  \f(CW-pcdata\fR may be used with this option.
.Ip "\fB\-ignore\fR" 4
Ignore (discard) this element and it's children (compare to \fB\-holder\fR).
.Ip "\fB\-pcdata\fR" 4
Character data in this element should be copied to the \f(CWContents\fR
field.
.Ip "\fB\-make\fR \fI\s-1PACKAGE\s0\fR" 4
Create an object blessed into \fI\s-1PACKAGE\s0\fR, and continue processing this
element and it's children.  \fI\s-1PACKAGE\s0\fR may be the type `\f(CWHASH\fR\*(R' to
simply create an anonyous hash.
.Ip "\fB\-args\fR \fI\s-1ARGUMENTS\s0\fR" 4
Use \fI\s-1ARGUMENTS\s0\fR in creating the object specified by \fB\-make\fR.  This
is commonly used to copy element attributes into fields in the newly
created object.  For example:
.Sp
.Vb 1
\&  -make => 'HASH', -args => 'URL => %{href}'
.Ve
would copy the `\f(CWhref\fR\*(R' attribute in an element to the `\f(CWURL\fR\*(R' field
of the newly created hash.
.Ip "\fB\-field\fR \fI\s-1FIELD\s0\fR" 4
Store this element, object, or children of this element in the parent
object's field named by \fI\s-1FIELD\s0\fR.
.Ip "\fB\-push-field\fR \fI\s-1FIELD\s0\fR" 4
Similar to \fB\-field\fR, except that \fI\s-1FIELD\s0\fR is an array and the
contents are pushed onto that array.
.Ip "\fB\-value\fR \fI\s-1VALUE\s0\fR" 4
Use \fI\s-1VALUE\s0\fR as a literal value to store in \fI\s-1FIELD\s0\fR, otherwise
ignoring this element and it's children.  Only valid with \fB\-field\fR or
\fB\-push-field\fR.  `\f(CW%{\fIATTRIBUTE\fR}\fR\*(R' notation can be used to
substitute the value of an attribute into the literal value.
.Ip "\fB\-as-string\fR" 4
Convert the contents of this element to a string (as in
\f(CWXML::Grove::AsString\fR) and store in \fI\s-1FIELD\s0\fR.  Only valid with
\fB\-field\fR or \fB\-push-field\fR.
.Ip "\fB\-grove\fR" 4
Copy this element to \fI\s-1FIELD\s0\fR without further processing.  The element
can then be processed later as the Perl objects are manipulated.  Only
valid with \fB\-field\fR or \fB\-push-field\fR.  If ToObjects is used with
PerlSAX, this will use \s-1XML::\s0Grove::Builder to build the grove element.
.Ip "\fB\-grove-contents\fR" 4
Used with \fB\-make\fR, \fB\-grove-contents\fR creates an object but then
takes all of the content of that element and stores it in Contents.
.PP
If an action item is a string, that string is treated as a fragment of
Perl code.  The following simple substitutions are performed on the
fragment to provide easy access to the information being converted:
.Ip "\fB@\s-1ELEM\s0@\fR" 4
The object that caused this action to be called.  If ToObjects is used
with PerlSAX this will be a hash with the element name and attributes,
with \s-1XML::\s0Grove this will be the element object, with Data::Grove it
will be the matching object, and with \s-1XML::DOM\s0 it will be an
\s-1XML::DOM::\s0Element.
.SH "EXAMPLE"
The example pattern-action list below will convert the following XML
representing a Database schema:
.PP
.Vb 16
\&    <schema>
\&      <table>
\&        <name>MyTable</name>
\&        <summary>A short summary</summary>
\&        <description>A long description that may
\&          contain a subset of HTML</description>
\&        <column>
\&          <name>MyColumn1</name>
\&          <summary>A short summary</summary>
\&          <description>A long description</description>
\&          <unique/>
\&          <non-null/>
\&          <default>42</default>
\&        </column>
\&      </table>
\&    </schema>
.Ve
into Perl objects looking like:
.PP
.Vb 15
\&    [
\&      { Name => "MyTable",
\&        Summary => "A short summary",
\&        Description => $grove_object,
\&        Columns => [
\&          { Name => "MyColumn1",
\&            Summary => "A short summary",
\&            Description => $grove_object,
\&            Unique => 1,
\&            NonNull => 1,
\&            Default => 42
\&          }
\&        ]
\&      }
\&    ]
.Ve
Here is a Perl script and pattern-action list that will perform the
conversion using the simple name matching pattern module
XML::PatAct::MatchName.  The script accepts a Schema XML file as an
argument (\f(CW$ARGV[0]\fR) to the script.  This script creates a grove as
one of it's objects, so it requires the XML::Grove module.
.PP
.Vb 3
\&    use XML::Parser::PerlSAX;
\&    use XML::PatAct::MatchName;
\&    use XML::PatAct::ToObjects;
.Ve
.Vb 11
\&    my $patterns = [
\&      'schema'      => [ qw{ -holder                                  } ],
\&      'table'       => [ qw{ -make Schema::Table                      } ],
\&      'name'        => [ qw{ -field Name -as-string                   } ],
\&      'summary'     => [ qw{ -field Summary -as-string                } ],
\&      'description' => [ qw{ -field Description -grove                } ],
\&      'column'      => [ qw{ -make Schema::Column -push-field Columns } ],
\&      'unique'      => [ qw{ -field Unique -value 1                   } ],
\&      'non-null'    => [ qw{ -field NonNull -value 1                  } ],
\&      'default'     => [ qw{ -field Default -as-string                } ],
\&    ];
.Ve
.Vb 3
\&    my $matcher = XML::PatAct::MatchName->new( Patterns => $patterns );
\&    my $handler = XML::PatAct::ToObjects->new( Patterns => $patterns,
\&                                               Matcher => $matcher);
.Ve
.Vb 2
\&    my $parser = XML::Parser::PerlSAX->new( Handler => $handler );
\&    my $schema = $parser->parse(Source => { SystemId => $ARGV[0] } );
.Ve
.SH "TODO"
.Ip "\(bu" 4
It'd be nice if patterns could be applied even in \fB\-as-string\fR and
\fB\-grove\fR.
.Ip "\(bu" 4
Implement Perl code actions.
.Ip "\(bu" 4
\fB\-as-xml\fR to write \s-1XML\s0 into the field.
.SH "AUTHOR"
Ken MacLeod, ken@bitsko.slc.ut.us
.SH "SEE ALSO"
\fIperl\fR\|(1), \fIData::Grove\fR\|(3)
.PP
``Using PatAct Modules'\*(R' and ``Creating PatAct Modules'\*(R' in libxml-perl.

.rn }` ''
.IX Title "lib::XML::PatAct::ToObjects 3"
.IX Name "XML::PatAct::ToObjects - An action module for creating Perl objects"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "Patterns"

.IX Item "Matcher"

.IX Item "CopyId"

.IX Item "CopyAttributes"

.IX Item "\fB\-holder\fR"

.IX Item "\fB\-ignore\fR"

.IX Item "\fB\-pcdata\fR"

.IX Item "\fB\-make\fR \fI\s-1PACKAGE\s0\fR"

.IX Item "\fB\-args\fR \fI\s-1ARGUMENTS\s0\fR"

.IX Item "\fB\-field\fR \fI\s-1FIELD\s0\fR"

.IX Item "\fB\-push-field\fR \fI\s-1FIELD\s0\fR"

.IX Item "\fB\-value\fR \fI\s-1VALUE\s0\fR"

.IX Item "\fB\-as-string\fR"

.IX Item "\fB\-grove\fR"

.IX Item "\fB\-grove-contents\fR"

.IX Item "\fB@\s-1ELEM\s0@\fR"

.IX Header "EXAMPLE"

.IX Header "TODO"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Header "AUTHOR"

.IX Header "SEE ALSO"

