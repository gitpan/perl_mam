.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH FreezeThaw 3 "perl 5.005, patch 53" "14/Oct/96" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
FreezeThaw \- converting Perl structures to strings and back.
.SH "SYNOPSIS"
.PP
.Vb 5
\&  use FreezeThaw qw(freeze thaw cmpStr safeFreeze cmpStrHard);
\&  $string = freeze $data1, $data2, $data3;
\&  ...
\&  ($olddata1, $olddata2, $olddata3) = thaw $string;
\&  if (cmpStr($olddata2,$data2) == 0) {print "OK!"}
.Ve
.SH "DESCRIPTION"
Converts data to/from stringified form, appropriate for
saving-to/reading-from permanent storage.
.PP
Deals with objects, circular lists, repeated appearence of the same
refence. Does not deal with overloaded \fIstringify\fR operator yet.
.SH "EXPORT"
.Ip "Default" 12
None.
.Ip "Exportable" 12
\f(CWfreeze thaw cmpStr cmpStrHard safeFreeze\fR.
.SH "User API"
.Ip "\f(CWcmpStr\fR" 12
analogue of \f(CWcmp\fR for data. Takes two arguments and compares them as
separate entities.
.Ip "\f(CWcmpStrHard\fR" 12
analogue of \f(CWcmp\fR for data. Takes two arguments and compares them
considered as a group.
.Ip "\f(CWfreeze\fR" 12
returns a string that encupsulates its arguments (considered as a
group). \f(CWthaw\fRing this string leads to a fatal error if arguments to
\f(CWfreeze\fR contained references to \f(CWGLOB\fRs and \f(CWCODE\fRs.
.Ip "\f(CWsafeFreeze\fR" 12
returns a string that encupsulates its arguments (considered as a
group). The result is \f(CWthaw\fRable in the same process. \f(CWthaw\fRing the
result in a different process should result in a fatal error if
arguments to \f(CWsafeFreeze\fR contained references to \f(CWGLOB\fRs and
\f(CWCODE\fRs.
.Ip "\f(CWthaw\fR" 12
takes one string argument and returns an array. The elements of the
array are \*(L"equivalent\*(R" to arguments of the \f(CWfreeze\fR command that
created the string. Can result in a fatal error (see above).
.SH "Developer API"
\f(CWFreezeThaw\fR \f(CWfreeze\fRs and \f(CWthaw\fRs data blessed in some package by
calling methods \f(CWFreeze\fR and \f(CWThaw\fR in the package. The fallback
methods are provided by the \f(CWFreezeThaw\fR itself. The fallback
\f(CWFreeze\fR freezes the \*(L"content\*(R" of blessed object (from Perl point of
view). The fallback \f(CWThaw\fR blesses the \f(CWthaw\fRed data back into the package.
.PP
So the package needs to define its own methods only if the fallback
methods will fail (for example, for a lot of data the \*(L"content\*(R" of an
object is an address of some \fBC\fR data). The methods are called like
.PP
.Vb 2
\&  $newcooky = $obj->Freeze($cooky);
\&  $obj = Package->Thaw($content,$cooky);
.Ve
To save and restore the data the following method are applicable:
.PP
.Vb 1
\&  $cooky->FreezeScalar($data,$ignorePackage,$noduplicate);
.Ve
during \fIFreeze()\fRing, and
.PP
.Vb 1
\&  $data = $cooky->ThawScalar;
.Ve
Two optional arguments \f(CW$ignorePackage\fR and \f(CW$noduplicate\fR regulate
whether the freezing should not call the methods even if \f(CW$data\fR is a
reference to a blessed object, and whether the data should not be
marked as seen already even if it was seen before. The default methods
.PP
.Vb 4
\&  sub UNIVERSAL::Freeze {
\&    my ($obj, $cooky) = (shift, shift);
\&    $cooky->FreezeScalar($obj,1,1);
\&  }
.Ve
.Vb 5
\&  sub UNIVERSAL::Thaw {
\&    my ($package, $cooky) = (shift, shift);
\&    my $obj = $cooky->ThawScalar;
\&    bless $obj, $package;
\&  }
.Ve
call the \f(CWFreezeScalar\fR method of the \f(CW$cooky\fR since the freezing
engine will see the data the second time during this call. Indeed, it
is the freezing engine who calls \fIUNIVERSAL::Freeze()\fR, and it calls it
because it needs to freeze \f(CW$obj\fR. The above call to
\f(CW$cooky\fR\->\fIFreezeScalar()\fR handles the same data back to engine, but
because flags are different, the code does not cycle.
.PP
Freezing and thawing \f(CW$cooky\fR also allows the following additional methods:
.PP
.Vb 1
\&  $cooky->isSafe;
.Ve
to find out whether the current freeze was initiated by \f(CWfreeze\fR or
\f(CWsafeFreeze\fR command. Analogous method for thaw \f(CW$cooky\fR returns
whether the current thaw operation is considered safe (i.e., either
does not contain cached elsewhere data, or comes from the same
application). You can use 
.PP
.Vb 1
\&  $cooky->makeSafe;
.Ve
to prohibit cached data for the duration of the rest of freezing or
thawing of current object.
.PP
Two methods 
.PP
.Vb 2
\&  $value = $cooky->repeatedOK;
\&  $cooky->noRepeated;           # Now repeated are prohibited
.Ve
allow to find out/change the current setting for allowing repeated
references.
.PP
If you want to flush the cache of saved objects you can use
.PP
.Vb 1
\&  FreezeThaw->flushCache;
.Ve
this can invalidate some frozen string, so that thawing them will
result in fatal error.
.Sh "Instantiating"
Sometimes, when an object from a package is recreated in presense of
repeated references, it is not safe to recreate the internal structure
of an object in one step. In such a situation recreation of an object
is carried out in two steps: in the first the object is \f(CWallocate\fRd,
in the second it is \f(CWinstantiate\fRd.
.PP
The restriction is that during the \fIallocation\fR step you cannot use any
reference to any Perl object that can be referenced from any other
place. This restriction is applied since that object may not exist yet. 
.PP
Correspondingly, during \fIinstantiation\fR step the previosly \fIallocated\fR
object should be \f(CWfilled\fR, i.e., it can be changed in any way such
that the references to this object remain valid.
.PP
The methods are called like this:
.PP
.Vb 4
\&  $pre_object_ref = Package->Allocate($pre_pre_object_ref);
\&        # Returns reference
\&  Package->Instantiate($pre_object_ref,$cooky);
\&        # Converts into reference to blessed object
.Ve
The reverse operations are 
.PP
.Vb 2
\&  $object_ref->FreezeEmpty($cooky);
\&  $object_ref->FreezeInstance($cooky);
.Ve
during these calls object can \f(CWfreezeScalar\fR some information (in a
usual way) that will be used during \f(CWAllocate\fR and \f(CWInstantiate\fR
calls (via \f(CWthawScalar\fR). Note that the return value of
\f(CWFreezeEmpty\fR is cached during the phase of creation of uninialized
objects. This \fBmust\fR be used like this: the return value is the
reference to the created object, so it is not destructed until other
objects are created, thus the frozen values of the different objects
will not share the same references. Example of bad result:
.PP
.Vb 1
\&  $o1->FreezeEmpty($cooky)
.Ve
freezes \f(CW{}\fR, and \f(CW$o2->FreezeEmpty($cooky)\fR makes the same. Now
nobody guaranties that that these two copies of \f(CW{}\fR are different,
unless a reference to the first one is preserved during the call to
\f(CW$o2->FreezeEmpty($cooky)\fR. If \f(CW$o1->FreezeEmpty($cooky)\fR
returns the value of \f(CW{}\fR it uses, it will be preserved by the
engine.
.PP
The helper function \f(CWFreezeThaw::copyContents\fR is provided for
simplification of instantiation. The syntax is 
.PP
.Vb 1
\&  FreezeThaw::copyContents $to, $from;
.Ve
The function copies contents the object \f(CW$from\fR point to into what the
object \f(CW$to\fR points to (including package for blessed references). Both
arguments should be references.
.PP
The default methods are provided. They do the following:
.Ip "\f(CWFreezeEmpty\fR" 12
Freezes an \fIempty\fR object of underlying type.
.Ip "\f(CWFreezeInstance\fR" 12
Calls \f(CWFreeze\fR.
.Ip "\f(CWAllocate\fR" 12
Thaws what was frozen by \f(CWFreezeEmpty\fR.
.Ip "\f(CWInstantiate\fR" 12
Thaws what was frozen by \f(CWFreezeInstance\fR, uses \f(CWcopyContents\fR to
transfer this to the \f(CW$pre_object\fR.
.SH "BUGS/FEATURES"
A lot of objects are blessed in some obscure packages by XSUB
typemaps. It is not clear how to (automatically) prevent the
\f(CWUNIVERSAL\fR methods to be called for objects in these packages.

.rn }` ''
.IX Title "FreezeThaw 3"
.IX Name "FreezeThaw - converting Perl structures to strings and back."

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "EXPORT"

.IX Item "Default"

.IX Item "Exportable"

.IX Header "User API"

.IX Item "\f(CWcmpStr\fR"

.IX Item "\f(CWcmpStrHard\fR"

.IX Item "\f(CWfreeze\fR"

.IX Item "\f(CWsafeFreeze\fR"

.IX Item "\f(CWthaw\fR"

.IX Header "Developer API"

.IX Subsection "Instantiating"

.IX Item "\f(CWFreezeEmpty\fR"

.IX Item "\f(CWFreezeInstance\fR"

.IX Item "\f(CWAllocate\fR"

.IX Item "\f(CWInstantiate\fR"

.IX Header "BUGS/FEATURES"

