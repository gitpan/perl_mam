.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::MIME::Lite 3 "perl 5.007, patch 00" "20/Aug/101" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
MIME::Lite \- low-calorie MIME generator
.SH "SYNOPSIS"
.PP
.Vb 3
\&    use MIME::Lite;
\&   
\&Create a single-part message:
.Ve
.Vb 10
\&    ### Create a new single-part message, to send a GIF file:
\&    $msg = MIME::Lite->new(
\&                 From     =>'me@myhost.com',
\&                 To       =>'you@yourhost.com',
\&                 Cc       =>'some@other.com, some@more.com',
\&                 Subject  =>'Helloooooo, nurse!',
\&                 Type     =>'image/gif',
\&                 Encoding =>'base64',
\&                 Path     =>'hellonurse.gif'
\&                 );
.Ve
Create a multipart message (i.e., one with attachments):
.PP
.Vb 18
\&    ### Create a new multipart message:
\&    $msg = MIME::Lite->new( 
\&                 From    =>'me@myhost.com',
\&                 To      =>'you@yourhost.com',
\&                 Cc      =>'some@other.com, some@more.com',
\&                 Subject =>'A message with 2 parts...',
\&                 Type    =>'multipart/mixed'
\&                 );
\&    
\&    ### Add parts (each "attach" has same arguments as "new"):
\&    $msg->attach(Type     =>'TEXT',   
\&                 Data     =>"Here's the GIF file you wanted"
\&                 );  
\&    $msg->attach(Type     =>'image/gif',
\&                 Path     =>'aaa000123.gif',
\&                 Filename =>'logo.gif',
\&                 Disposition => 'attachment'
\&                 );
.Ve
Output a message:
.PP
.Vb 5
\&    ### Format as a string:
\&    $str = $msg->as_string;
\&    
\&    ### Print to a filehandle (say, a "sendmail" stream):
\&    $msg->print(\e*SENDMAIL);
.Ve
Send a message:
.PP
.Vb 3
\&    ### Send in the "best" way (the default is to use "sendmail"):
\&    $msg->send;
\&      
.Ve
.SH "DESCRIPTION"
In the never-ending quest for great taste with fewer calories,
we proudly present: \fIMIME::Lite\fR.  
.PP
MIME::Lite is intended as a simple, standalone module for generating
(not parsing!) MIME messages... specifically, it allows you to
output a simple, decent single- or multi-part message with text or binary
attachments.  It does not require that you have the Mail:: or MIME::
modules installed.
.PP
You can specify each message part as either the literal data itself (in
a scalar or array), or as a string which can be given to \fIopen()\fR to get
a readable filehandle (e.g., \*(L"<filename\*(R" or \*(L"somecommand|").
.PP
You don't need to worry about encoding your message data:
this module will do that for you.  It handles the 5 standard MIME encodings.
.PP
If you need more sophisticated behavior, please get the MIME\-tools 
package instead.  I will be more likely to add stuff to that toolkit
over this one.
.SH "EXAMPLES"
.Sh "Create a simple message containing just text"
.PP
.Vb 7
\&    $msg = MIME::Lite->new(
\&                 From     =>'me@myhost.com',
\&                 To       =>'you@yourhost.com',
\&                 Cc       =>'some@other.com, some@more.com',
\&                 Subject  =>'Helloooooo, nurse!',
\&                 Data     =>"How's it goin', eh?"
\&                 );
.Ve
.Sh "Create a simple message containing just an image"
.PP
.Vb 9
\&    $msg = MIME::Lite->new(
\&                 From     =>'me@myhost.com',
\&                 To       =>'you@yourhost.com',
\&                 Cc       =>'some@other.com, some@more.com',
\&                 Subject  =>'Helloooooo, nurse!',
\&                 Type     =>'image/gif',
\&                 Encoding =>'base64',
\&                 Path     =>'hellonurse.gif'
\&                 );
.Ve
.Sh "Create a multipart message"
.PP
.Vb 21
\&    ### Create the multipart "container":
\&    $msg = MIME::Lite->new( 
\&                 From    =>'me@myhost.com',
\&                 To      =>'you@yourhost.com',
\&                 Cc      =>'some@other.com, some@more.com',
\&                 Subject =>'A message with 2 parts...',
\&                 Type    =>'multipart/mixed'
\&                 );
\&    
\&    ### Add the text message part:
\&    ### (Note that "attach" has same arguments as "new"):
\&    $msg->attach(Type     =>'TEXT',   
\&                 Data     =>"Here's the GIF file you wanted"
\&                 );  
\&     
\&    ### Add the image part:
\&    $msg->attach(Type     =>'image/gif',
\&                 Path     =>'aaa000123.gif',
\&                 Filename =>'logo.gif',
\&                 Disposition => 'attachment'
\&                 );
.Ve
.Sh "Attach a \s-1GIF\s0 to a text message"
This will create a multipart message exactly as above, but using the 
\*(L"attach to singlepart\*(R" hack:
.PP
.Vb 15
\&    ### Start with a simple text message:
\&    $msg = MIME::Lite->new(
\&                 From    =>'me@myhost.com',
\&                 To      =>'you@yourhost.com',
\&                 Cc      =>'some@other.com, some@more.com',
\&                 Subject =>'A message with 2 parts...',
\&                 Type    =>'TEXT',
\&                 Data    =>"Here's the GIF file you wanted"
\&                 );  
\&    
\&    ### Attach a part... the make the message a multipart automatically:
\&    $msg->attach(Type     =>'image/gif',
\&                 Path     =>'aaa000123.gif',
\&                 Filename =>'logo.gif'
\&                 );
.Ve
.Sh "Attach a pre-prepared part to a message"
.PP
.Vb 10
\&    ### Create a standalone part:
\&    $part = MIME::Lite->new(
\&                 Type     =>'text/html',
\&                 Data     =>'<H1>Hello</H1>',
\&                 );
\&    $part->attr('content-type.charset' => 'UTF8');
\&    $part->add('X-Comment' => 'A message for you');
\&     
\&    ### Attach it to any message:
\&    $msg->attach($part);
.Ve
.Sh "Print a message to a filehandle"
.PP
.Vb 8
\&    ### Write it to a filehandle:
\&    $msg->print(\e*STDOUT); 
\&     
\&    ### Write just the header:
\&    $msg->print_header(\e*STDOUT); 
\&     
\&    ### Write just the encoded body:
\&    $msg->print_body(\e*STDOUT); 
.Ve
.Sh "Print a message into a string"
.PP
.Vb 8
\&    ### Get entire message as a string:
\&    $str = $msg->as_string;
\&     
\&    ### Get just the header:
\&    $str = $msg->header_as_string;
\&     
\&    ### Get just the encoded body:
\&    $str = $msg->body_as_string;
.Ve
.Sh "Send a message"
.PP
.Vb 2
\&    ### Send in the "best" way (the default is to use "sendmail"):
\&    $msg->send;
.Ve
.Sh "Send an \s-1HTML\s0 document... with images included!"
.PP
.Vb 16
\&    $msg = MIME::Lite->new(
\&                 To      =>'you@yourhost.com',
\&                 Subject =>'HTML with in-line images!',
\&                 Type    =>'multipart/related'
\&                 );
\&    $msg->attach(Type => 'text/html',
\&                 Data => qq{ <body>
\&                             Here's <i>my</i> image: 
\&                             <img src="cid:myimage.gif"> 
\&                             </body> }
\&                 );
\&    $msg->attach(Type => 'image/gif',
\&                 Id   => 'myimage.gif',
\&                 Path => '/path/to/somefile.gif',
\&                 );
\&    $msg->send();
.Ve
.Sh "Change how messages are sent"
.PP
.Vb 7
\&    ### Do something like this in your 'main':
\&    if ($I_DONT_HAVE_SENDMAIL) {
\&       MIME::Lite->send('smtp', "smtp.myisp.net", Timeout=>60);
\&    }
\&     
\&    ### Now this will do the right thing:
\&    $msg->send;         ### will now use Net::SMTP as shown above
.Ve
.SH "PUBLIC INTERFACE"
.Sh "Global configuration"
To alter the way the entire module behaves, you have the following
methods/options:
.Ip "\s-1MIME::\s0Lite->field_order()" 4
When used as a classmethod, this changes the default 
order in which headers are output for \fIall\fR messages.
However, please consider using the instance method variant instead,
so you won't stomp on other message senders in the same application.
.Ip "\s-1MIME::\s0Lite->quiet()" 4
This classmethod can be used to suppress/unsuppress 
all warnings coming from this module.
.Ip "\s-1MIME::\s0Lite->send()" 4
When used as a classmethod, this can be used to specify 
a different default mechanism for sending message.  
The initial default is:
.Sp
.Vb 1
\&    MIME::Lite->send("sendmail", "/usr/lib/sendmail -t -oi -oem");
.Ve
However, you should consider the similar but smarter and taint-safe variant:
.Sp
.Vb 1
\&    MIME::Lite->send("sendmail");
.Ve
Or, for non-Unix users:
.Sp
.Vb 1
\&    MIME::Lite->send("smtp");
.Ve
.Ip "$\s-1MIME::\s0Lite::\s-1AUTO_CC\s0" 4
If true, automatically send to the Cc/Bcc addresses for \fIsend_by_smtp()\fR.
Default is \fBtrue\fR.
.Ip "$\s-1MIME::\s0Lite::\s-1AUTO_CONTENT_TYPE\s0" 4
If true, try to automatically choose the content type from the file name
in \f(CWnew()\fR/\f(CWbuild()\fR.  In other words, setting this true changes the
default \f(CWType\fR from \f(CW"TEXT"\fR to \f(CW"AUTO"\fR.
.Sp
Default is \fBfalse\fR, since we must maintain backwards-compatibility 
with prior behavior.  \fBPlease\fR consider keeping it false,
and just using Type \*(L'\s-1AUTO\s0\*(R' when you \fIbuild()\fR or \fIattach()\fR.
.Ip "$\s-1MIME::\s0Lite::\s-1AUTO_ENCODE\s0" 4
If true, automatically choose the encoding from the content type.
Default is \fBtrue\fR.
.Ip "$\s-1MIME::\s0Lite::\s-1AUTO_VERIFY\s0" 4
If true, check paths to attachments right before printing, raising an exception
if any path is unreadable.
Default is \fBtrue\fR.
.Ip "$\s-1MIME::\s0Lite::\s-1PARANOID\s0" 4
If true, we won't attempt to use \s-1MIME::\s0Base64, \s-1MIME::\s0QuotedPrint,
or \s-1MIME::\s0Types, even if they're available.
Default is \fBfalse\fR.  Please consider keeping it false,
and trusting these other packages to do the right thing.
.Sh "Construction"
.Ip "new [\s-1PARAMHASH\s0]" 4
\fIClass method, constructor.\fR
Create a new message object.  
.Sp
If any arguments are given, they are passed into \f(CWbuild()\fR; otherwise,
just the empty object is created.
.Ip "attach \s-1PART\s0" 4
.Ip "attach \s-1PARAMHASH\s0..." 4
\fIInstance method.\fR
Add a new part to this message, and return the new part.
.Sp
If you supply a single \s-1PART\s0 argument, it will be regarded
as a \s-1MIME::\s0Lite object to be attached.  Otherwise, this
method assumes that you are giving in the pairs of a \s-1PARAMHASH\s0
which will be sent into \f(CWnew()\fR to create the new part.
.Sp
One of the possibly-quite-useful hacks thrown into this is the 
\*(L"attach-to-singlepart\*(R" hack: if you attempt to attach a part (let's
call it \*(L"part 1") to a message that doesn't have a content-type
of \*(L"multipart\*(R" or \*(L"message\*(R", the following happens:
.Ip "\(bu" 8
A new part (call it \*(L"part 0") is made.
.Ip "\(bu" 8
The \s-1MIME\s0 attributes and data (but \fInot\fR the other headers)
are cut from the \*(L"self\*(R" message, and pasted into \*(L"part 0\*(R".
.Ip "\(bu" 8
The \*(L"self\*(R" is turned into a \*(L"multipart/mixed\*(R" message.
.Ip "\(bu" 8
The new \*(L"part 0\*(R" is added to the \*(L"self\*(R", and \fIthen\fR \*(L"part 1\*(R" is added.
.Sp
One of the nice side-effects is that you can create a text message
and then add zero or more attachments to it, much in the same way
that a user agent like Netscape allows you to do.
.Ip "build [\s-1PARAMHASH\s0]" 4
\fIClass/instance method, initializer.\fR
Create (or initialize) a \s-1MIME\s0 message object.  
Normally, you'll use the following keys in \s-1PARAMHASH\s0:
.Sp
.Vb 3
\&   * Data, FH, or Path      (either one of these, or none if multipart)
\&   * Type                   (e.g., "image/jpeg")
\&   * From, To, and Subject  (if this is the "top level" of a message)
.Ve
The \s-1PARAMHASH\s0 can contain the following keys:
.Ip "(fieldname)" 8
Any field you want placed in the message header, taken from the
standard list of header fields (you don't need to worry about case):
.Sp
.Vb 6
\&    Approved      Encrypted     Received      Sender         
\&    Bcc           From          References    Subject 
\&    Cc            Keywords      Reply-To      To 
\&    Comments      Message-ID    Resent-*      X-*
\&    Content-*     MIME-Version  Return-Path   
\&    Date                        Organization
.Ve
To give experienced users some veto power, these fields will be set 
\fIafter\fR the ones I set... so be careful: \fIdon't set any \s-1MIME\s0 fields\fR
(like \f(CWContent-type\fR) unless you know what you're doing!
.Sp
To specify a fieldname that's \fInot\fR in the above list, even one that's
identical to an option below, just give it with a trailing \f(CW":"\fR,
like \f(CW"My-field:"\fR.  When in doubt, that \fIalways\fR signals a mail 
field (and it sort of looks like one too).
.Ip "Data" 8
\fIAlternative to \*(L"Path\*(R" or \*(L"\s-1FH\s0\*(R".\fR
The actual message data.  This may be a scalar or a ref to an array of
strings; if the latter, the message consists of a simple concatenation 
of all the strings in the array.
.Ip "Datestamp" 8
\fIOptional.\fR
If given true (or omitted), we force the creation of a \f(CWDate:\fR field 
stamped with the current date/time if this is a top-level message.  
You may want this if using send_by_smtp().  
If you don't want this to be done, either provide your own Date
or explicitly set this to false.
.Ip "Disposition" 8
\fIOptional.\fR
The content disposition, \f(CW"inline"\fR or \f(CW"attachment"\fR.
The default is \f(CW"inline"\fR.
.Ip "Encoding" 8
\fIOptional.\fR
The content transfer encoding that should be used to encode your data:
.Sp
.Vb 6
\&   Use encoding:     | If your message contains:
\&   ------------------------------------------------------------
\&   7bit              | Only 7-bit text, all lines <1000 characters
\&   8bit              | 8-bit text, all lines <1000 characters
\&   quoted-printable  | 8-bit text or long lines (more reliable than "8bit")
\&   base64            | Largely non-textual data: a GIF, a tar file, etc.
.Ve
The default is taken from the Type; generally it is \*(L"binary\*(R" (no
encoding) for text/*, message/*, and multipart/*, and \*(L"base64\*(R" for
everything else.  A value of \f(CW"binary"\fR is generally \fInot\fR suitable
for sending anything but \s-1ASCII\s0 text files with lines under 1000
characters, so consider using one of the other values instead.
.Sp
In the case of \*(L"7bit"/"8bit\*(R", long lines are automatically chopped to
legal length; in the case of \*(L"7bit\*(R", all 8-bit characters are
automatically \fIremoved\fR.  This may not be what you want, so pick your
encoding well!  For more info, see the section on \fIA \s-1MIME\s0 \s-1PRIMER\s0\fR.
.Ip "\s-1FH\s0" 8
\fIAlternative to \*(L"Data\*(R" or \*(L"Path\*(R".\fR
Filehandle containing the data, opened for reading.
See \*(L"ReadNow\*(R" also.
.Ip "Filename" 8
\fIOptional.\fR
The name of the attachment.  You can use this to supply a 
recommended filename for the end-user who is saving the attachment 
to disk.  You only need this if the filename at the end of the 
\*(L"Path\*(R" is inadequate, or if you're using \*(L"Data\*(R" instead of \*(L"Path\*(R".
You should \fInot\fR put path information in here (e.g., no \*(L"/\*(R" 
or \*(L"\e\*(R" or \*(L":\*(R" characters should be used).
.Ip "Id" 8
\fIOptional.\fR
Same as setting \*(L"content-id\*(R".
.Ip "Length" 8
\fIOptional.\fR
Set the content length explicitly.  Normally, this header is automatically
computed, but only under certain circumstances (see the section on \fILimitations\fR).
.Ip "Path" 8
\fIAlternative to \*(L"Data\*(R" or \*(L"\s-1FH\s0\*(R".\fR
Path to a file containing the data... actually, it can be any \fIopen()\fRable
expression.  If it looks like a path, the last element will automatically 
be treated as the filename. 
See \*(L"ReadNow\*(R" also.
.Ip "ReadNow" 8
\fIOptional, for use with \*(L"Path\*(R".\fR
If true, will open the path and slurp the contents into core now.
This is useful if the Path points to a command and you don't want 
to run the command over and over if outputting the message several
times.  \fBFatal exception\fR raised if the open fails.
.Ip "Top" 8
\fIOptional.\fR
If defined, indicates whether or not this is a \*(L"top-level\*(R" \s-1MIME\s0 message.
The parts of a multipart message are \fInot\fR top-level.
Default is true.
.Ip "Type" 8
\fIOptional.\fR
The \s-1MIME\s0 content type, or one of these special values (case-sensitive):
.Sp
.Vb 6
\&     "TEXT"   means "text/plain"
\&     "BINARY" means "application/octet-stream"
\&     "AUTO"   means attempt to guess from the filename, falling back
\&              to 'application/octet-stream'.  This is good if you have
\&              MIME::Types on your system and you have no idea what
\&              file might be used for the attachment.
.Ve
The default is \f(CW"TEXT"\fR, but it will be \f(CW"AUTO"\fR if you set
\f(CW$AUTO_CONTENT_TYPE\fR to true (sorry, but you have to enable 
it explicitly, since we don't want to break code which depends 
on the old behavior).
.Sp
A picture being worth 1000 words (which
is of course 2000 bytes, so it's probably more of an \*(L"icon\*(R" than a \*(L"picture\*(R",
but I digress...), here are some examples:
.Sp
.Vb 23
\&    $msg = MIME::Lite->build( 
\&               From     => 'yelling@inter.com',
\&               To       => 'stocking@fish.net',
\&               Subject  => "Hi there!",
\&               Type     => 'TEXT',
\&               Encoding => '7bit',
\&               Data     => "Just a quick note to say hi!");
\& 
\&    $msg = MIME::Lite->build(
\&               From     => 'dorothy@emerald-city.oz',
\&               To       => 'gesundheit@edu.edu.edu',
\&               Subject  => "A gif for U"
\&               Type     => 'image/gif',
\&               Path     => "/home/httpd/logo.gif");
\& 
\&    $msg = MIME::Lite->build( 
\&               From     => 'laughing@all.of.us',
\&               To       => 'scarlett@fiddle.dee.de',
\&               Subject  => "A gzipp'ed tar file",
\&               Type     => 'x-gzip',
\&               Path     => "gzip < /usr/inc/somefile.tar |",
\&               ReadNow  => 1,
\&               Filename => "somefile.tgz");
.Ve
To show you what's really going on, that last example could also 
have been written:
.Sp
.Vb 8
\&    $msg = new MIME::Lite;
\&    $msg->build(Type     => 'x-gzip',
\&                Path     => "gzip < /usr/inc/somefile.tar |",
\&                ReadNow  => 1,
\&                Filename => "somefile.tgz");    
\&    $msg->add(From    => "laughing@all.of.us");
\&    $msg->add(To      => "scarlett@fiddle.dee.de");
\&    $msg->add(Subject => "A gzipp'ed tar file");  
.Ve
.Sh "Setting/getting headers and attributes"
.Ip "add \s-1TAG\s0,\s-1VALUE\s0" 4
\fIInstance method.\fR
Add field \s-1TAG\s0 with the given \s-1VALUE\s0 to the end of the header. 
The \s-1TAG\s0 will be converted to all-lowercase, and the \s-1VALUE\s0 
will be made \*(L"safe\*(R" (returns will be given a trailing space).
.Sp
\fBBeware:\fR any \s-1MIME\s0 fields you \*(L"add\*(R" will override any \s-1MIME\s0
attributes I have when it comes time to output those fields.
Normally, you will use this method to add \fInon-\s-1MIME\s0\fR fields:
.Sp
.Vb 1
\&    $msg->add("Subject" => "Hi there!");
.Ve
Giving \s-1VALUE\s0 as an arrayref will cause all those values to be added.
This is only useful for special multiple-valued fields like \*(L"Received":
.Sp
.Vb 1
\&    $msg->add("Received" => ["here", "there", "everywhere"]
.Ve
Giving \s-1VALUE\s0 as the empty string adds an invisible placeholder
to the header, which can be used to suppress the output of 
the \*(L"Content-*\*(R" fields or the special  \*(L"\s-1MIME\s0\-Version\*(R" field.
When suppressing fields, you should use \fIreplace()\fR instead of \fIadd()\fR:
.Sp
.Vb 1
\&    $msg->replace("Content-disposition" => "");
.Ve
\fINote:\fR \fIadd()\fR is probably going to be more efficient than \f(CWreplace()\fR,
so you're better off using it for most applications if you are 
certain that you don't need to \fIdelete()\fR the field first.
.Sp
\fINote:\fR the name comes from Mail::Header.
.Ip "attr \s-1ATTR\s0,[\s-1VALUE\s0]" 4
\fIInstance method.\fR
Set \s-1MIME\s0 attribute \s-1ATTR\s0 to the string \s-1VALUE\s0.  
\s-1ATTR\s0 is converted to all-lowercase.
This method is normally used to set/get \s-1MIME\s0 attributes:
.Sp
.Vb 3
\&    $msg->attr("content-type"         => "text/html");
\&    $msg->attr("content-type.charset" => "US-ASCII");
\&    $msg->attr("content-type.name"    => "homepage.html");
.Ve
This would cause the final output to look something like this:
.Sp
.Vb 1
\&    Content-type: text/html; charset=US-ASCII; name="homepage.html"
.Ve
Note that the special empty sub-field tag indicates the anonymous 
first sub-field.
.Sp
Giving \s-1VALUE\s0 as undefined will cause the contents of the named
subfield to be deleted.
.Sp
Supplying no \s-1VALUE\s0 argument just returns the attribute's value:
.Sp
.Vb 2
\&    $type = $msg->attr("content-type");        ### returns "text/html"
\&    $name = $msg->attr("content-type.name");   ### returns "homepage.html"
.Ve
.Ip "delete \s-1TAG\s0" 4
\fIInstance method.\fR
Delete field \s-1TAG\s0 with the given \s-1VALUE\s0 to the end of the header.  
The \s-1TAG\s0 will be converted to all-lowercase.
.Sp
.Vb 1
\&    $msg->delete("Subject");
.Ve
\fINote:\fR the name comes from Mail::Header.
.Ip "field_order \s-1FIELD\s0,...\s-1FIELD\s0" 4
\fIClass/instance method.\fR  
Change the order in which header fields are output for this object:
.Sp
.Vb 1
\&    $msg->field_order('from', 'to', 'content-type', 'subject');
.Ve
When used as a class method, changes the default settings for
all objects:
.Sp
.Vb 1
\&    MIME::Lite->field_order('from', 'to', 'content-type', 'subject');
.Ve
Case does not matter: all field names will be coerced to lowercase.
In either case, supply the empty array to restore the default ordering.
.Ip "fields" 4
\fIInstance method.\fR
Return the full header for the object, as a ref to an array
of \f(CW[TAG, VALUE]\fR pairs, where each \s-1TAG\s0 is all-lowercase.  
Note that any fields the user has explicitly set will override the 
corresponding \s-1MIME\s0 fields that we would otherwise generate.  
So, don't say...
.Sp
.Vb 1
\&    $msg->set("Content-type" => "text/html; charset=US-ASCII");
.Ve
unless you want the above value to override the \*(L"Content-type\*(R"
\s-1MIME\s0 field that we would normally generate.
.Sp
\fINote:\fR I called this \*(L"fields\*(R" because the \fIheader()\fR method of
Mail::Header returns something different, but similar enough to 
be confusing.
.Sp
You can change the order of the fields: see the \f(CWfield_order\fR entry elsewhere in this document. 
You really shouldn't need to do this, but some people have to
deal with broken mailers.
.Ip "filename [\s-1FILENAME\s0]" 4
\fIInstance method.\fR
Set the filename which this data will be reported as.
This actually sets both \*(L"standard\*(R" attributes.
.Sp
With no argument, returns the filename as dictated by the 
content-disposition.
.Ip "get \s-1TAG\s0,[\s-1INDEX\s0]" 4
\fIInstance method.\fR
Get the contents of field \s-1TAG\s0, which might have been set 
with \fIset()\fR or \fIreplace()\fR.  Returns the text of the field.
.Sp
.Vb 1
\&    $ml->get('Subject', 0);
.Ve
If the optional 0-based \s-1INDEX\s0 is given, then we return the \s-1INDEX\s0'th
occurence of field \s-1TAG\s0.  Otherwise, we look at the context:
In a scalar context, only the first (0th) occurence of the 
field is returned; in an array context, \fIall\fR occurences are returned.  
.Sp
\fIWarning:\fR this should only be used with non-\s-1MIME\s0 fields.
Behavior with \s-1MIME\s0 fields is \s-1TBD\s0, and will raise an exception for now.
.Ip "get_length" 4
\fIInstance method.\fR
Recompute the content length for the message \fIif the process is trivial\fR, 
setting the \*(L"content-length\*(R" attribute as a side-effect:
.Sp
.Vb 1
\&    $msg->get_length;
.Ve
Returns the length, or undefined if not set.
.Sp
\fINote:\fR the content length can be difficult to compute, since it 
involves assembling the entire encoded body and taking the length
of it (which, in the case of multipart messages, means freezing
all the sub-parts, etc.).  
.Sp
This method only sets the content length to a defined value if the
message is a singlepart with \f(CW"binary"\fR encoding, \fIand\fR the body is
available either in-core or as a simple file.  Otherwise, the content
length is set to the undefined value.
.Sp
Since content-length is not a standard \s-1MIME\s0 field anyway (that's right, kids:
it's not in the \s-1MIME\s0 RFCs, it's an \s-1HTTP\s0 thing), this seems pretty fair.
.Ip "parts" 4
\fIInstance method.\fR
Return the parts of this entity, and this entity only.
Returns empty array if this entity has no parts.
.Sp
This is \fBnot\fR recursive!  Parts can have sub-parts; use
\fIparts_DFS()\fR to get everything.
.Ip "parts_DFS" 4
\fIInstance method.\fR
Return the list of all \s-1MIME::\s0Lite objects included in the entity,
starting with the entity itself, in depth-first-search order.  
If this object has no parts, it alone will be returned.
.Ip "preamble [\s-1TEXT\s0]" 4
\fIInstance method.\fR
Get/set the preamble string, assuming that this object has subparts.
Set it to undef for the default string.
.Ip "replace \s-1TAG\s0,\s-1VALUE\s0" 4
\fIInstance method.\fR
Delete all occurences of fields named \s-1TAG\s0, and add a new
field with the given \s-1VALUE\s0.  \s-1TAG\s0 is converted to all-lowercase.
.Sp
\fBBeware\fR the special \s-1MIME\s0 fields (\s-1MIME\s0\-version, Content-*):
if you \*(L"replace\*(R" a \s-1MIME\s0 field, the replacement text will override 
the \fIactual\fR \s-1MIME\s0 attributes when it comes time to output that field.
So normally you use \fIattr()\fR to change \s-1MIME\s0 fields and \fIadd()\fR/\fIreplace()\fR to 
change \fInon-\s-1MIME\s0\fR fields:
.Sp
.Vb 1
\&    $msg->replace("Subject" => "Hi there!");
.Ve
Giving \s-1VALUE\s0 as the \fIempty string\fR will effectively \fIprevent\fR that
field from being output.  This is the correct way to suppress
the special \s-1MIME\s0 fields:    
.Sp
.Vb 1
\&    $msg->replace("Content-disposition" => "");
.Ve
Giving \s-1VALUE\s0 as \fIundefined\fR will just cause all explicit values
for \s-1TAG\s0 to be deleted, without having any new values added.
.Sp
\fINote:\fR the name of this method  comes from Mail::Header.
.Ip "scrub" 4
\fIInstance method.\fR
\fBThis is Alpha code.  If you use it, please let me know how it goes.\fR
Recursively goes through the \*(L"parts\*(R" tree of this message and tries 
to find \s-1MIME\s0 attributes that can be removed. 
With an array argument, removes exactly those attributes; e.g.:
.Sp
.Vb 1
\&    $msg->scrub(['content-disposition', 'content-length']);
.Ve
Is the same as recursively doing:
.Sp
.Vb 2
\&    $msg->replace('Content-disposition' => '');
\&    $msg->replace('Content-length'      => '');
.Ve
.Sh "Setting/getting message data"
.Ip "binmode [\s-1OVERRIDE\s0]" 4
\fIInstance method.\fR
With no argument, returns whether or not it thinks that the data 
(as given by the \*(L"Path\*(R" argument of \f(CWbuild()\fR) should be read using 
\fIbinmode()\fR (for example, when \f(CWread_now()\fR is invoked).
.Sp
The default behavior is that any content type other than 
\f(CWtext/*\fR or \f(CWmessage/*\fR is binmode'd; this should in general work fine.
.Sp
With a defined argument, this method sets an explicit \*(L"override\*(R"
value.  An undefined argument unsets the override.
The new current value is returned.
.Ip "data [\s-1DATA\s0]" 4
\fIInstance method.\fR
Get/set the literal \s-1DATA\s0 of the message.  The \s-1DATA\s0 may be
either a scalar, or a reference to an array of scalars (which
will simply be joined).    
.Sp
\fIWarning:\fR setting the data causes the \*(L"content-length\*(R" attribute
to be recomputed (possibly to nothing).
.Ip "fh [\s-1FILEHANDLE\s0]" 4
\fIInstance method.\fR
Get/set the \s-1FILEHANDLE\s0 which contains the message data.
.Sp
Takes a filehandle as an input and stores it in the object.
This routine is similar to \fIpath()\fR; one important difference is that 
no attempt is made to set the content length.  
.Ip "path [\s-1PATH\s0]" 4
\fIInstance method.\fR
Get/set the \s-1PATH\s0 to the message data.
.Sp
\fIWarning:\fR setting the path recomputes any existing \*(L"content-length\*(R" field,
and re-sets the \*(L"filename\*(R" (to the last element of the path if it
looks like a simple path, and to nothing if not).
.Ip "resetfh [\s-1FILEHANDLE\s0]" 4
\fIInstance method.\fR
Set the current position of the filehandle back to the beginning. 
Only applies if you used \*(L"\s-1FH\s0\*(R" in \fIbuild()\fR or \fIattach()\fR for this message.
.Sp
Returns false if unable to reset the filehandle (since not all filehandles
are seekable).
.Ip "read_now " 4
\fIInstance method.\fR
Forces data from the path/filehandle (as specified by \f(CWbuild()\fR)
to be read into core immediately, just as though you had given it
literally with the \f(CWData\fR keyword.  
.Sp
Note that the in-core data will always be used if available.
.Sp
Be aware that everything is slurped into a giant scalar: you may not want 
to use this if sending tar files!  The benefit of \fInot\fR reading in the data 
is that very large files can be handled by this module if left on disk
until the message is output via \f(CWprint()\fR or \f(CWprint_body()\fR.
.Ip "sign \s-1PARAMHASH\s0" 4
\fIInstance method.\fR
Sign the message.  This forces the message to be read into core,
after which the signature is appended to it.
.Ip "Data" 8
As in \f(CWbuild()\fR: the literal signature data.
Can be either a scalar or a ref to an array of scalars.
.Ip "Path" 8
As in \f(CWbuild()\fR: the path to the file.
.Sp
If no arguments are given, the default is:
.Sp
.Vb 1
\&    Path => "$ENV{HOME}/.signature"
.Ve
The content-length is recomputed.
.Ip "verify_data" 4
\fIInstance method.\fR
Verify that all \*(L"paths\*(R" to attached data exist, recursively.  
It might be a good idea for you to do this before a \fIprint()\fR, to
prevent accidental partial output if a file might be missing.
Raises exception if any path is not readable.
.Sh "Output"
.Ip "print [\s-1OUTHANDLE\s0]" 4
\fIInstance method.\fR 
Print the message to the given output handle, or to the currently-selected
filehandle if none was given.
.Sp
All \s-1OUTHANDLE\s0 has to be is a filehandle (possibly a glob ref), or 
any object that responds to a \fIprint()\fR message.
.Ip "print_body [\s-1OUTHANDLE\s0]" 4
\fIInstance method.\fR 
Print the body of a message to the given output handle, or to 
the currently-selected filehandle if none was given.  
.Sp
All \s-1OUTHANDLE\s0 has to be is a filehandle (possibly a glob ref), or 
any object that responds to a \fIprint()\fR message.
.Sp
\fBFatal exception\fR raised if unable to open any of the input files,
or if a part contains no data, or if an unsupported encoding is 
encountered.
.Ip "print_header [\s-1OUTHANDLE\s0]" 4
\fIInstance method.\fR 
Print the header of the message to the given output handle, 
or to the currently-selected filehandle if none was given.
.Sp
All \s-1OUTHANDLE\s0 has to be is a filehandle (possibly a glob ref), or 
any object that responds to a \fIprint()\fR message.
.Ip "as_string" 4
\fIInstance method.\fR 
Return the entire message as a string, with a header and an encoded body.
.Ip "body_as_string" 4
\fIInstance method.\fR 
Return the encoded body as a string.
This is the portion after the header and the blank line.
.Sp
\fINote:\fR actually prepares the body by \*(L"printing\*(R" to a scalar.
Proof that you can hand the \f(CWprint*()\fR methods any blessed object 
that responds to a \f(CWprint()\fR message.
.Ip "header_as_string" 4
\fIInstance method.\fR 
Return the header as a string.
.Sh "Sending"
.Ip "send" 4
.Ip "send \s-1HOW\s0, \s-1HOWARGS\s0..." 4
\fIClass/instance method.\fR  
This is the principal method for sending mail, and for configuring
how mail will be sent.
.Sp
\fIAs a class method\fR with a \s-1HOW\s0 argument and optional \s-1HOWARGS\s0, it sets 
the default sending mechanism that the no-argument instance method 
will use.  The \s-1HOW\s0 is a facility name (\fBsee below\fR), 
and the \s-1HOWARGS\s0 is interpreted by the facilty.  
The class method returns the previous \s-1HOW\s0 and \s-1HOWARGS\s0 as an array.
.Sp
.Vb 4
\&    MIME::Lite->send('sendmail', "d:\e\eprograms\e\esendmail.exe");
\&    ...
\&    $msg = MIME::Lite->new(...);
\&    $msg->send;
.Ve
\fIAs an instance method with arguments\fR 
(a \s-1HOW\s0 argument and optional \s-1HOWARGS\s0), sends the message in the 
requested manner; e.g.:
.Sp
.Vb 1
\&    $msg->send('sendmail', "d:\e\eprograms\e\esendmail.exe");
.Ve
\fIAs an instance method with no arguments,\fR sends the message by 
the default mechanism set up by the class method.
Returns whatever the mail-handling routine returns: this should be true 
on success, false/exception on error:
.Sp
.Vb 2
\&    $msg = MIME::Lite->new(From=>...);
\&    $msg->send || die "you DON'T have mail!";
.Ve
On Unix systems (at least), the default setting is equivalent to:
.Sp
.Vb 1
\&    MIME::Lite->send("sendmail", "/usr/lib/sendmail -t -oi -oem");
.Ve
There are three facilities:
.Ip "\*(N"sendmail\*(T", \s-1ARGS\s0..." 8
Send a message by piping it into the \*(L"sendmail\*(R" command.
Uses the send_by_sendmail() method, giving it the \s-1ARGS\s0.
This usage implements (and deprecates) the \f(CWsendmail()\fR method.
.Ip "\*(N"smtp\*(T", [\s-1HOSTNAME\s0]" 8
Send a message by \s-1SMTP\s0, using optional \s-1HOSTNAME\s0 as \s-1SMTP\s0\-sending host.
Uses the send_by_smtp() method.
.Ip "\*(N"sub\*(T", \e&\s-1SUBREF\s0, \s-1ARGS\s0..." 8
Sends a message \s-1MSG\s0 by invoking the subroutine \s-1SUBREF\s0 of your choosing,
with \s-1MSG\s0 as the first argument, and \s-1ARGS\s0 following.
.Sp
\fIFor example:\fR let's say you're on an \s-1OS\s0 which lacks the usual Unix
\*(L"sendmail\*(R" facility, but you've installed something a lot like it, and
you need to configure your Perl script to use this \*(L"sendmail.exe\*(R" program.
Do this following in your script's setup:
.Sp
.Vb 1
\&    MIME::Lite->send('sendmail', "d:\e\eprograms\e\esendmail.exe");
.Ve
Then, whenever you need to send a message \f(CW$msg\fR, just say:
.Sp
.Vb 1
\&    $msg->send;
.Ve
That's it.  Now, if you ever move your script to a Unix box, all you
need to do is change that line in the setup and you're done.
All of your \f(CW$msg\fR\->send invocations will work as expected.
.Ip "send_by_sendmail \s-1SENDMAILCMD\s0" 4
.Ip "send_by_sendmail \s-1PARAM\s0=>\s-1VALUE\s0, ..." 4
\fIInstance method.\fR
Send message via an external \*(L"sendmail\*(R" program
(this will probably only work out-of-the-box on Unix systems).
.Sp
Returns true on success, false or exception on error.
.Sp
You can specify the program and all its arguments by giving a single
string, \s-1SENDMAILCMD\s0.  Nothing fancy is done; the message is simply
piped in.
.Sp
However, if your needs are a little more advanced, you can specify 
zero or more of the following \s-1PARAM/VALUE\s0 pairs; a Unix-style, 
taint-safe \*(L"sendmail\*(R" command will be constructed for you:
.Ip "Sendmail" 8
Full path to the program to use.  
Default is \*(L"/usr/lib/sendmail\*(R".
.Ip "BaseArgs" 8
Ref to the basic array of arguments we start with.  
Default is \f(CW["-t", "-oi", "-oem"]\fR.
.Ip "SetSender" 8
Unless this is \fIexplicitly\fR given as false, we attempt to automatically
set the \f(CW-f\fR argument to the first address that can be extracted from 
the \*(L"From:\*(R" field of the message (if there is one). 
.Sp
\fIWhat is the \-f, and why do we use it?\fR
Suppose we did \fInot\fR use \f(CW-f\fR, and you gave an explicit \*(L"From:\*(R" 
field in your message: in this case, the sendmail \*(L"envelope\*(R" would 
indicate the \fIreal\fR user your process was running under, as a way 
of preventing mail forgery.  Using the \f(CW-f\fR switch causes the sender 
to be set in the envelope as well.
.Sp
\fISo when would I \s-1NOT\s0 want to use it?\fR
If sendmail doesn't regard you as a \*(L"trusted\*(R" user, it will permit
the \f(CW-f\fR but also add an \*(L"X\-Authentication-Warning\*(R" header to the message
to indicate a forged envelope.  To avoid this, you can either 
(1) have SetSender be false, or 
(2) make yourself a trusted user by adding a \f(CWT\fR configuration 
    command to your \fIsendmail.cf\fR file 
    (e.g.: \f(CWTeryq\fR if the script is running as user \*(L"eryq").
.Ip "FromSender" 8
If defined, this is identical to setting SetSender to true, 
except that instead of looking at the \*(L"From:\*(R" field we use 
the address given by this option.
Thus:
.Sp
.Vb 1
\&    FromSender => 'me@myhost.com'
.Ve
.Ip "send_by_smtp \s-1ARGS\s0..." 4
\fIInstance method.\fR
Send message via \s-1SMTP\s0, using Net::\s-1SMTP\s0.  
The optional \s-1ARGS\s0 are sent into \fINet::\s-1SMTP::\s0new()\fR: usually, these are
.Sp
.Vb 1
\&    MAILHOST, OPTION=>VALUE, ...
.Ve
Note that the list of recipients is taken from the 
\*(L"To\*(R", \*(L"Cc\*(R" and \*(L"Bcc\*(R" fields.
.Sp
Returns true on success, false or exception on error.
.Ip "sendmail \s-1COMMAND\s0..." 4
\fIClass method, \s-1DEPRECATED\s0.\fR  
Declare the sender to be \*(L"sendmail\*(R", and set up the \*(L"sendmail\*(R" command.
\fIYou should use send() instead.\fR
.Sh "Miscellaneous"
.Ip "quiet \s-1ONOFF\s0" 4
\fIClass method.\fR  
Suppress/unsuppress all warnings coming from this module.
.Sp
.Vb 1
\&    MIME::Lite->quiet(1);       ### I know what I'm doing
.Ve
I recommend that you include that comment as well.  And while
you type it, say it out loud: if it doesn't feel right, then maybe
you should reconsider the whole line.  \f(CW;-)\fR
.SH "NOTES"
.Sh "How do I prevent \*(M"Content\*(S" headers from showing up in my mail reader?"
Apparently, some people are using mail readers which display the \s-1MIME\s0
headers like \*(L"Content-disposition\*(R", and they want \s-1MIME::\s0Lite not
to generate them \*(L"because they look ugly\*(R".  
.PP
Sigh.
.PP
Y'know, kids, those headers aren't just there for cosmetic purposes.
They help ensure that the message is \fIunderstood\fR correctly by mail 
readers.  But okay, you asked for it, you got it... 
here's how you can suppress the standard \s-1MIME\s0 headers.  
Before you send the message, do this:
.PP
.Vb 1
\&        $msg->scrub;
.Ve
You can \fIscrub()\fR any part of a multipart message independently;
just be aware that it works recursively.  Before you scrub,
note the rules that I follow:
.Ip "Content-type" 4
You can safely scrub the \*(L"content-type\*(R" attribute if, and only if, 
the part is of type \*(L"text/plain\*(R" with charset \*(L"us-ascii\*(R". 
.Ip "Content-transfer-encoding" 4
You can safely scrub the \*(L"content-transfer-encoding\*(R" attribute 
if, and only if, the part uses \*(L"7bit\*(R", \*(L"8bit\*(R", or \*(L"binary\*(R" encoding.
You are far better off doing this if your lines are under 1000 
characters.  Generally, that means you \fIcan\fR scrub it for plain
text, and you can \fInot\fR scrub this for images, etc.
.Ip "Content-disposition" 4
You can safely scrub the \*(L"content-disposition\*(R" attribute 
if you trust the mail reader to do the right thing when it decides
whether to show an attachment inline or as a link.  Be aware
that scrubbing both the content-disposition and the content-type
means that there is no way to \*(L"recommend\*(R" a filename for the attachment!
.Sp
\fBNote:\fR there are reports of brain-dead MUAs out there that 
do the wrong thing if you \fIprovide\fR the content-disposition.
If your attachments keep showing up inline or vice-versa,
try scrubbing this attribute.
.Ip "Content-length" 4
You can always scrub \*(L"content-length\*(R" safely.
.Sh "How do I give my attachment a [different] recommended filename?"
By using the Filename option (which is different from Path!):
.PP
.Vb 3
\&        $msg->attach(Type => "image/gif",
\&                     Path => "/here/is/the/real/file.GIF",
\&                     Filename => "logo.gif");
.Ve
You should \fInot\fR put path information in the Filename.
.Sh "Benign limitations"
This is \*(L"lite\*(R", after all...
.Ip "\(bu" 4
There's no parsing.  Get \s-1MIME\s0\-tools if you need to parse \s-1MIME\s0 messages.
.Ip "\(bu" 4
\s-1MIME::\s0Lite messages are currently \fInot\fR interchangeable with 
either Mail::Internet or \s-1MIME::\s0Entity objects.  This is a completely 
separate module.
.Ip "\(bu" 4
A content-length field is only inserted if the encoding is binary,
the message is a singlepart, and all the document data is available
at \f(CWbuild()\fR time by virtue of residing in a simple path, or in-core.
Since content-length is not a standard \s-1MIME\s0 field anyway (that's right, kids:
it's not in the \s-1MIME\s0 RFCs, it's an \s-1HTTP\s0 thing), this seems pretty fair.
.Ip "\(bu" 4
\s-1MIME::\s0Lite alone cannot help you lose weight.  You must supplement
your use of \s-1MIME::\s0Lite with a healthy diet and exercise. 
.Sh "Cheap and easy mailing"
I thought putting in a default \*(L"sendmail\*(R" invocation wasn't too bad an 
idea, since a lot of Perlers are on \s-1UNIX\s0 systems. 
The out-of-the-box configuration is:
.PP
.Vb 1
\&     MIME::Lite->send('sendmail', "/usr/lib/sendmail -t -oi -oem");
.Ve
By the way, these arguments to sendmail are:
.PP
.Vb 8
\&     -t      Scan message for To:, Cc:, Bcc:, etc.
\&              
\&     -oi     Do NOT treat a single "." on a line as a message terminator.
\&             As in, "-oi vey, it truncated my message... why?!"
\&                
\&     -oem    On error, mail back the message (I assume to the
\&             appropriate address, given in the header).
\&             When mail returns, circle is complete.  Jai Guru Deva -oem.
.Ve
Note that these are the same arguments you get if you configure to use
the smarter, taint-safe mailing:
.PP
.Vb 1
\&     MIME::Lite->send('sendmail');
.Ve
If you get \*(L"X\-Authentication-Warning\*(R" headers from this, you can forgo
diddling with the envelope by instead specifying:
.PP
.Vb 1
\&     MIME::Lite->send('sendmail', SetSender=>0);
.Ve
And, if you're not on a Unix system, or if you'd just rather send mail
some other way, there's always:
.PP
.Vb 1
\&     MIME::Lite->send('smtp', "smtp.myisp.net");
.Ve
Or you can set up your own subroutine to call.
In any case, check out the send() method. 
.SH "WARNINGS"
.Sh "Good-vs-bad email addresses with \fIsend_by_smtp()\fR"
If using send_by_smtp(), be aware that you are
forcing \s-1MIME::\s0Lite to extract email addresses out of a possible list
provided in the \f(CWTo:\fR, \f(CWCc:\fR, and \f(CWBcc:\fR fields.  This is tricky
stuff, and as such only the following sorts of addresses will work
reliably:
.PP
.Vb 3
\&    username
\&    full.name@some.host.com
\&    "Name, Full" <full.name@some.host.com>
.Ve
This last form is discouraged because \s-1SMTP\s0 must be able to get
at the \fIname\fR or \fIname@domain\fR portion.
.PP
\fBDisclaimer:\fR
\s-1MIME::\s0Lite was never intended to be a Mail User Agent, so please
don't expect a full implementation of \s-1RFC\s0\-822.  Restrict yourself to
the common forms of Internet addresses described herein, and you should
be fine.  If this is not feasible, then consider using \s-1MIME::\s0Lite
to \fIprepare\fR your message only, and using Net::\s-1SMTP\s0 explicitly to 
\fIsend\fR your message.
.Sh "Formatting of headers delayed until \fIprint()\fR"
This class treats a \s-1MIME\s0 header in the most abstract sense,
as being a collection of high-level attributes.  The actual
\s-1RFC\s0\-822-style header fields are not constructed until it's time
to actually print the darn thing.
.Sh "Encoding of data delayed until \fIprint()\fR"
When you specify message bodies 
(in build() or attach()) -- 
whether by \fB\s-1FH\s0\fR, \fBData\fR, or \fBPath\fR -- be warned that we don't 
attempt to open files, read filehandles, or encode the data until 
print() is invoked.  
.PP
In the past, this created some confusion for users of sendmail
who gave the wrong path to an attachment body, since enough of 
the \fIprint()\fR would succeed to get the initial part of the message out.  
Nowadays, \f(CW$AUTO_VERIFY\fR is used to spot-check the Paths given before
the mail facility is employed.  A whisker slower, but tons safer.
.PP
Note that if you give a message body via \s-1FH\s0, and try to \fIprint()\fR 
a message twice, the second \fIprint()\fR will not do the right thing 
unless you  explicitly rewind the filehandle.
.PP
You can get past these difficulties by using the \fBReadNow\fR option,
provided that you have enough memory to handle your messages.
.Sh "\s-1MIME\s0 attributes are separate from header fields!"
\fBImportant:\fR the \s-1MIME\s0 attributes are stored and manipulated separately 
from the message header fields; when it comes time to print the 
header out, \fIany explicitly-given header fields override the ones that
would be created from the \s-1MIME\s0 attributes.\fR  That means that this:
.PP
.Vb 2
\&    ### DANGER ### DANGER ### DANGER ### DANGER ### DANGER ###
\&    $msg->add("Content-type", "text/html; charset=US-ASCII");
.Ve
will set the exact \f(CW"Content-type"\fR field in the header I write, 
\fIregardless of what the actual \s-1MIME\s0 attributes are.\fR
.PP
\fIThis feature is for experienced users only,\fR as an escape hatch in case
the code that normally formats \s-1MIME\s0 header fields isn't doing what 
you need.  And, like any escape hatch, it's got an alarm on it:
\s-1MIME::\s0Lite will warn you if you attempt to \f(CWset()\fR or \f(CWreplace()\fR
any \s-1MIME\s0 header field.  Use \f(CWattr()\fR instead.
.Sh "Beware of lines consisting of a single dot"
Julian Haight noted that \s-1MIME::\s0Lite allows you to compose messages
with lines in the body consisting of a single \*(L".\*(R".  
This is true: it should be completely harmless so long as \*(L"sendmail\*(R" 
is used with the \-oi option (see the section on \fICheap and easy mailing\fR).
.PP
However, I don't know if using Net::\s-1SMTP\s0 to transfer such a message
is equally safe.  Feedback is welcomed.
.PP
My perspective: I don't want to magically diddle with a user's 
message unless absolutely positively necessary.  
Some users may want to send files with \*(L".\*(R" alone on a line;
my well-meaning tinkering could seriously harm them.
.Sh "Infinite loops may mean tainted data!"
Stefan Sautter noticed a bug in 2.106 where a m//gc match was
failing due to tainted data, leading to an infinite loop inside
\s-1MIME::\s0Lite.  
.PP
I am attempting to correct for this, but be advised that my fix will
silently untaint the data (given the context in which the problem
occurs, this should be benign: I've labelled the source code with
\s-1UNTAINT\s0 comments for the curious).
.PP
So: don't depend on taint-checking to save you from outputting
tainted data in a message.
.Sh "Don't tweak the global configuration"
Global configuration variables are bad, and should go away.
Until they do, please follow the hints with each setting
on how \fInot\fR to change it.
.SH "A MIME PRIMER"
.Sh "Content types"
The \*(L"Type\*(R" parameter of \f(CWbuild()\fR is a \fIcontent type\fR. 
This is the actual type of data you are sending.  
Generally this is a string of the form \f(CW"majortype/minortype"\fR.
.PP
Here are the major \s-1MIME\s0 types.
A more-comprehensive listing may be found in \s-1RFC\s0\-2046.
.Ip "application" 4
Data which does not fit in any of the other categories, particularly 
data to be processed by some type of application program. 
\f(CWapplication/octet-stream\fR, \f(CWapplication/gzip\fR, \f(CWapplication/postscript\fR...
.Ip "audio" 4
Audio data.
\f(CWaudio/basic\fR...
.Ip "image" 4
Graphics data.
\f(CWimage/gif\fR, \f(CWimage/jpeg\fR...
.Ip "message" 4
A message, usually another mail or \s-1MIME\s0 message.
\f(CWmessage/rfc822\fR...
.Ip "multipart" 4
A message containing other messages.
\f(CWmultipart/mixed\fR, \f(CWmultipart/alternative\fR...
.Ip "text" 4
Textual data, meant for humans to read.
\f(CWtext/plain\fR, \f(CWtext/html\fR...
.Ip "video" 4
Video or video+audio data.
\f(CWvideo/mpeg\fR...
.Sh "Content transfer encodings"
The \*(L"Encoding\*(R" parameter of \f(CWbuild()\fR.
This is how the message body is packaged up for safe transit.
.PP
Here are the 5 major \s-1MIME\s0 encodings.
A more-comprehensive listing may be found in \s-1RFC\s0\-2045.
.Ip "7bit" 4
Basically, no \fIreal\fR encoding is done.  However, this label guarantees that no
8-bit characters are present, and that lines do not exceed 1000 characters 
in length.
.Ip "8bit" 4
Basically, no \fIreal\fR encoding is done.  The message might contain 8-bit 
characters, but this encoding guarantees that lines do not exceed 1000 
characters in length.
.Ip "binary" 4
No encoding is done at all.  Message might contain 8-bit characters,
and lines might be longer than 1000 characters long.
.Sp
The most liberal, and the least likely to get through mail gateways.  
Use sparingly, or (better yet) not at all.
.Ip "base64" 4
Like \*(L"uuencode\*(R", but very well-defined.  This is how you should send
essentially binary information (tar files, GIFs, JPEGs, etc.). 
.Ip "quoted-printable" 4
Useful for encoding messages which are textual in nature, yet which contain 
non-\s-1ASCII\s0 characters (e.g., Latin-1, Latin-2, or any other 8-bit alphabet).
.SH "VERSION"
$Id: Lite.pm,v 2.117 2001/08/20 20:40:39 eryq Exp $
.SH "CHANGE LOG"
.Ip "Version 2.117   (2001/08/20)" 4
The terms-of-use have been placed in the distribution file \*(L"\s-1COPYING\s0\*(R".  
Also, small documentation tweaks were made.
.Ip "Version 2.116   (2001/08/17)" 4
Added long-overdue patch which makes the instance method form
of \fIsend()\fR do the right thing when given \s-1HOW\s0... arguments.
\fIThanks to Casey West for the patch.\fR
.Ip "Version 2.114   (2001/08/16)" 4
New special \*(L'\s-1AUTO\s0\*(R' content type in \fInew()\fR/\fIbuild()\fR tells \s-1MIME::\s0Lite to 
try and guess the type from file extension.  To make use of 
this, you'll want to install \fB\s-1MIME::\s0Types\fR.
The \*(L"\s-1AUTO\s0\*(R" setting can be made the default default (instead of \*(L"\s-1TEXT\s0")
if you set \f(CW$AUTO_CONTENT_TYPE = 1, $PARANOID = 0\fR.
\fIThanks to\fR Ville SkyttE<#228> \fIfor these patches.\fR
.Sp
File::Basename is used if it is available.
\fIThanks to\fR Ville SkyttE<#228> \fIfor this patch.\fR
.Sp
\s-1SMTP\s0 failures (in send_by_smtp) now add the \f(CW$smtp\fR\->message to the
croak'ed exception, so if things go wrong, you get a better
idea of what and why.
\fIThanks to Thomas R. Wyant \s-1III\s0 for the patch.\fR
.Sp
Made a subtle change to \f(CWas_string\fR which supposedly fixes a 
failed \s-1MIME\s0 data.t test with Perl 5.004_04 on \s-1NT\s0 4 sp6.  
The problem might only exist in this old perl, but as the patch 
author says, not everyone has climbed higher on the Perl ladder.
\fIThanks to John Gotts for the patch.\fR
.Sp
Added \f(CWcontrib\fR directory, with \fIMailTool.pm\fR.
\fIThanks to Tom Wyant for this contribution.\fR
.Sp
Improved \s-1HTML\s0 documentation (notice the links to
the individual methods in the top menu).
.Sp
Corrected some mis-docs.
.Ip "Version 2.111   (2001/04/03)" 4
Added long-overdue \f(CWparts()\fR and \f(CWparts_DFS()\fR methods.
.Sp
.Vb 3
\&    No instance method
\&       For accessing the subparts?                         
\&    That can't be right.  D'OH!          
.Ve
Added long-overdue auto-verify logic to \f(CWprint()\fR method.
.Sp
Added long-overdue \f(CWpreamble()\fR method for getting/setting 
the preamble text.  
\fIThanks to Jim Daigle for inspiring this.\fR
.Ip "Version 2.108   (2001/03/30)" 4
New \f(CWfield_order()\fR allows you to set the header order, both on a 
per-message basis, and package-wide.
\fIThanks to Thomas Stromberg for suggesting this.\fR
.Sp
Added code to try and divine \*(L"sendmail\*(R" path more intelligently.
\fIThanks to Slaven Rezic for the suggestion.\fR
.Ip "Version 2.107   (2001/03/27)" 4
Fixed serious bug where tainted data with quoted-printable encoding
was causing infinite loops.  The \*(L"fix\*(R" untaints the data in question,
which is not optimal, but it's probably benign in this case.
\fIThanks to Stefan Sautter for tracking this nasty little beast down.\fR
\fIThanks to Larry Geralds for a related patch.\fR
.Sp
.Vb 3
\&    "Doctor, O doctor:
\&       it's painful when I do *this* --" 
\&    "Simple: don't *do* that." 
.Ve
Fixed bugs where a non-local \f(CW$_\fR was being modified... again!  
Will I never learn?
\fIThanks to Maarten Koskamp for reporting this.\fR
.Sp
.Vb 3
\&    Dollar-underscore
\&       can poison distant waters;
\&   'local' must it be.
.Ve
Fixed buglet in \f(CWadd()\fR where all value references were being treated
as arrayrefs, instead of as possibly-self-stringifying object refs.
Now you can send in an object ref as the 2nd argument.
\fIThanks to dLux for the bug report.\fR
.Sp
.Vb 3
\&    That ref is a string?
\&       Operator overload
\&    has ruined my day.
.Ve
Added \*(L"Approved\*(R" as an acceptable header field for \f(CWnew()\fR, as per \s-1RFC1036\s0.
\fIThanks to Thomax for the suggestion regarding \s-1MIME\s0\-tools.\fR
.Sp
Small improvements to docs to make different uses of \fIattach()\fR 
and various arguments clearer.
\fIThanks to Sven Rassman and Roland Walter for the suggestions.\fR
.Ip "Version 2.106   (2000/11/21)" 4
Added Alpha version of \fIscrub()\fR to make it easy for people to suppress
the printing of unwanted \s-1MIME\s0 attributes (like Content-length).
\fIThanks to the many people who asked for this.\fR
.Sp
Headers with empty-strings for their values are no longer
printed.  This seems sensible, and helps us implement \fIscrub()\fR.
.Ip "Version 2.105   (2000/10/14)" 4
The regression-test failure was identified, and it was my fault.
Apparently some of the \e-quoting in my \*(L"autoloaded\*(R" code was
making Perl 5.6 unhappy.  For this nesting-related idiocy, 
a nesting kaiku.
\fIThanks to Scott Schwartz for identifying the problem.\fR
.Sp
.Vb 19
\&    In a pattern, my
\&       backslash-s dwells peacefully,
\&    unambiguous --
\&     
\&       but I embed it
\&          in a double-quoted string    
\&       doubling the backslash --
\&     
\&          interpolating
\&             that same double-quoted string 
\&          in other patterns --
\&           
\&             and, worlds within worlds,
\&                I single-quote the function
\&             to autoload it -- 
\&    
\&          changing the meaning
\&       of the backslash and the 's';
\&    and Five-Point-Six growls.
.Ve
.Ip "Version 2.104   (2000/09/28)" 4
Now attempts to load and use Mail::Address for parsing email 
addresses \fIbefore\fR falling back to our own method.
\fIThanks to numerous people for suggesting this.\fR
.Sp
.Vb 3
\&    Parsing addresses
\&       is too damn hard. One last hope:
\&    Let Graham Barr do it!
.Ve
For the curious, the version of Mail::Address appears 
as the \*(L"A\*(R" number in the X\-Mailer:
.Sp
.Vb 1
\&    X-Mailer: MIME::Lite 2.104  (A1.15; B2.09; Q2.03)
.Ve
Added \fBFromSender\fR option to \fIsend_by_sendmail()\fR.
\fIThanks to Bill Moseley for suggesting this feature.\fR
.Ip "Version 2.101   (2000/06/06)" 4
Major revision to \fIprint_body()\fR and \fIbody_as_string()\fR so that
\*(L"body\*(R" really means \*(L"the part after the header\*(R", which is what most
people would want in this context.  This is \fBnot\fR how it was used
1.x, where \*(L"body\*(R" only meant \*(L"the body of a simple singlepart\*(R".
Hopefully, this change will solve many problems and create very few ones.  
.Sp
Added support for attaching a part to a \*(L"message/rfc822\*(R", treating
the \*(L"message\*(R" type as a multipart-like container.
.Sp
Now takes care not to include \*(L"Bcc:\*(R" in header when using send_by_smtp,
as a safety precaution against qmail's behavior.
\fIThanks to Tatsuhiko Miyagawa for identifying this problem.\fR
.Sp
Improved efficiency of many stringifying operations by using 
string-arrays which are joined, instead of doing multiple appends 
to a scalar.
.Sp
Cleaned up the \*(L"examples\*(R" directory.
.Ip "Version 1.147   (2000/06/02)" 4
Fixed buglet where lack of Cc:/Bcc: was causing extract_addrs
to emit \*(L"undefined variable\*(R" warnings.  Also, lack of a \*(L"To:\*(R" field
now causes a croak.
\fIThanks to David Mitchell for the bug report and suggested patch.\fR
.Ip "Version 1.146   (2000/05/18)" 4
Fixed bug in parsing of addresses; please read the \s-1WARNINGS\s0 section
which describes recommended address formats for \*(L"To:\*(R", \*(L"Cc:\*(R", etc.
Also added automatic inclusion of a \s-1UT\s0 \*(L"Date:\*(R" at top level unless 
explicitly told not to.
\fIThanks to Andy Jacobs for the bug report and the suggestion.\fR
.Ip "Version 1.145   (2000/05/06)" 4
Fixed bug in \fIencode_7bit()\fR: a lingering \f(CW/e\fR modifier was removed.
\fIThanks to Michael A. Chase for the patch.\fR
.Ip "Version 1.142   (2000/05/02)" 4
Added new, taint-safe invocation of \*(L"sendmail\*(R", one which also
sets up the \f(CW-f\fR option.  Unfortunately, I couldn't make this automatic:
the change could have broken a lot of code out there which used 
\fIsend_by_sendmail()\fR with unusual \*(L"sendmail\*(R" variants.  
So you'll have to configure \*(L"send\*(R" to use the new mechanism:
.Sp
.Vb 1
\&    MIME::Lite->send('sendmail');       ### no args!
.Ve
\fIThanks to Jeremy Howard for suggesting these features.\fR
.Ip "Version 1.140   (2000/04/27)" 4
Fixed bug in support for \*(L"To\*(R", \*(L"Cc\*(R", and \*(L"Bcc\*(R" in \fIsend_by_smtp()\fR:
multiple (comma-separated) addresses should now work fine.
We try real hard to extract addresses from the flat text strings.
\fIThanks to John Mason for motivating this change.\fR
.Sp
Added automatic verification that attached data files exist,
done immediately before the \*(L"send\*(R" action is invoked.
To turn this off, set \f(CW$MIME::Lite::AUTO_VERIFY\fR to false.
.Ip "Version 1.137   (2000/03/22)" 4
Added support for \*(L"Cc\*(R" and \*(L"Bcc\*(R" in \fIsend_by_smtp()\fR.
To turn this off, set \f(CW$MIME::Lite::AUTO_CC\fR to false.
\fIThanks to Lucas Maneos for the patch, and tons of others for 
the suggestion.\fR
.Sp
Chooses a better default content-transfer-encoding if the content-type
is \*(L"image/*\*(R", \*(L"audio/*\*(R", etc.
To turn this off, set \f(CW$MIME::Lite::AUTO_ENCODE\fR to false.
\fIThanks to many folks for the suggestion.\fR
.Sp
Fixed bug in \s-1QP\s0\-encoding where a non-local \f(CW$_\fR was being modified.
\fIThanks to Jochen Stenzel for finding this very obscure bug!\fR
.Sp
Removed references to \f(CW$`\fR, \f(CW$'\fR, and \f(CW$&\fR (bad variables
which slow things down).
.Sp
Added an example of how to send \s-1HTML\s0 files with enclosed in-line
images, per popular demand.
.Ip "Version 1.133   (1999/04/17)" 4
Fixed bug in \*(L"Data\*(R" handling: arrayrefs were not being handled
properly.
.Ip "Version 1.130   (1998/12/14)" 4
Added much larger and more-flexible \fIsend()\fR facility.
\fIThanks to Andrew McRae (and Optimation New Zealand Ltd) 
for the Net::\s-1SMTP\s0 interface.  Additional thanks to the many folks
who requested this feature.\fR
.Sp
Added \fIget()\fR method for extracting basic attributes.
.Sp
New... \*(L"t\*(R" tests!
.Ip "Version 1.124   (1998/11/13)" 4
Folded in filehandle (\s-1FH\s0) support in build/attach.
\fIThanks to Miko O'Sullivan for the code.\fR
.Ip "Version 1.122   (1998/01/19)" 4
\s-1MIME::\s0Base64 and \s-1MIME::\s0QuotedPrint are used if available.
.Sp
The 7bit encoding no longer does \*(L"escapes\*(R"; it merely strips 8-bit characters.
.Ip "Version 1.121   (1997/04/08)" 4
Filename attribute is now no longer ignored by \fIbuild()\fR.
\fIThanks to Ian Smith for finding and patching this bug.\fR
.Ip "Version 1.120   (1997/03/29)" 4
Efficiency hack to speed up \s-1MIME::\s0Lite::IO_Scalar.
\fIThanks to David Aspinwall for the patch.\fR
.Ip "Version 1.116   (1997/03/19)" 4
Small bug in our private copy of \fIencode_base64()\fR was patched.
\fIThanks to Andreas Koenig for pointing this out.\fR
.Sp
New, prettier way of specifying mail message headers in \f(CWbuild()\fR.
.Sp
New quiet method to turn off warnings.
.Sp
Changed \*(L"stringify\*(R" methods to more-standard \*(L"as_string\*(R" methods.
.Ip "Version 1.112   (1997/03/06)" 4
Added \f(CWread_now()\fR, and \f(CWbinmode()\fR method for our non-Unix-using brethren: 
file data is now read using \fIbinmode()\fR if appropriate.
\fIThanks to Xiangzhou Wang for pointing out this bug.\fR
.Ip "Version 1.110   (1997/03/06)" 4
Fixed bug in opening the data filehandle.
.Ip "Version 1.102   (1997/03/01)" 4
Initial release.
.Ip "Version 1.101   (1997/03/01)" 4
Baseline code.
Originally created: 11 December 1996.  Ho ho ho.
.SH "TERMS AND CONDITIONS"
Copyright (c) 1997 by Eryq.  
Copyright (c) 1998 by ZeeGee Software Inc.
All rights reserved.  This program is free software; you can redistribute 
it and/or modify it under the same terms as Perl itself.  
.PP
This software comes with \fBNO WARRANTY\fR of any kind.
See the COPYING file in the distribution for details.
.SH "NUTRITIONAL INFORMATION"
For some reason, the US FDA says that this is now required by law
on any products that bear the name \*(L"Lite\*(R"...
.PP
.Vb 7
\&    MIME::Lite                | 
\&    ------------------------------------------------------------
\&    Serving size:             | 1 module
\&    Servings per container:   | 1
\&    Calories:                 | 0
\&    Fat:                      | 0g
\&      Saturated Fat:          | 0g
.Ve
Warning: for consumption by hardware only!  May produce 
indigestion in humans if taken internally.
.SH "AUTHOR"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc. (\fIhttp://www.zeegee.com\fR).
.PP
Go to \fIhttp://www.zeegee.com\fR for the latest downloads
and on-line documentation for this module.  Enjoy.

.rn }` ''
.IX Title "lib::MIME::Lite 3"
.IX Name "MIME::Lite - low-calorie MIME generator"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "EXAMPLES"

.IX Subsection "Create a simple message containing just text"

.IX Subsection "Create a simple message containing just an image"

.IX Subsection "Create a multipart message"

.IX Subsection "Attach a \s-1GIF\s0 to a text message"

.IX Subsection "Attach a pre-prepared part to a message"

.IX Subsection "Print a message to a filehandle"

.IX Subsection "Print a message into a string"

.IX Subsection "Send a message"

.IX Subsection "Send an \s-1HTML\s0 document... with images included!"

.IX Subsection "Change how messages are sent"

.IX Header "PUBLIC INTERFACE"

.IX Subsection "Global configuration"

.IX Item "\s-1MIME::\s0Lite->field_order()"

.IX Item "\s-1MIME::\s0Lite->quiet()"

.IX Item "\s-1MIME::\s0Lite->send()"

.IX Item "$\s-1MIME::\s0Lite::\s-1AUTO_CC\s0"

.IX Item "$\s-1MIME::\s0Lite::\s-1AUTO_CONTENT_TYPE\s0"

.IX Item "$\s-1MIME::\s0Lite::\s-1AUTO_ENCODE\s0"

.IX Item "$\s-1MIME::\s0Lite::\s-1AUTO_VERIFY\s0"

.IX Item "$\s-1MIME::\s0Lite::\s-1PARANOID\s0"

.IX Subsection "Construction"

.IX Item "new [\s-1PARAMHASH\s0]"

.IX Item "attach \s-1PART\s0"

.IX Item "attach \s-1PARAMHASH\s0..."

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "build [\s-1PARAMHASH\s0]"

.IX Item "(fieldname)"

.IX Item "Data"

.IX Item "Datestamp"

.IX Item "Disposition"

.IX Item "Encoding"

.IX Item "\s-1FH\s0"

.IX Item "Filename"

.IX Item "Id"

.IX Item "Length"

.IX Item "Path"

.IX Item "ReadNow"

.IX Item "Top"

.IX Item "Type"

.IX Subsection "Setting/getting headers and attributes"

.IX Item "add \s-1TAG\s0,\s-1VALUE\s0"

.IX Item "attr \s-1ATTR\s0,[\s-1VALUE\s0]"

.IX Item "delete \s-1TAG\s0"

.IX Item "field_order \s-1FIELD\s0,...\s-1FIELD\s0"

.IX Item "fields"

.IX Item "filename [\s-1FILENAME\s0]"

.IX Item "get \s-1TAG\s0,[\s-1INDEX\s0]"

.IX Item "get_length"

.IX Item "parts"

.IX Item "parts_DFS"

.IX Item "preamble [\s-1TEXT\s0]"

.IX Item "replace \s-1TAG\s0,\s-1VALUE\s0"

.IX Item "scrub"

.IX Subsection "Setting/getting message data"

.IX Item "binmode [\s-1OVERRIDE\s0]"

.IX Item "data [\s-1DATA\s0]"

.IX Item "fh [\s-1FILEHANDLE\s0]"

.IX Item "path [\s-1PATH\s0]"

.IX Item "resetfh [\s-1FILEHANDLE\s0]"

.IX Item "read_now "

.IX Item "sign \s-1PARAMHASH\s0"

.IX Item "Data"

.IX Item "Path"

.IX Item "verify_data"

.IX Subsection "Output"

.IX Item "print [\s-1OUTHANDLE\s0]"

.IX Item "print_body [\s-1OUTHANDLE\s0]"

.IX Item "print_header [\s-1OUTHANDLE\s0]"

.IX Item "as_string"

.IX Item "body_as_string"

.IX Item "header_as_string"

.IX Subsection "Sending"

.IX Item "send"

.IX Item "send \s-1HOW\s0, \s-1HOWARGS\s0..."

.IX Item "\*(N"sendmail\*(T", \s-1ARGS\s0..."

.IX Item "\*(N"smtp\*(T", [\s-1HOSTNAME\s0]"

.IX Item "\*(N"sub\*(T", \e&\s-1SUBREF\s0, \s-1ARGS\s0..."

.IX Item "send_by_sendmail \s-1SENDMAILCMD\s0"

.IX Item "send_by_sendmail \s-1PARAM\s0=>\s-1VALUE\s0, ..."

.IX Item "Sendmail"

.IX Item "BaseArgs"

.IX Item "SetSender"

.IX Item "FromSender"

.IX Item "send_by_smtp \s-1ARGS\s0..."

.IX Item "sendmail \s-1COMMAND\s0..."

.IX Subsection "Miscellaneous"

.IX Item "quiet \s-1ONOFF\s0"

.IX Header "NOTES"

.IX Subsection "How do I prevent \*(M"Content\*(S" headers from showing up in my mail reader?"

.IX Item "Content-type"

.IX Item "Content-transfer-encoding"

.IX Item "Content-disposition"

.IX Item "Content-length"

.IX Subsection "How do I give my attachment a [different] recommended filename?"

.IX Subsection "Benign limitations"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Subsection "Cheap and easy mailing"

.IX Header "WARNINGS"

.IX Subsection "Good-vs-bad email addresses with \fIsend_by_smtp()\fR"

.IX Subsection "Formatting of headers delayed until \fIprint()\fR"

.IX Subsection "Encoding of data delayed until \fIprint()\fR"

.IX Subsection "\s-1MIME\s0 attributes are separate from header fields!"

.IX Subsection "Beware of lines consisting of a single dot"

.IX Subsection "Infinite loops may mean tainted data!"

.IX Subsection "Don't tweak the global configuration"

.IX Header "A MIME PRIMER"

.IX Subsection "Content types"

.IX Item "application"

.IX Item "audio"

.IX Item "image"

.IX Item "message"

.IX Item "multipart"

.IX Item "text"

.IX Item "video"

.IX Subsection "Content transfer encodings"

.IX Item "7bit"

.IX Item "8bit"

.IX Item "binary"

.IX Item "base64"

.IX Item "quoted-printable"

.IX Header "VERSION"

.IX Header "CHANGE LOG"

.IX Item "Version 2.117   (2001/08/20)"

.IX Item "Version 2.116   (2001/08/17)"

.IX Item "Version 2.114   (2001/08/16)"

.IX Item "Version 2.111   (2001/04/03)"

.IX Item "Version 2.108   (2001/03/30)"

.IX Item "Version 2.107   (2001/03/27)"

.IX Item "Version 2.106   (2000/11/21)"

.IX Item "Version 2.105   (2000/10/14)"

.IX Item "Version 2.104   (2000/09/28)"

.IX Item "Version 2.101   (2000/06/06)"

.IX Item "Version 1.147   (2000/06/02)"

.IX Item "Version 1.146   (2000/05/18)"

.IX Item "Version 1.145   (2000/05/06)"

.IX Item "Version 1.142   (2000/05/02)"

.IX Item "Version 1.140   (2000/04/27)"

.IX Item "Version 1.137   (2000/03/22)"

.IX Item "Version 1.133   (1999/04/17)"

.IX Item "Version 1.130   (1998/12/14)"

.IX Item "Version 1.124   (1998/11/13)"

.IX Item "Version 1.122   (1998/01/19)"

.IX Item "Version 1.121   (1997/04/08)"

.IX Item "Version 1.120   (1997/03/29)"

.IX Item "Version 1.116   (1997/03/19)"

.IX Item "Version 1.112   (1997/03/06)"

.IX Item "Version 1.110   (1997/03/06)"

.IX Item "Version 1.102   (1997/03/01)"

.IX Item "Version 1.101   (1997/03/01)"

.IX Header "TERMS AND CONDITIONS"

.IX Header "NUTRITIONAL INFORMATION"

.IX Header "AUTHOR"

