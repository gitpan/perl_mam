.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH B::Lint 3 "perl 5.005, patch 53" "20/Feb/98" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
B::Lint \- Perl lint
.SH "SYNOPSIS"
perl \-MO=Lint[,OPTIONS] foo.pl
.SH "DESCRIPTION"
The B::Lint module is equivalent to an extended version of the \fB\-w\fR
option of \fBperl\fR. It is named after the program \fBlint\fR which carries
out a similar process for C programs.
.SH "OPTIONS AND LINT CHECKS"
Option words are separated by commas (not whitespace) and follow the
usual conventions of compiler backend options. Following any options
(indicated by a leading \fB\-\fR) come lint check arguments. Each such
argument (apart from the special \fBall\fR and \fBnone\fR options) is a
word representing one possible lint check (turning on that check) or
is \fBno-foo\fR (turning off that check). Before processing the check
arguments, a standard list of checks is turned on. Later options
override earlier ones. Available options are:
.Ip "\fBcontext\fR" 8
Produces a warning whenever an array is used in an implicit scalar
context. For example, both of the lines
.Sp
.Vb 4
\&    $foo = length(@bar);
\&    $foo = @bar;
\&will elicit a warning. Using an explicit B<scalar()> silences the
\&warning. For example,
.Ve
.Vb 1
\&    $foo = scalar(@bar);
.Ve
.Ip "\fBimplicit-read\fR and \fBimplicit-write\fR" 8
These options produce a warning whenever an operation implicitly
reads or (respectively) writes to one of Perl's special variables.
For example, \fBimplicit-read\fR will warn about these:
.Sp
.Vb 1
\&    /foo/;
.Ve
and \fBimplicit-write\fR will warn about these:
.Sp
.Vb 1
\&    s/foo/bar/;
.Ve
Both \fBimplicit-read\fR and \fBimplicit-write\fR warn about this:
.Sp
.Vb 1
\&    for (@a) { ... }
.Ve
.Ip "\fBdollar-underscore\fR" 8
This option warns whenever \f(CW$_\fR is used either explicitly anywhere or
as the implicit argument of a \fBprint\fR statement.
.Ip "\fBprivate-names\fR" 8
This option warns on each use of any variable, subroutine or
method name that lives in a non-current package but begins with
an underscore ("_"). Warnings aren't issued for the special case
of the single character name \*(L"_\*(R" by itself (e.g. \f(CW$_\fR and \f(CW@_\fR).
.Ip "\fBundefined-subs\fR" 8
This option warns whenever an undefined subroutine is invoked.
This option will only catch explicitly invoked subroutines such
as \f(CWfoo()\fR and not indirect invocations such as \f(CW&$subref()\fR
or \f(CW$obj->meth()\fR. Note that some programs or modules delay
definition of subs until runtime by means of the \s-1AUTOLOAD\s0
mechanism.
.Ip "\fBregexp-variables\fR" 8
This option warns whenever one of the regexp variables $\*(R', $& or
$\*(R' is used. Any occurrence of any of these variables in your
program can slow your whole program down. See the \fIperlre\fR manpage for
details.
.Ip "\fBall\fR" 8
Turn all warnings on.
.Ip "\fBnone\fR" 8
Turn all warnings off.
.SH "NON LINT\-CHECK OPTIONS"
.Ip "\fB\-u Package\fR" 8
Normally, Lint only checks the main code of the program together
with all subs defined in package main. The \fB\-u\fR option lets you
include other package names whose subs are then checked by Lint.
.SH "BUGS"
This is only a very preliminary version.
.SH "AUTHOR"
Malcolm Beattie, mbeattie@sable.ox.ac.uk.

.rn }` ''
.IX Title "B::Lint 3"
.IX Name "B::Lint - Perl lint"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "OPTIONS AND LINT CHECKS"

.IX Item "\fBcontext\fR"

.IX Item "\fBimplicit-read\fR and \fBimplicit-write\fR"

.IX Item "\fBdollar-underscore\fR"

.IX Item "\fBprivate-names\fR"

.IX Item "\fBundefined-subs\fR"

.IX Item "\fBregexp-variables\fR"

.IX Item "\fBall\fR"

.IX Item "\fBnone\fR"

.IX Header "NON LINT\-CHECK OPTIONS"

.IX Item "\fB\-u Package\fR"

.IX Header "BUGS"

.IX Header "AUTHOR"

