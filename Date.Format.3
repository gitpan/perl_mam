.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Date::Format 3 "perl 5.004, patch 55" "2/Jan/97" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Date::Format \- Date formating subroutines
.SH "SYNOPSIS"
.PP
.Vb 15
\&        use Date::Format;
\&        
\&        @lt = timelocal(time);
\&        
\&        print time2str($template, time);
\&        print strftime($template, @lt);
\&        
\&        print time2str($template, time, $zone);
\&        print strftime($template, @lt, $zone);
\&        
\&        print ctime(time);
\&        print ascctime(@lt);
\&        
\&        print ctime(time, $zone);
\&        print asctime(@lt, $zone);
.Ve
.SH "DESCRIPTION"
This module provides routines to format dates into ASCII strings. They
correspond to the C library routines \f(CWstrftime\fR and \f(CWctime\fR.
.Ip "time2str(\s-1TEMPLATE\s0, \s-1TIME\s0 [, \s-1ZONE\s0])" 4
\f(CWtime2str\fR converts \f(CWTIME\fR into an \s-1ASCII\s0 string using the conversion
specification given in \f(CWTEMPLATE\fR. \f(CWZONE\fR if given specifies the zone
which the output is required to be in, \f(CWZONE\fR defaults to your current zone.
.Ip "strftime(\s-1TEMPLATE\s0, \s-1TIME\s0 [, \s-1ZONE\s0])" 4
\f(CWstrftime\fR is similar to \f(CWtime2str\fR with the exception that the time is
passed as an array, such as the array returned by \f(CWlocaltime\fR.
.Ip "ctime(\s-1TIME\s0 [, \s-1ZONE\s0])" 4
\f(CWctime\fR calls \f(CWtime2str\fR with the given arguments using the
conversion specification \f(CW"%a %b %e %T %Y\en"\fR
.Ip "asctime(\s-1TIME\s0 [, \s-1ZONE\s0])" 4
\f(CWasctime\fR calls \f(CWtime2str\fR with the given arguments using the
conversion specification \f(CW"%a %b %e %T %Y\en"\fR
.SH "MULTI\-LANGUAGE SUPPORT"
Date::Format is capable of formating into several languages, these are
English, French, German and Italian. Changing the language is done via
a static method call, for example
.PP
.Vb 1
\&        Date::Format->language('German');
.Ve
will change the language in which all subsequent dates are formatted.
.PP
This is only a first pass, I am considering changing this to be
.PP
.Vb 2
\&        $lang = Date::Language->new('German');
\&        $lang->time2str("%a %b %e %T %Y\en", time);
.Ve
I am open to suggestions on this.
.SH "CONVERSION SPECIFICATION"
Each conversion specification  is  replaced  by  appropriate
characters   as   described  in  the  following  list.   The
appropriate  characters  are  determined  by   the   LC_TIME
category of the program's locale.
.PP
.Vb 35
\&        %%      PERCENT
\&        %a      day of the week abbr
\&        %A      day of the week
\&        %b      month abbr
\&        %B      month
\&        %c      ctime format: Sat Nov 19 21:05:57 1994
\&        %d      numeric day of the month
\&        %e      DD
\&        %D      MM/DD/YY
\&        %h      month abbr
\&        %H      hour, 24 hour clock, leading 0's)
\&        %I      hour, 12 hour clock, leading 0's)
\&        %j      day of the year
\&        %k      hour
\&        %l      hour, 12 hour clock
\&        %m      month number, starting with 1
\&        %M      minute, leading 0's
\&        %n      NEWLINE
\&        %o      ornate day of month -- "1st", "2nd", "25th", etc.
\&        %p      AM or PM 
\&        %r      time format: 09:05:57 PM
\&        %R      time format: 21:05
\&        %s      seconds since the Epoch, UCT
\&        %S      seconds, leading 0's
\&        %t      TAB
\&        %T      time format: 21:05:57
\&        %U      week number, Sunday as first day of week
\&        %w      day of the week, numerically, Sunday == 0
\&        %W      week number, Monday as first day of week
\&        %x      date format: 11/19/94
\&        %X      time format: 21:05:57
\&        %y      year (2 digits)
\&        %Y      year (4 digits)
\&        %Z      timezone in ascii. eg: PST
\&        %z      timezone in format -/+0000
.Ve
.SH "AUTHOR"
Graham Barr <Graham.Barr@tiuk.ti.com>
.SH "REVISION"
$Revision: 2.7 $
.SH "COPYRIGHT"
Copyright (c) 1995 Graham Barr. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms
as Perl itself.

.rn }` ''
.IX Title "Date::Format 3"
.IX Name "Date::Format - Date formating subroutines"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "time2str(\s-1TEMPLATE\s0, \s-1TIME\s0 [, \s-1ZONE\s0])"

.IX Item "strftime(\s-1TEMPLATE\s0, \s-1TIME\s0 [, \s-1ZONE\s0])"

.IX Item "ctime(\s-1TIME\s0 [, \s-1ZONE\s0])"

.IX Item "asctime(\s-1TIME\s0 [, \s-1ZONE\s0])"

.IX Header "MULTI\-LANGUAGE SUPPORT"

.IX Header "CONVERSION SPECIFICATION"

.IX Header "AUTHOR"

.IX Header "REVISION"

.IX Header "COPYRIGHT"

