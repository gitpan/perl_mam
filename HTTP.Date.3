.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::HTTP::Date 3 "perl 5.004, patch 01" "3/Apr/97" "User Contributed Perl Documentation"
.IX Title "lib::HTTP::Date 3"
.UC
.IX Name "time2str, str2time - date conversion routines"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
time2str, str2time \- date conversion routines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 1
\& use HTTP::Date;
.Ve
.Vb 2
\& $stringGMT = time2str(time);   # Format as GMT ASCII time
\& $time = str2time($stringGMT);  # convert ASCII date to machine time
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides two functions that deal with the HTTP date format.
.Sh "\fItime2str\fR\|([$time])"
.IX Subsection "\fItime2str\fR\|([$time])"
The \fItime2str()\fR function converts a machine time (seconds since epoch)
to a string.  If the function is called without an argument, it will
use the current time.
.PP
The string returned is in the format defined by the \s-1HTTP/1\s0.0
specification.  This is a fixed length subset of the format defined by
\s-1RFC\s0 1123, represented in Universal Time (\s-1GMT\s0).  An example of this
format is:
.PP
.Vb 1
\&   Thu, 03 Feb 1994 17:09:00 GMT
.Ve
.Sh "\fIstr2time\fR\|($str [, \f(CW$zone\fR])"
.IX Subsection "\fIstr2time\fR\|($str [, \f(CW$zone\fR])"
The \fIstr2time()\fR function converts a string to machine time.  It returns
\f(CWundef\fR if the format is unrecognized, or the year is not between 1970
and 2038.  The function is able to parse the following formats:
.PP
.Vb 5
\& "Wed, 09 Feb 1994 22:23:32 GMT"       -- HTTP format
\& "Thu Feb  3 17:03:55 GMT 1994"        -- ctime(3) format
\& "Thu Feb  3 00:00:00 1994",           -- ANSI C asctime() format
\& "Tuesday, 08-Feb-94 14:15:29 GMT"     -- old rfc850 HTTP format
\& "Tuesday, 08-Feb-1994 14:15:29 GMT"   -- broken rfc850 HTTP format
.Ve
.Vb 4
\& "03/Feb/1994:17:03:55 -0700"   -- common logfile format
\& "09 Feb 1994 22:23:32 GMT"     -- HTTP format (no weekday)
\& "08-Feb-94 14:15:29 GMT"       -- rfc850 format (no weekday)
\& "08-Feb-1994 14:15:29 GMT"     -- broken rfc850 format (no weekday)
.Ve
.Vb 6
\& "1994-02-03 14:15:29 -0100"    -- ISO 8601 format
\& "1994-02-03 14:15:29"          -- zone is optional
\& "1994-02-03"                   -- only date
\& "1994-02-03T14:15:29"          -- Use T as separator
\& "19940203T141529Z"             -- ISO 8601 compact format
\& "19940203"                     -- only date
.Ve
.Vb 4
\& "08-Feb-94"         -- old rfc850 HTTP format    (no weekday, no time)
\& "08-Feb-1994"       -- broken rfc850 HTTP format (no weekday, no time)
\& "09 Feb 1994"       -- proposed new HTTP format  (no weekday, no time)
\& "03/Feb/1994"       -- common logfile format     (no time, no offset)
.Ve
.Vb 2
\& "Feb  3  1994"      -- Unix 'ls -l' format
\& "Feb  3 17:03"      -- Unix 'ls -l' format
.Ve
.Vb 1
\& "11-15-96  03:52PM" -- Windows 'dir' format
.Ve
The parser ignores leading and trailing whitespace.  It also allow the
seconds to be missing and the month to be numerical in most formats.
.PP
The \fIstr2time()\fR function takes an optional second argument that
specifies the default time zone to use when converting the date.  This
zone specification should be numerical (like \*(L"\-0800\*(R" or \*(L"+0100") or
\*(L"\s-1GMT\s0\*(R".  This parameter is ignored if the zone is specified in the date
string itself.  It this parameter is missing, and the date string
format does not contain any zone specification then the local time
zone is assumed.
.PP
If the year is missing, then we assume that the date is the first
matching date \fIbefore\fR current time.
.SH "BUGS"
.IX Header "BUGS"
Non-numerical time zones (like MET, PST) are all treated like GMT.
Do not use them.  HTTP does not use them.
.PP
The \fIstr2time()\fR function has been told how to parse far too many
formats.  This makes the module name misleading. To be sure it is
really misleading you can also import the \fItime2iso()\fR and \fItime2isoz()\fR
functions.  They work like \fItime2str()\fR but produce ISO\-8601 formated
strings (YYYY\-MM\-DD hh:mm:ss).
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1995-1997, Gisle Aas
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

.rn }` ''
