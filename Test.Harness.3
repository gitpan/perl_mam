.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Test::Harness 3 "perl 5.003, patch 93" "21/Feb/97" "Perl Programmers Reference Guide"
.IX Title "Test::Harness 3"
.UC
.IX Name "Test::Harness - run perl standard test scripts with statistics"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
Test::Harness \- run perl standard test scripts with statistics
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use Test::Harness;
.PP
\fIruntests\fR\|(@tests);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl test scripts print to standard output \f(CW"ok N"\fR for each single
test, where \f(CWN\fR is an increasing sequence of integers. The first line
output by a standard test script is \f(CW"1..M"\fR with \f(CWM\fR being the
number of tests that should be run within the test
script. \fITest::Harness::runtests\fR\|(@tests) runs all the testscripts
named as arguments and checks standard output for the expected
\f(CW"ok N"\fR strings.
.PP
After all tests have been performed, \fIruntests()\fR prints some
performance statistics that are computed by the Benchmark module.
.Sh "The test script output"
.IX Subsection "The test script output"
Any output from the testscript to standard error is ignored and
bypassed, thus will be seen by the user. Lines written to standard
output containing \f(CW/^(not\es+)?ok\eb/\fR are interpreted as feedback for
\fIruntests()\fR.  All other lines are discarded.
.PP
It is tolerated if the test numbers after \f(CWok\fR are omitted. In this
case Test::Harness maintains temporarily its own counter until the
script supplies test numbers again. So the following test script
.PP
.Vb 8
\&    print <<END;
\&    1..6
\&    not ok
\&    ok
\&    not ok
\&    ok
\&    ok
\&    END
.Ve
will generate 
.PP
.Vb 2
\&    FAILED tests 1, 3, 6
\&    Failed 3/6 tests, 50.00% okay
.Ve
The global variable \f(CW$Test::Harness::verbose\fR is exportable and can be
used to let \fIruntests()\fR display the standard output of the script
without altering the behavior otherwise.
.SH "EXPORT"
.IX Header "EXPORT"
\f(CW&runtests\fR is exported by Test::Harness per default.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.Ip "\f(CWAll tests successful.\enFiles=%d,  Tests=%d, %s\fR" 4
.IX Item "\f(CWAll tests successful.\enFiles=%d,  Tests=%d, %s\fR"
If all tests are successful some statistics about the performance are
printed.
.Ip "\f(CWFAILED tests %s\en\etFailed %d/%d tests, %.2f%% okay.\fR" 4
.IX Item "\f(CWFAILED tests %s\en\etFailed %d/%d tests, %.2f%% okay.\fR"
For any single script that has failing subtests statistics like the
above are printed.
.Ip "\f(CWTest returned status %d (wstat %d)\fR" 4
.IX Item "\f(CWTest returned status %d (wstat %d)\fR"
Scripts that return a non-zero exit status, both \f(CW$? >> 8\fR and \f(CW$?\fR are
printed in a message similar to the above.
.Ip "\f(CWFailed 1 test, %.2f%% okay. %s\fR" 4
.IX Item "\f(CWFailed 1 test, %.2f%% okay. %s\fR"
.Ip "\f(CWFailed %d/%d tests, %.2f%% okay. %s\fR" 4
.IX Item "\f(CWFailed %d/%d tests, %.2f%% okay. %s\fR"
If not all tests were successful, the script dies with one of the
above messages.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See the \fIBenchmark\fR manpage for the underlying timing routines.
.SH "AUTHORS"
.IX Header "AUTHORS"
Either Tim Bunce or Andreas Koenig, we don't know. What we know for
sure is, that it was inspired by Larry Wall's TEST script that came
with perl distributions for ages. Numerous anonymous contributors
exist. Current maintainer is Andreas Koenig.
.SH "BUGS"
.IX Header "BUGS"
Test::Harness uses $^X to determine the perl binary to run the tests
with. Test scripts running via the shebang (\f(CW#!\fR) line may not be
portable because $^X is not consistent for shebang scripts across
platforms. This is no problem when Test::Harness is run with an
absolute path to the perl binary or when $^X can be found in the path.

.rn }` ''
