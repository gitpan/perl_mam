.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH perlos2 3 "perl 5.003, patch 05" "5/Oct/96" "Perl Programmers Reference Guide"
.IX Title "perlos2 3"
.UC
.IX Name "perlos2 - Perl under OS/2, Win0.31, Win0.95 and WinNT."
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
perlos2 \- Perl under OS/2, Win0.31, Win0.95 and WinNT.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
One can read this document in the following formats:
.PP
.Vb 4
\&        man perlos2
\&        view perl perlos2
\&        exprorer perlos2.html
\&        info perlos2
.Ve
to list some (not all should be available simultaneously), or it may
be read \fIas is\fR: either as \fIREADME.os2\fR, or \fIpod/perlos2.pod\fR.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "Target"
.IX Subsection "Target"
The target is to make \s-1OS/2\s0 the best supported platform for
using/building/developping Perl and \fIPerl applications\fR, as well as
make Perl the best language to use under \s-1OS/2\s0.
.PP
The current state is quite close to this target. Known limitations:
.Ip "\(bu" 5
.IX Item "\(bu"
Some *nix programs use \fIfork()\fR a lot, but currently \fIfork()\fR is not
supported after \fIuse\fRing dynamically loaded extensions.
.Ip "\(bu" 5
.IX Item "\(bu"
You need a separate perl executable \fIperl_\|_.exe\fR (see the \fIperl_\|_.exe\fR manpage)
to use \s-1PM\s0 code in your application (like the forthcoming Perl/Tk).
.Ip "\(bu" 5
.IX Item "\(bu"
There is no simple way to access \fB\s-1WPS\s0\fR objects. The only way I know
is via \f(CWOS2::REXX\fR extension (see the \fI\s-1OS2::REXX\s0\fR manpage), and we do not have access to
convinience methods of \fBObject \s-1REXX\s0\fR. (Is it possible at all? I know
of no \fBObject-\s-1REXX\s0\fR \s-1API\s0.)
.PP
Please keep this list up-to-date by informing me about other items.
.Sh "Other OSes"
.IX Subsection "Other OSes"
Since \s-1OS/2\s0 port of perl uses a remarkable \fB\s-1EMX\s0\fR environment, it can
run (and build extensions, and \- possibly \- be build itself) under any
environment which can run \s-1EMX\s0. The current list is \s-1DOS\s0,
\s-1DOS\s0\-inside-\s-1OS/2\s0, Win0.31, Win0.95 and WinNT. Out of many perl flavors,
only one works, see the section on \fIperl_.exe\fR.
.PP
Note that not all features of Perl are available under these
environments. This depends on the features the \fIextender\fR \- most
probably \f(CWRSX\fR \- decided to implement.
.PP
Cf. the \fIPrerequisites\fR manpage.
.Sh "Prerequisites"
.IX Subsection "Prerequisites"
.Ip "\fB\s-1EMX\s0\fR" 6
.IX Item "\fB\s-1EMX\s0\fR"
\fB\s-1EMX\s0\fR runtime is required. Note that it is possible to make \fIperl_.exe\fR
to run under \s-1DOS\s0 without any external support by binding \fIemx.exe\fR to
it, see the \fIemxbind\fR manpage.
.Sp
Only the latest runtime is supported, currently \f(CW0.9c\fR.
.Sp
One can get different parts of \fB\s-1EMX\s0\fR from, say
.Sp
.Vb 2
\&  ftp://ftp.cdrom.com/pub/os2/emx0.9c/
\&  ftp://hobbes.nmsu.edu/os2/unix/gnu/
.Ve
The runtime component should have the name \fIemxrt.zip\fR.
.Ip "\fB\s-1RSX\s0\fR" 6
.IX Item "\fB\s-1RSX\s0\fR"
To run Perl on \f(CWDPMS\fR platforms one needs \fB\s-1RSX\s0\fR runtime. This is
needed under \s-1DOS\s0\-inside-\s-1OS/2\s0, Win0.31, Win0.95 and WinNT (see 
the section on \fIOther OSes\fR).
.Sp
One can get \fB\s-1RSX\s0\fR from, say
.Sp
.Vb 2
\&  ftp://ftp.cdrom.com/pub/os2/emx0.9c/contrib
\&  ftp://ftp.uni-bielefeld.de/pub/systems/msdos/misc
.Ve
Contact the author on \f(CWrainer@mathematik.uni-bielefeld.de\fR.
.Ip "\fB\s-1HPFS\s0\fR" 6
.IX Item "\fB\s-1HPFS\s0\fR"
Perl does not care about file systems, but to install the whole perl
library intact one needs a file system which supports long file names.
.Sp
Note that if you do not plan to build the perl itself, it may be
possible to fool \fB\s-1EMX\s0\fR to truncate file names. This is not supported,
read \fB\s-1EMX\s0\fR docs to see how to do it.
.Sh "Starting Perl programs under \s-1OS/2\s0"
.IX Subsection "Starting Perl programs under \s-1OS/2\s0"
Start your Perl program \fIfoo.pl\fR with arguments \f(CWarg1 arg2 arg3\fR the
same way as on any other platform, by
.PP
.Vb 1
\&        perl foo arg1 arg2 arg3
.Ve
If you want to specify perl options \f(CW-my_opts\fR to the perl itself (as
opposed to to your program), use
.PP
.Vb 1
\&        perl -my_opts foo.pl arg1 arg2 arg3
.Ve
Alternately, if you use \s-1OS/2-\s0ish shell, like \f(CWCMD\fR or \f(CW4os2\fR, put
the following at the start of your perl script:
.PP
.Vb 2
\&        extproc perl -x -S
\&        #!/usr/bin/perl -my_opts 
.Ve
rename your program to \fIfoo.cmd\fR, and start it by typing
.PP
.Vb 1
\&        foo arg1 arg2 arg3
.Ve
(Note that having *nixish full path to perl \fI/usr/bin/perl\fR is not
necessary, \fIperl\fR would be enough, but having full path would make it
easier to use your script under *nix.)
.PP
Note that because of stupid \s-1OS/2\s0 limitations the full path of the perl
script is not available when you use <extproc>, thus you are forced to
use \f(CW-S\fR perl switch, and your script should be on path. As a plus
side, if you know a full path to your script, you may still start it
with 
.PP
.Vb 1
\&        perl -x ../../blah/foo.cmd arg1 arg2 arg3
.Ve
(note that the argument \f(CW-my_opts\fR is taken care of by the \f(CW#!\fR line
in your script).
.PP
To understand what the above \fImagic\fR does, read perl docs about \f(CW-S\fR
and \f(CW-x\fR switches \- see the \fIperlrun\fR manpage, and cmdref about \f(CWextproc\fR:
.PP
.Vb 4
\&        view perl perlrun
\&        man perlrun
\&        view cmdref extproc
\&        help extproc
.Ve
or whatever method you prefer.
.PP
There are also endless possibilites to use \fIexecutable extensions\fR of
\fB4OS2\fR, \fIassociations\fR of \fB\s-1WPS\s0\fR and so on... However, if you use
*nixish shell (like \fIsh.exe\fR supplied in the binary distribution),
you need follow the syntax specified in the section on \fISwitches\fR in the \fIperlrun\fR manpage.
.Sh "Starting \s-1OS/2\s0 programs under Perl"
.IX Subsection "Starting \s-1OS/2\s0 programs under Perl"
This is what \fIsystem()\fR (see the \f(CWsystem\fR entry in the \fIperlfunc\fR manpage), \f(CW``\fR (see
the section on \fII/O Operators\fR in the \fIperlop\fR manpage), and \fIopen pipe\fR (see the \f(CWopen\fR entry in the \fIperlfunc\fR manpage)
are for. (Avoid \fIexec()\fR (see the \f(CWexec\fR entry in the \fIperlfunc\fR manpage) unless you know what you
do).
.PP
Note however that to use some of these operators you need to have a
\f(CWsh\fR\-syntax shell installed (see the section on \fIPdksh\fR, 
the section on \fIFrequently asked questions\fR), and perl should be able to find it
(see the section on \fI\s-1PERL_SH_DIR\s0\fR).
.PP
The only cases when the shell is not used is the multi-argument
\fIsystem()\fR (see the \f(CWsystem\fR entry in the \fIperlfunc\fR manpage)/\fIexec()\fR (see the \f(CWexec\fR entry in the \fIperlfunc\fR manpage), and
one-argument version thereof without redirection and shell
meta-characters.
.SH "Frequently asked questions"
.IX Header "Frequently asked questions"
.Sh "I cannot run extenal programs"
.IX Subsection "I cannot run extenal programs"
Did you run your programs with \f(CW-w\fR switch? See 
the section on \fIStarting \s-1OS/2\s0 programs under Perl\fR.
.Sh "I cannot embed perl into my program, or use \fIperl.dll\fR from my program. "
.IX Subsection "I cannot embed perl into my program, or use \fIperl.dll\fR from my program. "
.Ip "Is your program \fB\s-1EMX\s0\fR\-compiled with \f(CW-Zmt -Zcrtdll\fR?" 4
.IX Item "Is your program \fB\s-1EMX\s0\fR\-compiled with \f(CW-Zmt -Zcrtdll\fR?"
If not, you need to build a stand-alone \s-1DLL\s0 for perl. Contact me, I
did it once. Sockets would not work, as a lot of other stuff.
.Ip "Did you use \f(CWExtUtils::Embed\fR?" 4
.IX Item "Did you use \f(CWExtUtils::Embed\fR?"
I had reports it does not work. Somebody would need to fix it.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.Sh "Automatic binary installation"
.IX Subsection "Automatic binary installation"
The most convinient way of installing perl is via perl installer
\fIinstall.exe\fR. Just follow the instructions, and 99% of the
installation blues would go away. 
.PP
Note however, that you need to have \fIunzip.exe\fR on your path, and
\fB\s-1EMX\s0\fR environment \fIrunning\fR. The latter means that if you just
installed \fB\s-1EMX\s0\fR, and made all the needed changes to \fIConfig.sys\fR,
you may need to reboot in between. Check \fB\s-1EMX\s0\fR runtime by running
.PP
.Vb 1
\&        emxrev
.Ve
A folder is created on your desktop which contains some useful
objects.
.PP
\fBThings not taken care of by automatic binary installation:\fR
.Ip "\f(CWPERL_BADLANG\fR" 15
.IX Item "\f(CWPERL_BADLANG\fR"
may be needed if you change your codepage \fIafter\fR perl installation,
and the new value is not supported by \fB\s-1EMX\s0\fR. See the section on \fI\s-1PERL_BADLANG\s0\fR.
.Ip "\f(CWPERL_BADFREE\fR" 15
.IX Item "\f(CWPERL_BADFREE\fR"
see the section on \fI\s-1PERL_BADFREE\s0\fR.
.Ip "\fIConfig.pm\fR" 15
.IX Item "\fIConfig.pm\fR"
This file resides somewhere deep in the location you installed your
perl library, find it out by 
.Sp
.Vb 1
\&  perl -MConfig -le "print $INC{'Config.pm'}"
.Ve
While most important values in this file \fIare\fR updated by the binary
installer, some of them may need to be hand-edited. I know no such
data, please keep me informed if you find one.
.Sh "Manual binary installation"
.IX Subsection "Manual binary installation"
As of version 5.00305, \s-1OS/2\s0 perl binary distribution comes splitted
into 11 components. Unfortunately, to enable configurable binary
installation, the file paths in the \f(CWzip\fR files are not absolute, but
relative to some directory.
.PP
Note that the extraction with the stored paths is still necessary
(default with \f(CWunzip\fR, specify \f(CW-d\fR to \f(CWpkunzip\fR). However, you
need to know where to extract the files. You need also to manually
change entries in \fIConfig.sys\fR to reflect where did you put the
files. 
.PP
Below is the sample of what to do to reproduce the configuration on my
machine:
.Ip "Perl \s-1VIO\s0 and \s-1PM\s0 executables (dynamically linked)" 3
.IX Item "Perl \s-1VIO\s0 and \s-1PM\s0 executables (dynamically linked)"
.Sp
.Vb 2
\&  unzip perl_exc.zip *.exe *.ico -d f:/emx.add/bin
\&  unzip perl_exc.zip *.dll -d f:/emx.add/dll
.Ve
(have the directories with \f(CW*.exe\fR on \f(CWPATH\fR, and \f(CW*.dll\fR on
\f(CWLIBPATH\fR);
.Ip "Perl_ \s-1VIO\s0 executable (statically linked)" 3
.IX Item "Perl_ \s-1VIO\s0 executable (statically linked)"
.Sp
.Vb 1
\&  unzip perl_aou.zip -d f:/emx.add/bin
.Ve
(have the directory on \f(CWPATH\fR);
.Ip "Executables for Perl utilities" 3
.IX Item "Executables for Perl utilities"
.Sp
.Vb 1
\&  unzip perl_utl.zip -d f:/emx.add/bin
.Ve
(have the directory on \f(CWPATH\fR);
.Ip "Main Perl library" 3
.IX Item "Main Perl library"
.Sp
.Vb 1
\&  unzip perl_mlb.zip -d f:/perllib/lib
.Ve
If this directory is preserved, you do not need to change
anything. However, for perl to find it if it is changed, you need to
\f(CWset PERLLIB_PREFIX\fR in \fIConfig.sys\fR, see the section on \fI\s-1PERLLIB_PREFIX\s0\fR.
.Ip "Additional Perl modules" 3
.IX Item "Additional Perl modules"
.Sp
.Vb 1
\&  unzip perl_ste.zip -d f:/perllib/lib/site_perl
.Ve
If you do not change this directory, do nothing. Otherwise put this
directory and subdirectory \fI./os2\fR in \f(CWPERLLIB\fR or \f(CWPERL5LIB\fR
variable. Do not use \f(CWPERL5LIB\fR unless you have it set already. See
the section on \fI\s-1ENVIRONMENT\s0\fR in the \fIperl\fR manpage. 
.Ip "Tools to compile Perl modules" 3
.IX Item "Tools to compile Perl modules"
.Sp
.Vb 1
\&  unzip perl_blb.zip -d f:/perllib/lib
.Ve
If this directory is preserved, you do not need to change
anything. However, for perl to find it if it is changed, you need to
\f(CWset PERLLIB_PREFIX\fR in \fIConfig.sys\fR, see the section on \fI\s-1PERLLIB_PREFIX\s0\fR.
.Ip "Manpages for Perl and utilities" 3
.IX Item "Manpages for Perl and utilities"
.Sp
.Vb 1
\&  unzip perl_man.zip -d f:/perllib/man
.Ve
This directory should better be on \f(CWMANPATH\fR. You need to have a
working \f(CWman\fR to access these files.
.Ip "Manpages for Perl modules" 3
.IX Item "Manpages for Perl modules"
.Sp
.Vb 1
\&  unzip perl_mam.zip -d f:/perllib/man
.Ve
This directory should better be on \f(CWMANPATH\fR. You need to have a
working \f(CWman\fR to access these files.
.Ip "Source for Perl documentation" 3
.IX Item "Source for Perl documentation"
.Sp
.Vb 1
\&  unzip perl_pod.zip -d f:/perllib/lib
.Ve
This is used by by \f(CWperldoc\fR program (see the \fIperldoc\fR manpage), and may be used to
generate \fB\s-1HTML\s0\fR documentation usable by \s-1WWW\s0 browsers, and
documentation in zillions of other formats: \f(CWinfo\fR, \f(CWLaTeX\fR,
\f(CWAcrobat\fR, \f(CWFrameMaker\fR and so on.
.Ip "Perl manual in .\s-1INF\s0 format" 3
.IX Item "Perl manual in .\s-1INF\s0 format"
.Sp
.Vb 1
\&  unzip perl_inf.zip -d d:/os2/book
.Ve
This directory should better be on \f(CWBOOKSHELF\fR.
.Ip "Pdksh" 3
.IX Item "Pdksh"
.Sp
.Vb 1
\&  unzip perl_sh.zip -d f:/bin
.Ve
This is used by perl to run external commands which explicitely
require shell, like the commands using \fIredirection\fR and \fIshell
metacharacters\fR. It is also used instead of explicit \fI/bin/sh\fR.
.Sp
Set \f(CWPERL_SH_DIR\fR (see the section on \fI\s-1PERL_SH_DIR\s0\fR) if you move \fIsh.exe\fR from
the above location.
.Sp
\fBNote.\fR It may be possible to use some other \f(CWsh\fR\-compatible shell
(\fInot tested\fR).
.PP
After you installed the components you needed and updated the
\fIConfig.sys\fR correspondingly, you need to hand-edit
\fIConfig.pm\fR. This file resides somewhere deep in the location you
installed your perl library, find it out by
.PP
.Vb 1
\&  perl -MConfig -le "print $INC{'Config.pm'}"
.Ve
You need to correct all the entries which look like file paths (they
currently start with \f(CWf:/\fR).
.Sh "\fBWarning\fR"
.IX Subsection "\fBWarning\fR"
The automatic and manual perl installation leave precompiled paths
inside perl executables. While these paths are overwriteable (see
the section on \fI\s-1PERLLIB_PREFIX\s0\fR, the section on \fI\s-1PERL_SH_DIR\s0\fR), one may get better results by
binary editing of paths inside the executables/DLLs.
.SH "Accessing documentation"
.IX Header "Accessing documentation"
Depending on how you built/installed perl you may have (otherwise
identical) Perl documentation in the following formats:
.Sh "\s-1OS/2\s0 \fI.\s-1INF\s0\fR file"
.IX Subsection "\s-1OS/2\s0 \fI.\s-1INF\s0\fR file"
Most probably the most convinient form. View it as
.PP
.Vb 4
\&  view perl
\&  view perl perlfunc
\&  view perl less
\&  view perl ExtUtils::MakeMaker
.Ve
(currently the last two may hit a wrong location, but this may improve
soon).
.PP
If you want to build the docs yourself, and have \fI\s-1OS/2\s0 toolkit\fR, run
.PP
.Vb 1
\&        pod2ipf > perl.ipf
.Ve
in \fI/perllib/lib/pod\fR directory, then
.PP
.Vb 1
\&        ipfc /inf perl.ipf
.Ve
(Expect a lot of errors during the both steps.) Now move it on your
\s-1BOOKSHELF\s0 path.
.Sh "Plain text"
.IX Subsection "Plain text"
If you have perl documentation in the source form, perl utilities
installed, and \fB\s-1GNU\s0\fR \f(CWgroff\fR installed, you may use 
.PP
.Vb 3
\&        perldoc perlfunc
\&        perldoc less
\&        perldoc ExtUtils::MakeMaker
.Ve
to access the perl documention in the text form (note that you may get
better results using perl manpages).
.PP
Alternately, try running pod2text on \fI.pod\fR files.
.Sh "Manpages"
.IX Subsection "Manpages"
If you have \f(CWman\fR installed on your system, and you installed perl
manpages, use something like this:
.PP
.Vb 3
\&        man perlfunc
\&        man 3 less
\&        man ExtUtils.MakeMaker
.Ve
to access documentation for different components of Perl. Start with
.PP
.Vb 1
\&        man perl
.Ve
Note that dot (\fI.\fR) is used as a package separator for documentation
for packages, and as usual, sometimes you need to give the section \- \f(CW3\fR
above \- to avoid shadowing by the \fIless(1) manpage\fR.
.PP
Make sure that the directory \fBabove\fR the directory with manpages is
on our \f(CWMANPATH\fR, like this
.PP
.Vb 1
\&  set MANPATH=c:/man;f:/perllib/man
.Ve
.Sh "\fB\s-1HTML\s0\fR"
.IX Subsection "\fB\s-1HTML\s0\fR"
If you have some \s-1WWW\s0 browser available, installed the Perl
documentation in the source form, and Perl utilities, you can build
\fB\s-1HTML\s0\fR docs. Cd to directory with \fI.pod\fR files, and do like this
.PP
.Vb 2
\&        cd f:/perllib/lib/pod
\&        pod2html
.Ve
After this you can direct your browser the file \fIperl.html\fR in this
directory, and go ahead with reading docs, like this:
.PP
.Vb 1
\&        explore file:///f:/perllib/lib/pod/perl.html
.Ve
Alternatively you may be able to get these docs prebuild from \f(CWCPAN\fR.
.Sh "\fB\s-1GNU\s0\fR \f(CWinfo\fR files"
.IX Subsection "\fB\s-1GNU\s0\fR \f(CWinfo\fR files"
Users of \f(CWEmacs\fR would appreciate it very much, especially with
\f(CWCPerl\fR mode loaded. You need to get latest \f(CWpod2info\fR from \f(CWCPAN\fR,
or, alternately, prebuilt info pages.
.Sh "\fI.\s-1PDF\s0\fR files"
.IX Subsection "\fI.\s-1PDF\s0\fR files"
for \f(CWAcrobat\fR are available on \s-1CPAN\s0 (for slightly old version of
perl).
.Sh "\f(CWLaTeX\fR docs"
.IX Subsection "\f(CWLaTeX\fR docs"
can be constructed using \f(CWpod2latex\fR.
.SH "BUILD"
.IX Header "BUILD"
Here we discuss how to build Perl under OS/2. There is an alternative
(but maybe older) view on the section on \fI/www.shadow.net/~troc/os2perl.html\fR in the \fIhttp:\fR manpage.
.Sh "Prerequisites"
.IX Subsection "Prerequisites"
You need to have the latest \fB\s-1EMX\s0\fR development environment, the full
\fB\s-1GNU\s0\fR tool suite (\f(CWgawk\fR renamed to \f(CWawk\fR, and \fB\s-1GNU\s0\fR \fIfind.exe\fR
earlier on path than the \s-1OS/2\s0 \fIfind.exe\fR, same with \fIsort.exe\fR, to
check use
.PP
.Vb 2
\&  find --version
\&  sort --version
.Ve
). You need the latest version of \fIpdksh\fR installed as \fIsh.exe\fR.
.PP
Possible locations to get this from are
.PP
.Vb 4
\&  ftp://hobbes.nmsu.edu/os2/unix/gnu/
\&  ftp://ftp.cdrom.com/pub/os2/unix/
\&  ftp://ftp.cdrom.com/pub/os2/dev32/
\&  ftp://ftp.cdrom.com/pub/os2/emx0.9c/
.Ve
Make sure that no copies or perl are currently running.  Later steps
of the build may fail since an older version of perl.dll loaded into
memory may be found. 
.PP
Also make sure that you have \fI/tmp\fR directory on the current drive,
and \fI.\fR directory in your \f(CWLIBPATH\fR. One may try to correct the
latter condition by
.PP
.Vb 1
\&  set BEGINLIBPATH .
.Ve
if you use something like \fI\s-1CMD\s0.\s-1EXE\s0\fR or latest versions of \fI4os2.exe\fR.
.PP
Make sure your \f(CWgcc\fR is good for \f(CW-Zomf\fR linking: run \f(CWomflibs\fR
script in \fI/emx/lib\fR directory.
.PP
Check that you have \f(CWlink386\fR installed. It comes standard with \s-1OS/2\s0,
but may be not installed due to customization. If typing
.PP
.Vb 1
\&  link386
.Ve
shows you do not have it, do \fISelective install\fR, and choose \f(CWLink
object modules\fR in \fIOptional system utilites/More\fR. If you get into
\f(CWlink386\fR, press \f(CWCtrl-C\fR.
.Sh "Getting perl source"
.IX Subsection "Getting perl source"
You need to fetch the latest perl source (including developpers
releases). With some probability it is located in 
.PP
.Vb 2
\&  http://www.perl.com/CPAN/src/5.0
\&  http://www.perl.com/CPAN/src/5.0/unsupported
.Ve
If not, you may need to dig in the indices to find it in the directory
of the current maintainer.
.PP
Quick cycle of developpers release may break the \s-1OS/2\s0 build time to
time, looking into 
.PP
.Vb 1
\&  http://www.perl.com/CPAN/ports/os2/ilyaz/
.Ve
may indicate the latest release which was publicly released by the
maintainer. Note that the release may include some additional patches
to apply to the current source of perl.
.PP
Extract it like this
.PP
.Vb 1
\&  tar vzxf perl5.00409.tar.gz
.Ve
You may see a message about errors while extracting \fIConfigure\fR. This is
because there is a conflict with a similarly-named file \fIconfigure\fR.
.PP
Rename \fIconfigure\fR to \fIconfigure.gnu\fR. Extract \fIConfigure\fR like this
.PP
.Vb 1
\&  tar --case-sensitive -vzxf perl5.00409.tar.gz perl5.00409/Configure
.Ve
Change to the directory of extraction.
.Sh "Application of the patches"
.IX Subsection "Application of the patches"
You need to apply the patches in \fI./os2/diff.*\fR and
\fI./os2/\s-1POSIX\s0.mkfifo\fR like this:
.PP
.Vb 2
\&  gnupatch -p0 < os2\ePOSIX.mkfifo
\&  gnupatch -p0 < os2\eos2\ediff.configure
.Ve
You may also need to apply the patches supplied with the binary
distribution of perl.
.PP
Note also that the \fIdb.lib\fR and \fIdb.a\fR from the \fB\s-1EMX\s0\fR distribution
are not suitable for multi-threaded compile (note that currently perl
is not multithreaded, but is compiled as multithreaded for
compatibility with \fBXFree86\fR\-\s-1OS/2\s0). Get a corrected one from
.PP
.Vb 1
\&  ftp://ftp.math.ohio-state.edu/pub/users/ilya/os2/db_mt.zip
.Ve
.Sh "Hand-editing"
.IX Subsection "Hand-editing"
You may look into the file \fI./hints/os2.sh\fR and correct anything
wrong you find there. I do not expect it is needed anywhere.
.Sh "Making"
.IX Subsection "Making"
.PP
.Vb 1
\&  sh Configure -des -D prefix=f:/perllib
.Ve
Prefix means where to install the resulting perl library. Giving
correct prefix you may avoid the need to specify \f(CWPERLLIB_PREFIX\fR,
see the section on \fI\s-1PERLLIB_PREFIX\s0\fR.
.PP
\fIIgnore the message about missing \f(CWln\fR, and about \f(CW-c\fR option to
\f(CWtr\fR\fR. In fact if you can trace where the latter spurious warning
comes from, please inform me.
.PP
Now
.PP
.Vb 1
\&  make
.Ve
At some moment the built may die, reporting a \fIversion mismatch\fR or
\fIunable to run \fIperl\fR\fR. This means that most of the build has been
finished, and it is the time to move the constructed \fIperl.dll\fR to
some \fIabsolute\fR location in \f(CWLIBPATH\fR. After this done the build
should finish without a lot of fuss. \fIOne can avoid it if one has the
correct prebuilt version of \fIperl.dll\fR on \f(CWLIBPATH\fR.\fR
.PP
Warnings which are safe to ignore: \fImkfifo() redefined\fR inside
\fI\s-1POSIX\s0.c\fR.
.Sh "Testing"
.IX Subsection "Testing"
Now run
.PP
.Vb 1
\&  make test
.Ve
Some tests (4..6) should fail. Some perl invocations should end in a
segfault (system error \f(CWSYS3175\fR). To get finer error reports, 
.PP
.Vb 2
\&  cd t
\&  perl -I ../lib harness
.Ve
The report you get may look like
.PP
.Vb 7
\&  Failed Test  Status Wstat Total Fail  Failed  List of failed
\&  ---------------------------------------------------------------
\&  io/fs.t                      26   11  42.31%  2-5, 7-11, 18, 25
\&  lib/io_pipe.t     3   768     6   ??       %  ??
\&  lib/io_sock.t     3   768     5   ??       %  ??
\&  op/stat.t                    56    5   8.93%  3-4, 20, 35, 39
\&  Failed 4/118 test scripts, 96.61% okay. 27/2445 subtests failed, 98.90% okay.
.Ve
Note that using `make test\*(R' target two more tests may fail: \f(CWop/exec:1\fR
because of (mis)feature of \f(CWpdksh\fR, and \f(CWlib/posix:15\fR, which checks
that the buffers are not flushed on \f(CW_exit\fR.
.PP
The reasons for failed tests are:
.Ip "\fIio/fs.t\fR" 8
.IX Item "\fIio/fs.t\fR"
Checks \fIfile system\fR operations. Tests:
.Ip "2-5, 7-11" 18
.IX Item "2-5, 7-11"
Check \f(CWlink()\fR and \f(CWinode count\fR \- nonesuch under \s-1OS/2\s0.
.Ip "18" 18
.IX Item "18"
Checks \f(CWatime\fR and \f(CWmtime\fR of \f(CWstat()\fR \- I could not understand this test.
.Ip "25" 18
.IX Item "25"
Checks \f(CWtruncate()\fR on a filehandle just opened for write \- I do not
know why this should or should not work.
.Ip "\fIlib/io_pipe.t\fR" 8
.IX Item "\fIlib/io_pipe.t\fR"
Checks \f(CWIO::Pipe\fR module. Some feature of \fB\s-1EMX\s0\fR \- test \fIfork()\fRs with
dynamic extension loaded \- unsupported now.
.Ip "\fIlib/io_sock.t\fR" 8
.IX Item "\fIlib/io_sock.t\fR"
Checks \f(CWIO::Socket\fR module. Some feature of \fB\s-1EMX\s0\fR \- test \fIfork()\fRs
with dynamic extension loaded \- unsupported now.
.Ip "\fIop/stat.t\fR" 8
.IX Item "\fIop/stat.t\fR"
Checks \f(CWstat()\fR. Tests:
.Ip "3" 12
.IX Item "3"
Checks \f(CWinode count\fR \- nonesuch under \s-1OS/2\s0.
.Ip "4" 12
.IX Item "4"
Checks \f(CWmtime\fR and \f(CWctime\fR of \f(CWstat()\fR \- I could not understand this test.
.Ip "20" 12
.IX Item "20"
Checks \f(CW-x\fR \- determined by the file extension only under \s-1OS/2\s0.
.Ip "35" 12
.IX Item "35"
Needs \fI/usr/bin\fR.
.Ip "39" 12
.IX Item "39"
Checks \f(CW-t\fR of \fI/dev/null\fR. Should not fail!
.PP
In addition to errors, you should get a lot of warnings. 
.Ip "A lot of `bad free\*(R'" 4
.IX Item "A lot of `bad free\*(R'"
in databases related to Berkeley \s-1DB\s0. This is a confirmed bug of
\s-1DB\s0. You may disable this warnings, see the section on \fI\s-1PERL_BADFREE\s0\fR.
.Ip "Process terminated by \s-1SIGTERM/SIGINT\s0" 4
.IX Item "Process terminated by \s-1SIGTERM/SIGINT\s0"
This is a standard message issued by \s-1OS/2\s0 applications. *nix
applications die in silence. It is considered a feature. One can
easily disable this by appropriate sighandlers. 
.Sp
However the test engine bleeds these message to screen in unexpected
moments. Two messages of this kind \fIshould\fR be present during
testing.
.Ip "\fI*/sh.exe\fR: ln: not found" 4
.IX Item "\fI*/sh.exe\fR: ln: not found"
.Ip "\f(CWls\fR: /dev: No such file or directory" 4
.IX Item "\f(CWls\fR: /dev: No such file or directory"
The last two should be self-explanatory. The test suite discovers that
the system it runs on is not \fIthat much\fR *nixish.
.PP
A lot of `bad free\*(R'... in databases, bug in \s-1DB\s0 confirmed on other
platforms. You may disable it by setting \s-1PERL_BADFREE\s0 environment variable
to 1.
.Sh "Installing the built perl"
.IX Subsection "Installing the built perl"
Run
.PP
.Vb 1
\&  make install
.Ve
It would put the generated files into needed locations. Manually put
\fIperl.exe\fR, \fIperl_\|_.exe\fR and \fIperl_\|__.exe\fR to a location on your
\f(CWPATH\fR, \fIperl.dll\fR to a location on your \f(CWLIBPATH\fR.
.PP
Run
.PP
.Vb 1
\&  make cmdscripts INSTALLCMDDIR=d:/ir/on/path
.Ve
to convert perl utilities to \fI.cmd\fR files and put them on
\f(CWPATH\fR. You need to put \fI.\s-1EXE\s0\fR\-utilities on path manually. They are
installed in \f(CW$prefix/bin\fR, here \f(CW$prefix\fR is what you gave to
\fIConfigure\fR, see the \fIMaking\fR manpage.
.Sh "\f(CWa.out\fR\-style build"
.IX Subsection "\f(CWa.out\fR\-style build"
Proceed as above, but make \fIperl_.exe\fR (see the section on \fIperl_.exe\fR) by
.PP
.Vb 1
\&  make perl_
.Ve
test and install by
.PP
.Vb 2
\&  make aout_test
\&  make aout_install
.Ve
Manually put \fIperl_.exe\fR to a location on your \f(CWPATH\fR.
.PP
Since \f(CWperl_\fR has the extensions prebuilt, it does not suffer from
the \fIdynamic extensions + fork()\fR syndrom, thus the failing tests
look like
.PP
.Vb 5
\&  Failed Test  Status Wstat Total Fail  Failed  List of failed
\&  ---------------------------------------------------------------
\&  io/fs.t                      26   11  42.31%  2-5, 7-11, 18, 25
\&  op/stat.t                    56    5   8.93%  3-4, 20, 35, 39
\&  Failed 2/118 test scripts, 98.31% okay. 16/2445 subtests failed, 99.35% okay.
.Ve
\fBNote.\fR The build process for \f(CWperl_\fR \fIdoes not know\fR about all the
dependencies, so you should make sure that anything is up-to-date,
say, by doing
.PP
.Vb 1
\&  make perl.dll
.Ve
first.
.SH "Build FAQ"
.IX Header "Build FAQ"
.Sh "Some \f(CW/\fR became \f(CW\e\fR in pdksh."
.IX Subsection "Some \f(CW/\fR became \f(CW\e\fR in pdksh."
You have a very old pdksh. See the \fIPrerequisites\fR manpage.
.Sh "\f(CW'errno'\fR \- unresolved external"
.IX Subsection "\f(CW'errno'\fR \- unresolved external"
You do not have \s-1MT\s0\-safe \fIdb.lib\fR. See the \fIPrerequisites\fR manpage.
.Sh "Problems with \f(CWtr\fR"
.IX Subsection "Problems with \f(CWtr\fR"
reported with very old version of \f(CWtr\fR.
.Sh "Some problem (forget which ;\-)"
.IX Subsection "Some problem (forget which ;\-)"
You have an older version of \fIperl.dll\fR on your \f(CWLIBPATH\fR, which
broke the build of extensions.
.Sh "Library ... not found"
.IX Subsection "Library ... not found"
You did not run \f(CWomflibs\fR. See the \fIPrerequisites\fR manpage.
.Sh "Segfault in make"
.IX Subsection "Segfault in make"
You use an old version of \f(CWGNU\fR make. See the \fIPrerequisites\fR manpage.
.SH "Specific (mis)features of OS/2 port"
.IX Header "Specific (mis)features of OS/2 port"
.Sh "\f(CWsetpriority\fR, \f(CWgetpriority\fR"
.IX Subsection "\f(CWsetpriority\fR, \f(CWgetpriority\fR"
Note that these functions are compatible with *nix, not with the older
ports of \*(L'94 \- 95. The priorities are absolute, go from 32 to \-95,
lower is quickier. 0 is the default priority.
.Sh "\f(CWsystem()\fR"
.IX Subsection "\f(CWsystem()\fR"
Multi-argument form of \f(CWsystem()\fR allows an additional numeric
argument. The meaning of this argument is described in
the \fI\s-1OS2::\s0Process\fR manpage.
.Sh "Additional modules:"
.IX Subsection "Additional modules:"
the \fI\s-1OS2::\s0Process\fR manpage, the \fI\s-1OS2::REXX\s0\fR manpage, the \fI\s-1OS2::\s0PrfDB\fR manpage, the \fI\s-1OS2::\s0ExtAttr\fR manpage. This
modules provide access to additional numeric argument for \f(CWsystem\fR,
to DLLs having functions with \s-1REXX\s0 signature and to \s-1REXX\s0 runtime, to
\s-1OS/2\s0 databases in the \fI.\s-1INI\s0\fR format, and to Extended Attributes.
.PP
Two additional extensions by Andread Kaiser, \f(CWOS2::UPM\fR, and
\f(CWOS2::FTP\fR, are included into my ftp directory, mirrored on \s-1CPAN\s0.
.Sh "Prebuilt methods:"
.IX Subsection "Prebuilt methods:"
.Ip "\f(CWFile::Copy::syscopy\fR" 4
.IX Item "\f(CWFile::Copy::syscopy\fR"
used by \f(CWFile::Copy::copy\fR, see the \f(CWcopy\fR entry in the \fIFile::Copy\fR manpage.
.Ip "\f(CWDynaLoader::mod2fname\fR" 4
.IX Item "\f(CWDynaLoader::mod2fname\fR"
used by \f(CWDynaLoader\fR for \s-1DLL\s0 name mungling.
.Ip "\f(CWCwd::current_drive()\fR" 4
.IX Item "\f(CWCwd::current_drive()\fR"
Self explanatory.
.Ip "\f(CWCwd::sys_chdir(name)\fR" 4
.IX Item "\f(CWCwd::sys_chdir(name)\fR"
leaves drive as it is.
.Ip "\f(CWCwd::change_drive(name)\fR" 4
.IX Item "\f(CWCwd::change_drive(name)\fR"
.Ip "\f(CWCwd::sys_is_absolute(name)\fR" 4
.IX Item "\f(CWCwd::sys_is_absolute(name)\fR"
means has drive letter and is_rooted.
.Ip "\f(CWCwd::sys_is_rooted(name)\fR" 4
.IX Item "\f(CWCwd::sys_is_rooted(name)\fR"
means has leading \f(CW[/\e\e]\fR (maybe after a drive-letter:).
.Ip "\f(CWCwd::sys_is_relative(name)\fR" 4
.IX Item "\f(CWCwd::sys_is_relative(name)\fR"
means changes with current dir.
.Ip "\f(CWCwd::sys_cwd(name)\fR" 4
.IX Item "\f(CWCwd::sys_cwd(name)\fR"
Interface to cwd from \fB\s-1EMX\s0\fR. Used by \f(CWCwd::cwd\fR.
.Ip "\f(CWCwd::sys_abspath(name, dir)\fR" 4
.IX Item "\f(CWCwd::sys_abspath(name, dir)\fR"
Really really odious function to implement. Returns absolute name of
file which would have \f(CWname\fR if \s-1CWD\s0 were \f(CWdir\fR.  \f(CWDir\fR defaults to the
current dir.
.Ip "C<Cwd::extLibpath([type])" 4
.IX Item "C<Cwd::extLibpath([type])"
Get current value of extended library search path. If \f(CWtype\fR is
present and \fItrue\fR, works with \s-1END_LIBPATH\s0, otherwise with
\f(CWBEGIN_LIBPATH\fR. 
.Ip "\f(CWCwd::extLibpath_set( path [, type ] )\fR" 4
.IX Item "\f(CWCwd::extLibpath_set( path [, type ] )\fR"
Set current value of extended library search path. If \f(CWtype\fR is
present and \fItrue\fR, works with \s-1END_LIBPATH\s0, otherwise with
\f(CWBEGIN_LIBPATH\fR. 
.PP
(Note that some of these may be moved to different libraries \-
eventually).
.Sh "Misfeatures"
.IX Subsection "Misfeatures"
.Ip "" 4
.IX Item ""
Since <lockf> is present in \fB\s-1EMX\s0\fR, but is not functional, the same is
true for perl.
.Ip "" 4
.IX Item ""
Since \fIsh.exe\fR is used for globbing (see the \f(CWglob\fR entry in the \fIperlfunc\fR manpage), the bugs
of \fIsh.exe\fR plague perl as well. 
.Sp
In particular, uppercase letters do not work in \f(CW[...]\fR\-patterns with
the current \f(CWpdksh\fR.
.SH "Perl flavors"
.IX Header "Perl flavors"
Because of ideosyncrasies of OS/2 one cannot have all the eggs in the
same basket (though \f(CWEMX\fR environment tries hard to overcome this
limitations, so the situation may somehow improve). There are 4
executables for Perl provided by the distribution:
.Sh "\fIperl.exe\fR"
.IX Subsection "\fIperl.exe\fR"
The main workhorse. This is a chimera executable: it is compiled as an
\f(CWa.out\fR\-style executable, but is linked with \f(CWomf\fR\-style dynamic
library \fIperl.dll\fR, and with dynamic \fB\s-1CRT\s0\fR \s-1DLL\s0. This executable is a
\f(CWVIO\fR application.
.PP
It can load perl dynamic extensions, and it can \fIfork()\fR. Unfortunately,
currently it cannot \fIfork()\fR with dynamic extensions loaded.
.PP
\fBNote.\fR Keep in mind that \fIfork()\fR is needed to open a pipe to yourself.
.Sh "\fIperl_.exe\fR"
.IX Subsection "\fIperl_.exe\fR"
This is a statically linked \f(CWa.out\fR\-style executable. It can \fIfork()\fR,
but cannot load dynamic Perl extensions. The supplied executable has a
lot of extensions prebuilt, thus there are situations when it can
perform tasks not possible using \fIperl.exe\fR, like \fIfork()\fRing when
having some standard extension loaded. This executable is a \f(CWVIO\fR
application.
.PP
\fBNote.\fR A better behaviour could be obtained from \f(CWperl.exe\fR if it
were statically linked with standard \fIPerl extensions\fR, but
dynamically linked with the \fIPerl \s-1DLL\s0\fR and \f(CWCRT\fR \s-1DLL\s0. Then it would
be able to \fIfork()\fR with standard extensions, \fIand\fR would be able to
dynamically load arbitrary extensions. Some changes to Makefiles and
hint files should be necessary to achieve this.
.PP
\fIThis is also the only executable with does not require \s-1OS/2\s0.\fR The
friends locked into \f(CWM$\fR world would appreciate the fact that this
executable runs under \s-1DOS\s0, Win0.31, Win0.95 and WinNT with an
appropriate extender. See the section on \fIOther OSes\fR.
.Sh "\fIperl_\|_.exe\fR"
.IX Subsection "\fIperl_\|_.exe\fR"
This is the same executable as <perl_\|__.exe>, but it is a \f(CWPM\fR
application. 
.PP
\fBNote.\fR Usually \f(CWSTDIN\fR, \f(CWSTDERR\fR, and \f(CWSTDOUT\fR of a \f(CWPM\fR
application are redirected to \f(CWnul\fR. However, it is possible to see
them if you start \f(CWperl__.exe\fR from a \s-1PM\s0 program which emulates a
console window, like \fIShell mode\fR of \f(CWEmacs\fR or \f(CWEPM\fR. Thus it \fIis
possible\fR to use Perl debugger (see the \fIperldebug\fR manpage) to debug your \s-1PM\s0
application.
.PP
This flavor is required if you load extensions which use \f(CWPM\fR, like
the forthcoming \f(CWPerl/Tk\fR.
.Sh "\fIperl_\|__.exe\fR"
.IX Subsection "\fIperl_\|__.exe\fR"
This is an \f(CWomf\fR\-style executable which is dynamically linked to
\fIperl.dll\fR and \f(CWCRT\fR \s-1DLL\s0. I know no advantages of this executable
over \f(CWperl.exe\fR, but it cannot \fIfork()\fR at all. Well, one advantage is
that the build process is not so convoluted as with \f(CWperl.exe\fR.
.PP
It is a \f(CWVIO\fR application.
.Sh "Why strange names?"
.IX Subsection "Why strange names?"
Since Perl processes the \f(CW#!\fR\-line (cf. 
the \f(CWDESCRIPTION\fR entry in the \fIperlrun\fR manpage, the \f(CWSwitches\fR entry in the \fIperlrun\fR manpage,
the section on \fINot a perl script\fR in the \fIperldiag\fR manpage, 
the section on \fINo Perl script found in input\fR in the \fIperldiag\fR manpage), it should know when a
program \fIis a Perl\fR. There is some naming convention which allows
Perl to distinguish correct lines from wrong ones. The above names are
almost the only names allowed by this convension which do not contain
digits (which have absolutely different semantics).
.Sh "Why dynamic linking?"
.IX Subsection "Why dynamic linking?"
Well, having several executables dynamically linked to the same huge
library has its advantages, but this would not substantiate the
additional work to make it compile. The reason is stupid-but-quick
\*(L"hard\*(R" dynamic linking used by \s-1OS/2\s0.
.PP
The address tables of DLLs are patches only once, when they are
loaded. The addresses of entry points into DLLs are guarantied to be
the same for all programs which use the same \s-1DLL\s0, which reduces the
amount of runtime patching \- once \s-1DLL\s0 is loaded, its code is
read-only.
.PP
While this allows some performance advantages, this makes life
terrible for developpers, since the above scheme makes it impossible
for a \s-1DLL\s0 to be resolved to a symbol in the .\s-1EXE\s0 file, since this
would need a \s-1DLL\s0 to have different relocations tables for the
executables which use it.
.PP
However, a Perl extension is forced to use some symbols from the perl
executable, say to know how to find the arguments provided on the perl
internal evaluation stack. The solution is that the main code of
interpreter should be contained in a \s-1DLL\s0, and the \fI.\s-1EXE\s0\fR file just loads
this \s-1DLL\s0 into memory and supplies command-arguments.
.PP
This \fIgreately\fR increases the load time for the application (as well as
the number of problems during compilation). Since interpreter is in a \s-1DLL\s0,
the \f(CWCRT\fR is basically forced to reside in a \s-1DLL\s0 as well (otherwise
extensions would not be able to use \f(CWCRT\fR).
.Sh "Why chimera build?"
.IX Subsection "Why chimera build?"
Current \f(CWEMX\fR environment does not allow DLLs compiled using Unixish
\f(CWa.out\fR format to export symbols for data. This forces \f(CWomf\fR\-style
compile of \fIperl.dll\fR.
.PP
Current \f(CWEMX\fR environment does not allow \fI.\s-1EXE\s0\fR files compiled in
\f(CWomf\fR format to \fIfork()\fR. \fIfork()\fR is needed for exactly three Perl
operations:
.Ip "explicit fork()" 4
.IX Item "explicit fork()"
in the script, and
.Ip "open \s-1FH\s0, \*(L"|\-\*(R"" 4
.IX Item "open \s-1FH\s0, \*(L"|\-\*(R""
.Ip "open \s-1FH\s0, \*(L"\-|\*(R"" 4
.IX Item "open \s-1FH\s0, \*(L"\-|\*(R""
opening pipes to itself.
.PP
While these operations are not questions of life and death, a lot of
useful scripts use them. This forces \f(CWa.out\fR\-style compile of
\fIperl.exe\fR.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Here we list environment variables with are either OS/2-specific, or
are more important under OS/2 than under other OSes.
.Sh "\f(CWPERLLIB_PREFIX\fR"
.IX Subsection "\f(CWPERLLIB_PREFIX\fR"
Specific for \s-1OS/2\s0. Should have the form
.PP
.Vb 1
\&  path1;path2
.Ve
or
.PP
.Vb 1
\&  path1 path2
.Ve
If the beginning of some prebuilt path matches \fIpath1\fR, it is
substituted with \fIpath2\fR.
.PP
Should be used if the perl library is moved from the default
location in preference to \f(CWPERL(5)LIB\fR, since this would not leave wrong
entries in <@\s-1INC\s0>. 
.Sh "\f(CWPERL_BADLANG\fR"
.IX Subsection "\f(CWPERL_BADLANG\fR"
If 1, perl ignores \fIsetlocale()\fR failing. May be useful with some
strange \fIlocale\fRs.
.Sh "\f(CWPERL_BADFREE\fR"
.IX Subsection "\f(CWPERL_BADFREE\fR"
If 1, perl would not warn of in case of unwarranted \fIfree()\fR. May be
useful in conjunction with the module DB_File, since Berkeley \s-1DB\s0
memory handling code is buggy.
.Sh "\f(CWPERL_SH_DIR\fR"
.IX Subsection "\f(CWPERL_SH_DIR\fR"
Specific for \s-1OS/2\s0. Gives the directory part of the location for
\fIsh.exe\fR.
.Sh "\f(CWTMP\fR or \f(CWTEMP\fR"
.IX Subsection "\f(CWTMP\fR or \f(CWTEMP\fR"
Specific for \s-1OS/2\s0. Used as storage place for temporary files, most
notably \f(CW-e\fR scripts.
.SH "Evolution"
.IX Header "Evolution"
Here we list major changes which could make you by surprise.
.Sh "Priorities"
.IX Subsection "Priorities"
\f(CWsetpriority\fR and \f(CWgetpriority\fR are not compatible with earlier
ports by Andreas Kaiser. See \f(CW"setpriority, getpriority"\fR.
.Sh "\s-1DLL\s0 name mungling"
.IX Subsection "\s-1DLL\s0 name mungling"
With the release 5.003_01 the dynamically loadable libraries
should be rebuilt. In particular, DLLs are now created with the names
which contain a checksum, thus allowing workaround for \s-1OS/2\s0 scheme of
caching DLLs.
.Sh "Threading"
.IX Subsection "Threading"
As of release 5.003_01 perl is linked to multithreaded \f(CWCRT\fR
\s-1DLL\s0. Perl itself is not multithread-safe, as is not perl
\fImalloc()\fR. However, extensions may use multiple thread on their own
risk. 
.PP
Needed to compile \f(CWPerl/Tk\fR for \f(CWXFreeOS/2\fR out-of-the-box.
.Sh "Calls to external programs"
.IX Subsection "Calls to external programs"
Due to a popular demand the perl external program calling has been
changed wrt Andread Kaiser's port.  \fIIf\fR perl needs to call an
external program \fIvia shell\fR, the \fIf:/bin/sh.exe\fR will be called, or
whatever is the override, see the section on \fI\s-1PERL_SH_DIR\s0\fR.
.PP
Thus means that you need to get some copy of a \fIsh.exe\fR as well (I
use one from pdksh). The drive F: above is set up automatically during
the build to a correct value on the builder machine, but is
overridable at runtime,
.PP
\fBReasons:\fR a consensus on \f(CWperl5-porters\fR was that perl should use
one non-overridable shell per platform. The obvious choices for \s-1OS/2\s0
are \fIcmd.exe\fR and \fIsh.exe\fR. Having perl build itself would be impossible
with \fIcmd.exe\fR as a shell, thus I picked up \f(CWsh.exe\fR. Thus assures almost
100% compatibility with the scripts coming from *nix.
.PP
\fBDisadvantages:\fR currently \fIsh.exe\fR of \f(CWpdksh\fR calls external programs
via \fIfork()\fR/\fIexec()\fR, and there is \fIno\fR functioning \fIexec()\fR on
\s-1OS/2\s0. \fIexec()\fR is emulated by \s-1EMX\s0 by asyncroneous call while the caller
waits for child completion (to pretend that the pid did not change). This
means that 1 \fIextra\fR copy of \fIsh.exe\fR is made active via \fIfork()\fR/\fIexec()\fR,
which may lead to some resources taken from the system (even if we do
not count extra work needed for \fIfork()\fRing).
.PP
One can always start \fIcmd.exe\fR explicitely via
.PP
.Vb 1
\&  system 'cmd', '/c', 'mycmd', 'arg1', 'arg2', ...
.Ve
If you need to use \fIcmd.exe\fR, and do not want to hand-edit thousends of your
scripts, the long-term solution proposed on p5-p is to have a directive
.PP
.Vb 1
\&  use OS2::Cmd;
.Ve
which will override \fIsystem()\fR, \fIexec()\fR, \f(CW``\fR, and
\f(CWopen(,'...|')\fR. With current perl you may override only \fIsystem()\fR,
\fIreadpipe()\fR \- the explicit version of \f(CW``\fR, and maybe \fIexec()\fR. The code
will substitute the one-argument call to \fIsystem()\fR by
\f(CWCORE::system('cmd.exe', '/c', shift)\fR.
.PP
If you have some working code for \f(CWOS2::Cmd\fR, please send it to me,
I will include it into distribution. I have no need for such a module, so
cannot test it.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ilya Zakharevich, ilya@math.ohio-state.edu
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\fIperl\fR\|(1).

.rn }` ''
