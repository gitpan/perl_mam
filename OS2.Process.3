.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH OS2::Process 3 "perl 5.005, patch 53" "5/Nov/98" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
OS2::Process \- exports constants for \fIsystem()\fR call on OS2.
.SH "SYNOPSIS"
.PP
.Vb 2
\&    use OS2::Process;
\&    $pid = system(P_PM+P_BACKGROUND, "epm.exe");
.Ve
.SH "DESCRIPTION"
the builtin function \fIsystem()\fR under OS/2 allows an optional first
argument which denotes the mode of the process. Note that this argument is
recognized only if it is strictly numerical.
.PP
You can use either one of the process modes:
.PP
.Vb 5
\&        P_WAIT (0)      = wait until child terminates (default)
\&        P_NOWAIT        = do not wait until child terminates
\&        P_SESSION       = new session
\&        P_DETACH        = detached
\&        P_PM            = PM program
.Ve
and optionally add PM and session option bits:
.PP
.Vb 5
\&        P_DEFAULT (0)   = default
\&        P_MINIMIZE      = minimized
\&        P_MAXIMIZE      = maximized
\&        P_FULLSCREEN    = fullscreen (session only)
\&        P_WINDOWED      = windowed (session only)
.Ve
.Vb 2
\&        P_FOREGROUND    = foreground (if running in foreground)
\&        P_BACKGROUND    = background
.Ve
.Vb 1
\&        P_NOCLOSE       = don't close window on exit (session only)
.Ve
.Vb 3
\&        P_QUOTE         = quote all arguments
\&        P_TILDE         = MKS argument passing convention
\&        P_UNRELATED     = do not kill child when father terminates
.Ve
.Sh "Access to process properties"
Additionaly, subroutines \fImy_type()\fR, \fIprocess_entry()\fR and
\f(CWfile_type(file)\fR, \fIget_title()\fR and \f(CWset_title(newtitle)\fR are implemented.  
\fImy_type()\fR returns the type of the current process (one of 
\*(L"\s-1FS\s0\*(R", \*(L"\s-1DOS\s0\*(R", \*(L"\s-1VIO\s0\*(R", \*(L"\s-1PM\s0\*(R", \*(L"\s-1DETACH\s0\*(R" and \*(L"\s-1UNKNOWN\s0"), or \f(CWundef\fR on error.
.Ip "\f(CWfile_type(file)\fR " 5
returns the type of the executable file \f(CWfile\fR, or
dies on error.  The bits 0-2 of the result contain one of the values
.Ip "\f(CWT_NOTSPEC\fR (0)" 10
Application type is not specified in the executable header. 
.Ip "\f(CWT_NOTWINDOWCOMPAT\fR (1)" 10
Application type is not-window-compatible. 
.Ip "\f(CWT_WINDOWCOMPAT\fR (2)" 10
Application type is window-compatible. 
.Ip "\f(CWT_WINDOWAPI\fR (3)" 10
Application type is window-\s-1API\s0.
.Sp
The remaining bits should be masked with the following values to
determine the type of the executable:
.Ip "\f(CWT_BOUND\fR (8)" 10
Set to 1 if the executable file has been \*(L"bound\*(R" (by the \s-1BIND\s0 command)
as a Family \s-1API\s0 application. Bits 0, 1, and 2 still apply.
.Ip "\f(CWT_DLL\fR (0x10)" 10
Set to 1 if the executable file is a dynamic link library (\s-1DLL\s0)
module. Bits 0, 1, 2, 3, and 5 will be set to 0.
.Ip "\f(CWT_DOS\fR (0x20)" 10
Set to 1 if the executable file is in \s-1PC/DOS\s0 format. Bits 0, 1, 2, 3,
and 4 will be set to 0.
.Ip "\f(CWT_PHYSDRV\fR (0x40)" 10
Set to 1 if the executable file is a physical device driver. 
.Ip "\f(CWT_VIRTDRV\fR (0x80)" 10
Set to 1 if the executable file is a virtual device driver. 
.Ip "\f(CWT_PROTDLL\fR (0x100)" 10
Set to 1 if the executable file is a protected-memory dynamic link
library module.
.Ip "\f(CWT_32BIT\fR (0x4000)" 10
Set to 1 for 32-bit executable files. 
.Sp
\fIfile_type()\fR may croak with one of the strings \f(CW"Invalid EXE
signature"\fR or \f(CW"EXE marked invalid"\fR to indicate typical error
conditions.  If given non-absolute path, will look on \f(CWPATH\fR, will
add extention \fI.exe\fR if no extension is present (add extension \fI.\fR
to suppress).
.Ip "process_entry()" 5
returns a list of the following data:
.Ip "" 10
Title of the process (in the \f(CWCtrl-Esc\fR list);
.Ip "" 10
window handle of switch entry of the process (in the \f(CWCtrl-Esc\fR list);
.Ip "" 10
window handle of the icon of the process;
.Ip "" 10
process handle of the owner of the entry in \f(CWCtrl-Esc\fR list;
.Ip "" 10
process id of the owner of the entry in \f(CWCtrl-Esc\fR list;
.Ip "" 10
session id of the owner of the entry in \f(CWCtrl-Esc\fR list;
.Ip "" 10
whether visible in \f(CWCtrl-Esc\fR list;
.Ip "" 10
whether item cannot be switched to (note that it is not actually
grayed in the \f(CWCtrl-Esc\fR list));
.Ip "" 10
whether participates in jump sequence;
.Ip "" 10
program type.  Possible values are: 
.Sp
.Vb 6
\&     PROG_DEFAULT                       0 
\&     PROG_FULLSCREEN                    1 
\&     PROG_WINDOWABLEVIO                 2 
\&     PROG_PM                            3 
\&     PROG_VDM                           4 
\&     PROG_WINDOWEDVDM                   7 
.Ve
Although there are several other program types for \s-1WIN\s0\-\s-1OS/2\s0 programs,
these do not show up in this field. Instead, the \s-1PROG_VDM\s0 or
\s-1PROG_WINDOWEDVDM\s0 program types are used. For instance, for
\s-1PROG_31_STDSEAMLESSVDM\s0, \s-1PROG_WINDOWEDVDM\s0 is used. This is because all
the \s-1WIN\s0\-\s-1OS/2\s0 programs run in \s-1DOS\s0 sessions. For example, if a program
is a windowed \s-1WIN\s0\-\s-1OS/2\s0 program, it runs in a \s-1PROG_WINDOWEDVDM\s0
session. Likewise, if it's a full-screen \s-1WIN\s0\-\s-1OS/2\s0 program, it runs in
a \s-1PROG_VDM\s0 session.
.Ip "\f(CWset_title(newtitle)\fR " 5
- does not work with some windows (if the title is set from the start).  
This is a limitation of \s-1OS/2\s0, in such a case $^E is set to 372 (type
.Sp
.Vb 1
\&  help 372
.Ve
for a funny \- and wrong  \- explanation ;\-).
.Ip "get_title() " 5
is a shortcut implemented via \fIprocess_entry()\fR.
.SH "AUTHOR"
Andreas Kaiser <ak@ananke.s.bawue.de>, 
Ilya Zakharevich <ilya@math.ohio-state.edu>.
.SH "SEE ALSO"
\f(CWspawn*\fR() system calls.

.rn }` ''
.IX Title "OS2::Process 3"
.IX Name "OS2::Process - exports constants for system() call on OS2."

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Subsection "Access to process properties"

.IX Item "\f(CWfile_type(file)\fR "

.IX Item "\f(CWT_NOTSPEC\fR (0)"

.IX Item "\f(CWT_NOTWINDOWCOMPAT\fR (1)"

.IX Item "\f(CWT_WINDOWCOMPAT\fR (2)"

.IX Item "\f(CWT_WINDOWAPI\fR (3)"

.IX Item "\f(CWT_BOUND\fR (8)"

.IX Item "\f(CWT_DLL\fR (0x10)"

.IX Item "\f(CWT_DOS\fR (0x20)"

.IX Item "\f(CWT_PHYSDRV\fR (0x40)"

.IX Item "\f(CWT_VIRTDRV\fR (0x80)"

.IX Item "\f(CWT_PROTDLL\fR (0x100)"

.IX Item "\f(CWT_32BIT\fR (0x4000)"

.IX Item "process_entry()"

.IX Item ""

.IX Item ""

.IX Item ""

.IX Item ""

.IX Item ""

.IX Item ""

.IX Item ""

.IX Item ""

.IX Item ""

.IX Item ""

.IX Item "\f(CWset_title(newtitle)\fR "

.IX Item "get_title() "

.IX Header "AUTHOR"

.IX Header "SEE ALSO"

