.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH DUMPER 1 "perl 5.003, patch 93" "7/Dec/96" "User Contributed Perl Documentation"
.IX Title "DUMPER 1"
.UC
.IX Name "Data::Dumper - stringified perl data structures, suitable for both printing and C<eval>"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
Data::Dumper \- stringified perl data structures, suitable for both printing and \f(CWeval\fR
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 1
\&    use Data::Dumper;
.Ve
.Vb 2
\&    # simple procedural interface
\&    print Dumper($foo, $bar);
.Ve
.Vb 2
\&    # extended usage with names
\&    print Data::Dumper->Dump([$foo, $bar], [qw(foo *ary)]);
.Ve
.Vb 5
\&    # configuration variables
\&    {
\&      local $Data::Dump::Purity = 1;
\&      eval Data::Dumper->Dump([$foo, $bar], [qw(foo *ary)]);
\&    }
.Ve
.Vb 9
\&    # OO usage
\&    $d = Data::Dumper->new([$foo, $bar], [qw(foo *ary)]);
\&       ...
\&    print $d->Dump;
\&       ...
\&    $d->Purity(1);
\&    $d->Terse(1);
\&    $d->Deepcopy(1);
\&    eval $d->Dump;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Given a list of scalars or reference variables, writes out their contents in
perl syntax. The references can also be objects.  The contents of each
variable is output in a single Perl statement.
.PP
The return value can be \f(CWeval\fRed to get back the original reference
structure. Bear in mind that a reference so created will not preserve
pointer equalities with the original reference.
.PP
Handles self-referential structures correctly.  Any references that are the
same as one of those passed in will be marked \f(CW$VAR\fR\fIn\fR (where \fIn\fR is a
numeric suffix), and other duplicate references to substructures within 
\f(CW$VAR\fR\fIn\fR will be appropriately labeled using arrow notation.  You can
specify names for individual values to be dumped if you use the \f(CWDump()\fR
method, or you can change the default \f(CW$VAR\fR prefix to something else.  See
the section on \fI$Data::Dumper::Varname\fR and the section on \fI$Data::Dumper::Terse\fR below.
.PP
The default output of self-referential structures can be \f(CWeval\fRed, but the
nested references to \f(CW$VAR\fR\fIn\fR will be undefined, since a recursive
structure cannot be constructed using one Perl statement.  You can set the
\f(CWPurity\fR flag to 1 to get additional statements that will correctly fill in
these references.
.PP
In the extended usage form, the references to be dumped can be given
user-specified names.  If a name begins with a \f(CW*\fR, the output will 
describe the dereferenced type of the supplied reference for hashes and
arrays.  Output of names will be avoided where possible if the \f(CWTerse\fR
flag is set.
.PP
Several styles of output are possible, all controlled by setting
the \f(CWIndent\fR flag.  See the section on \fIConfiguration Variables or Methods\fR below 
for details.
.Sh "Methods"
.IX Subsection "Methods"
.Ip "\fI\s-1PACKAGE\s0\fR\->new(\fI\s-1ARRAYREF\s0 [\fR, \fI\s-1ARRAYREF\s0]\fR)" 4
.IX Item "\fI\s-1PACKAGE\s0\fR\->new(\fI\s-1ARRAYREF\s0 [\fR, \fI\s-1ARRAYREF\s0]\fR)"
Returns a newly created \f(CWData::Dumper\fR object.  The first argument is an
anonymous array of values to be dumped.  The optional second argument is an
anonymous array of names for the values.  The names need not have a leading
\f(CW$\fR sign, and must be comprised of alphanumeric characters.  You can begin
a name with a \f(CW*\fR to specify that the dereferenced type must be dumped
instead of the reference itself, for \s-1ARRAY\s0 and \s-1HASH\s0 references.
.Sp
The prefix specified by \f(CW$Data::Dumper::Varname\fR will be used with a
numeric suffix if the name for a value is undefined.
.Sp
Data::Dumper will catalog all references encountered while dumping the
values. Cross-references (in the form of names of substructures in perl
syntax) will be inserted at all possible points, preserving any structural
interdependencies in the original set of values.  Structure traversal is
depth-first,  and proceeds in order from the first supplied value to
the last.
.Ip "\fI$\s-1OBJ\s0\fR\->Dump  \fIor\fR  \fI\s-1PACKAGE\s0\fR\->Dump(\fI\s-1ARRAYREF\s0 [\fR, \fI\s-1ARRAYREF\s0]\fR)" 4
.IX Item "\fI$\s-1OBJ\s0\fR\->Dump  \fIor\fR  \fI\s-1PACKAGE\s0\fR\->Dump(\fI\s-1ARRAYREF\s0 [\fR, \fI\s-1ARRAYREF\s0]\fR)"
Returns the stringified form of the values stored in the object (preserving
the order in which they were supplied to \f(CWnew\fR), subject to the
configuration options below.  In an array context, it returns a list
of strings corresponding to the supplied values.
.Sp
The second form, for convenience, simply calls the \f(CWnew\fR method on its
arguments before dumping the object immediately.
.Ip "\fI$\s-1OBJ\s0\fR\->Dumpxs  \fIor\fR  \fI\s-1PACKAGE\s0\fR\->Dumpxs(\fI\s-1ARRAYREF\s0 [\fR, \fI\s-1ARRAYREF\s0]\fR)" 4
.IX Item "\fI$\s-1OBJ\s0\fR\->Dumpxs  \fIor\fR  \fI\s-1PACKAGE\s0\fR\->Dumpxs(\fI\s-1ARRAYREF\s0 [\fR, \fI\s-1ARRAYREF\s0]\fR)"
This method is available if you were able to compile and install the \s-1XSUB\s0
extension to \f(CWData::Dumper\fR. It is exactly identical to the \f(CWDump\fR method 
above, only about 4 to 5 times faster, since it is written entirely in C.
.Ip "\fI$\s-1OBJ\s0\fR\->Seen(\fI[\s-1HASHREF\s0]\fR)" 4
.IX Item "\fI$\s-1OBJ\s0\fR\->Seen(\fI[\s-1HASHREF\s0]\fR)"
Queries or adds to the internal table of already encountered references.
You must use \f(CWReset\fR to explicitly clear the table if needed.  Such
references are not dumped; instead, their names are inserted wherever they
are encountered subsequently.
.Sp
Expects a anonymous hash of name => value pairs.  Same rules apply for names
as in \f(CWnew\fR.  If no argument is supplied, will return the \*(L"seen\*(R" list of
name => value pairs, in an array context.
.Ip "\fI$\s-1OBJ\s0\fR\->Values(\fI[\s-1ARRAYREF\s0]\fR)" 4
.IX Item "\fI$\s-1OBJ\s0\fR\->Values(\fI[\s-1ARRAYREF\s0]\fR)"
Queries or replaces the internal array of values that will be dumped.
.Ip "\fI$\s-1OBJ\s0\fR\->Names(\fI[\s-1ARRAYREF\s0]\fR)" 4
.IX Item "\fI$\s-1OBJ\s0\fR\->Names(\fI[\s-1ARRAYREF\s0]\fR)"
Queries or replaces the internal array of user supplied names for the values
that will be dumped.
.Ip "\fI$\s-1OBJ\s0\fR\->Reset" 4
.IX Item "\fI$\s-1OBJ\s0\fR\->Reset"
Clears the internal table of \*(L"seen\*(R" references.
.Sh "Functions"
.IX Subsection "Functions"
.Ip "Dumper(\fI\s-1LIST\s0\fR)" 4
.IX Item "Dumper(\fI\s-1LIST\s0\fR)"
Returns the stringified form of the values in the list, subject to the
configuration options below.  The values will be named \f(CW$VAR\fR\fIn\fR in the
output, where \fIn\fR is a numeric suffix.  Will return a list of strings
in an array context.
.Ip "DumperX(\fI\s-1LIST\s0\fR)" 4
.IX Item "DumperX(\fI\s-1LIST\s0\fR)"
Identical to the \f(CWDumper()\fR function above, but this calls the \s-1XSUB\s0 
implementation.  Only available if you were able to compile and install
the \s-1XSUB\s0 extensions in \f(CWData::Dumper\fR.
.Sh "Configuration Variables or Methods"
.IX Subsection "Configuration Variables or Methods"
Several configuration variables can be used to control the kind of output
generated when using the procedural interface.  These variables are usually
\f(CWlocal\fRized in a block so that other parts of the code are not affected by
the change.  
.PP
These variables determine the default state of the object created by calling
the \f(CWnew\fR method, but cannot be used to alter the state of the object
thereafter.  The equivalent method names should be used instead to query
or set the internal state of the object.
.Ip "$Data::Dumper::Indent  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Indent(\fI[\s-1NEWVAL\s0]\fR)" 4
.IX Item "$Data::Dumper::Indent  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Indent(\fI[\s-1NEWVAL\s0]\fR)"
Controls the style of indentation.  It can be set to 0, 1, 2 or 3.  Style 0
spews output without any newlines, indentation, or spaces between list
items.  It is the most compact format possible that can still be called
valid perl.  Style 1 outputs a readable form with newlines but no fancy
indentation (each level in the structure is simply indented by a fixed
amount of whitespace).  Style 2 (the default) outputs a very readable form
which takes into account the length of hash keys (so the hash value lines
up).  Style 3 is like style 2, but also annotates the elements of arrays
with their index (but the comment is on its own line, so array output
consumes twice the number of lines).  Style 2 is the default.
.Ip "$Data::Dumper::Purity  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Purity(\fI[\s-1NEWVAL\s0]\fR)" 4
.IX Item "$Data::Dumper::Purity  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Purity(\fI[\s-1NEWVAL\s0]\fR)"
Controls the degree to which the output can be \f(CWeval\fRed to recreate the
supplied reference structures.  Setting it to 1 will output additional perl
statements that will correctly recreate nested references.  The default is
0.
.Ip "$Data::Dumper::Pad  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Pad(\fI[\s-1NEWVAL\s0]\fR)" 4
.IX Item "$Data::Dumper::Pad  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Pad(\fI[\s-1NEWVAL\s0]\fR)"
Specifies the string that will be prefixed to every line of the output.
Empty string by default.
.Ip "$Data::Dumper::Varname  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Varname(\fI[\s-1NEWVAL\s0]\fR)" 4
.IX Item "$Data::Dumper::Varname  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Varname(\fI[\s-1NEWVAL\s0]\fR)"
Contains the prefix to use for tagging variable names in the output. The
default is \*(L"\s-1VAR\s0\*(R".
.Ip "$Data::Dumper::Useqq  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Useqq(\fI[\s-1NEWVAL\s0]\fR)" 4
.IX Item "$Data::Dumper::Useqq  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Useqq(\fI[\s-1NEWVAL\s0]\fR)"
When set, enables the use of double quotes for representing string values.
Whitespace other than space will be represented as \f(CW[\en\et\er]\fR, \*(L"unsafe\*(R"
characters will be backslashed, and unprintable characters will be output as
quoted octal integers.  Since setting this variable imposes a performance
penalty, the default is 0.  The \f(CWDumpxs()\fR method does not honor this
flag yet.
.Ip "$Data::Dumper::Terse  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Terse(\fI[\s-1NEWVAL\s0]\fR)" 4
.IX Item "$Data::Dumper::Terse  \fIor\fR  \fI$\s-1OBJ\s0\fR\->Terse(\fI[\s-1NEWVAL\s0]\fR)"
When set, Data::Dumper will emit single, non-self-referential values as
atoms/terms rather than statements.  This means that the \f(CW$VAR\fR\fIn\fR names
will be avoided where possible, but be advised that such output may not
always be parseable by \f(CWeval\fR.
.Ip "$Data::Dumper::Freezer  \fIor\fR  $\fI\s-1OBJ\s0\fR\->Freezer(\fI[\s-1NEWVAL\s0]\fR)" 4
.IX Item "$Data::Dumper::Freezer  \fIor\fR  $\fI\s-1OBJ\s0\fR\->Freezer(\fI[\s-1NEWVAL\s0]\fR)"
Can be set to a method name, or to an empty string to disable the feature.
Data::Dumper will invoke that method via the object before attempting to
stringify it.  This method can alter the contents of the object (if, for
instance, it contains data allocated from C), and even rebless it in a
different package.  The client is responsible for making sure the specified
method can be called via the object, and that the object ends up containing
only perl data types after the method has been called.  Defaults to an empty
string.
.Ip "$Data::Dumper::Toaster  \fIor\fR  $\fI\s-1OBJ\s0\fR\->Toaster(\fI[\s-1NEWVAL\s0]\fR)" 4
.IX Item "$Data::Dumper::Toaster  \fIor\fR  $\fI\s-1OBJ\s0\fR\->Toaster(\fI[\s-1NEWVAL\s0]\fR)"
Can be set to a method name, or to an empty string to disable the feature.
Data::Dumper will emit a method call for any objects that are to be dumped
using the syntax \f(CWbless(DATA, CLASS)-\fR\fI\s-1METHOD\s0()\fR>.  Note that this means that
the method specified will have to perform any modifications required on the
object (like creating new state within it, and/or reblessing it in a
different package) and then return it.  The client is responsible for making
sure the method can be called via the object, and that it returns a valid
object.  Defaults to an empty string.
.Ip "$Data::Dumper::Deepcopy  \fIor\fR  $\fI\s-1OBJ\s0\fR\->Deepcopy(\fI[\s-1NEWVAL\s0]\fR)" 4
.IX Item "$Data::Dumper::Deepcopy  \fIor\fR  $\fI\s-1OBJ\s0\fR\->Deepcopy(\fI[\s-1NEWVAL\s0]\fR)"
Can be set to a boolean value to enable deep copies of structures.
Cross-referencing will then only be done when absolutely essential
(i.e., to break reference cycles).  Default is 0.
.Sh "Exports"
.IX Subsection "Exports"
.Ip "Dumper" 0
.IX Item "Dumper"
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Run these code snippets to get a quick feel for the behavior of this
module.  When you are through with these examples, you may want to
add or change the various configuration variables described above,
to see their behavior.  (See the testsuite in the Data::Dumper
distribution for more examples.)
.PP
.Vb 1
\&    use Data::Dumper;
.Ve
.Vb 2
\&    package Foo;
\&    sub new {bless {'a' => 1, 'b' => sub { return "foo" }}, $_[0]};
.Ve
.Vb 2
\&    package Fuz;                       # a weird REF-REF-SCALAR object
\&    sub new {bless \e($_ = \e 'fu\e'z'), $_[0]};
.Ve
.Vb 10
\&    package main;
\&    $foo = Foo->new;
\&    $fuz = Fuz->new;
\&    $boo = [ 1, [], "abcd", \e*foo,
\&             {1 => 'a', 023 => 'b', 0x45 => 'c'}, 
\&             \e\e"p\eq\e'r", $foo, $fuz];
\&    
\&    ########
\&    # simple usage
\&    ########
.Ve
.Vb 3
\&    $bar = eval(Dumper($boo));
\&    print($@) if $@;
\&    print Dumper($boo), Dumper($bar);  # pretty print (no array indices)
.Ve
.Vb 3
\&    $Data::Dumper::Terse = 1;          # don't output names where feasible
\&    $Data::Dumper::Indent = 0;         # turn off all pretty print
\&    print Dumper($boo), "\en";
.Ve
.Vb 2
\&    $Data::Dumper::Indent = 1;         # mild pretty print
\&    print Dumper($boo);
.Ve
.Vb 2
\&    $Data::Dumper::Indent = 3;         # pretty print with array indices
\&    print Dumper($boo);
.Ve
.Vb 78
\&    $Data::Dumper::Useqq = 1;          # print strings in double quotes
\&    print Dumper($boo);
\&    
\&    
\&    ########
\&    # recursive structures
\&    ########
\&    
\&    
\&    @c = ('c');
\&    $c = \e@c;
\&    $b = {};
\&    $a = [1, $b, $c];
\&    $b->{a} = $a;
\&    $b->{b} = $a->[1];
\&    $b->{c} = $a->[2];
\&    print Data::Dumper->Dump([$a,$b,$c], [qw(a b c)]);
\&    
\&    
\&    $Data::Dumper::Purity = 1;         # fill in the holes for eval
\&    print Data::Dumper->Dump([$a, $b], [qw(*a b)]); # print as @a
\&    print Data::Dumper->Dump([$b, $a], [qw(*b a)]); # print as %b
\&    
\&    
\&    $Data::Dumper::Deepcopy = 1;       # avoid cross-refs
\&    print Data::Dumper->Dump([$b, $a], [qw(*b a)]);
\&    
\&    
\&    $Data::Dumper::Purity = 0;         # avoid cross-refs
\&    print Data::Dumper->Dump([$b, $a], [qw(*b a)]);
\&    
\&    
\&    ########
\&    # object-oriented usage
\&    ########
\&    
\&    
\&    $d = Data::Dumper->new([$a,$b], [qw(a b)]);
\&    $d->Seen({'*c' => $c});            # stash a ref without printing it
\&    $d->Indent(3);
\&    print $d->Dump;
\&    $d->Reset;                         # empty the seen cache
\&    $d->Purity(0);
\&    print join "----\en", $d->Dump;
\&    
\&    
\&    ########
\&    # persistence
\&    ########
\&    
\&    
\&    package Foo;
\&    sub new { bless { state => 'awake' }, shift }
\&    sub Freeze {
\&        my $s = shift;
\&        print STDERR "preparing to sleep\en";
\&        $s->{state} = 'asleep';
\&        return bless $s, 'Foo::ZZZ';
\&    }
\&    
\&    package Foo::ZZZ;
\&    sub Thaw {
\&        my $s = shift;
\&        print STDERR "waking up\en";
\&        $s->{state} = 'awake';
\&        return bless $s, 'Foo';
\&    }
\&    
\&    package Foo;
\&    use Data::Dumper;
\&    my $a = Foo->new;
\&    my $b = Data::Dumper->new([$a], ['c']);
\&    $b->Freezer('Freeze');
\&    $b->Toaster('Thaw');
\&    my $c = $b->Dump;
\&    print $c;
\&    my $d = eval $c;
\&    print Data::Dumper->Dump([$d], ['d']);
.Ve
.SH "BUGS"
.IX Header "BUGS"
Due to limitations of Perl subroutine call semantics, you cannot pass an
array or hash.  Prepend it with a \f(CW\e\fR to pass its reference instead.  This
will be remedied in time, with the arrival of prototypes in later versions
of Perl.  For now, you need to use the extended usage form, and prepend the
name with a \f(CW*\fR to output it as a hash or array.
.PP
\f(CWData::Dumper\fR cheats with CODE references.  If a code reference is
encountered in the structure being processed, an anonymous subroutine that
contains the string \*(L'"DUMMY"\*(R' will be inserted in its place, and a warning
will be printed if \f(CWPurity\fR is set.  You can \f(CWeval\fR the result, but bear
in mind that the anonymous sub that gets created is just a placeholder.
Someday, perl will have a switch to cache-on-demand the string
representation of a compiled piece of code, I hope.
.PP
The \f(CWUseqq\fR flag is not honored by \f(CWDumpxs()\fR (it always outputs
strings in single quotes).
.PP
SCALAR objects have the weirdest looking \f(CWbless\fR workaround.
.SH "AUTHOR"
.IX Header "AUTHOR"
Gurusamy Sarathy        gsar@umich.edu
.PP
Copyright (c) 1996 Gurusamy Sarathy. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "VERSION"
.IX Header "VERSION"
Version 2.07    (7 December 1996)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\fIperl\fR\|(1)

.rn }` ''
