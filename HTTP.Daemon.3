.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::HTTP::Daemon 3 "perl 5.004, patch 01" "25/Nov/96" "User Contributed Perl Documentation"
.IX Title "lib::HTTP::Daemon 3"
.UC
.IX Name "HTTP::Daemon - a simple http server class"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
HTTP::Daemon \- a simple http server class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 2
\&  use HTTP::Daemon;
\&  use HTTP::Status;
.Ve
.Vb 14
\&  $d = new HTTP::Daemon;
\&  print "Please contact me at: <URL:", $d->url, ">\en";
\&  while ($c = $d->accept) {
\&      $r = $c->get_request;
\&      if ($r) {
\&          if ($r->method eq 'GET' and $r->url->path eq "/xyzzy") {
\&              # this is *not* recommened practice
\&              $c->send_file_response("/etc/passwd");
\&          } else {
\&              $c->send_error(RC_FORBIDDEN)
\&          }
\&      }
\&      $c = undef;  # close connection
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Instances of the \fIHTTP::Daemon\fR class are HTTP/1.1 servers that
listens on a socket for incoming requests. The \fIHTTP::Daemon\fR is a
sub-class of \fIIO::Socket::INET\fR, so you can do socket operations
directly on it.
.PP
The \fIaccept()\fR method will return when a connection from a client is
available. The returned value will be a reference to a object of the
\fIHTTP::Daemon::ClientConn\fR class which is another \fIIO::Socket::INET\fR
subclass. Calling the \fIget_request()\fR method on this object will read
data from the client and return an \fIHTTP::Request\fR object reference.
.PP
This HTTP daemon does not \fIfork\fR\|(2) for you.  Your application, i.e. the
user of the \fIHTTP::Daemon\fR is reponsible for forking if that is
desirable.  Also note that the user is responsible for generating
responses that conforms to the HTTP/1.1 protocol.  The
\fIHTTP::Daemon::ClientConn\fR provide some methods that make this easier.
.SH "METHODS"
.IX Header "METHODS"
The following is a list of methods that are new (or enhanced) relative
to the \fIIO::Socket::INET\fR base class.
.Ip "$d = new \s-1HTTP::\s0Daemon" 4
.IX Item "$d = new \s-1HTTP::\s0Daemon"
The object constructor takes the same parameters as the
\fI\s-1IO::\s0Socket::\s-1INET\s0\fR constructor.  It can also be called without
specifying any parameters. The daemon will then set up a listen queue
of 5 connections and allocate some random port number.  A server
that want to bind to some specific address on the standard \s-1HTTP\s0 port
will be constructed like this:
.Sp
.Vb 3
\&  $d = new HTTP::Daemon
\&        LocalAddr => 'www.someplace.com',
\&        LocalPort => 80;
.Ve
.Ip "$c = $d->accept" 4
.IX Item "$c = $d->accept"
Same as \fI\s-1IO::\s0Socket::accept\fR but will return an
\fI\s-1HTTP::\s0Daemon::ClientConn\fR reference.  It will return undef if you
have specified a timeout and no connection is made within that time.
.Ip "$d->url" 4
.IX Item "$d->url"
Returns a \s-1URL\s0 string that can be used to access the server root.
.Ip "$d->product_tokens" 4
.IX Item "$d->product_tokens"
Returns the name that this server will use to identify itself.  This
is the string that is sent with the \fIServer\fR response header.
.PP
The \fI\s-1HTTP::\s0Daemon::ClientConn\fR is also a \fI\s-1IO::\s0Socket::\s-1INET\s0\fR
subclass. Instances of this class are returned by the \fIaccept()\fR method
of the \fI\s-1HTTP::\s0Daemon\fR.  The following additional methods are
provided:
.Ip "$c->get_request" 4
.IX Item "$c->get_request"
Will read data from the client and turn it into a \fI\s-1HTTP::\s0Request\fR
object which is then returned. Will return undef if reading of the
request failed.  If it fails, then the \fI\s-1HTTP::\s0Daemon::ClientConn\fR
object ($c) should be discarded.
.Sp
The \f(CW$c\fR\->get_request method support \s-1HTTP/1\s0.1 content bodies, including
\fIchunked\fR transfer encoding with footer and \fImultipart/*\fR types.
.Ip "$c->antique_client" 4
.IX Item "$c->antique_client"
Returns \s-1TRUE\s0 if the client speaks the \s-1HTTP/0\s0.9 protocol, i.e. no
status code or headers should be returned.
.Ip "$c->send_status_line( [$code, [$mess, [$proto]]] )" 4
.IX Item "$c->send_status_line( [$code, [$mess, [$proto]]] )"
Sends the status line back to the client.
.Ip "$c->send_basic_header( [$code, [$mess, [$proto]]] )" 4
.IX Item "$c->send_basic_header( [$code, [$mess, [$proto]]] )"
Sends the status line and the \*(L"Date:\*(R" and \*(L"Server:\*(R" headers back to
the client.
.Ip "$c->send_response( [$res] )" 4
.IX Item "$c->send_response( [$res] )"
Takes a \fI\s-1HTTP::\s0Response\fR object as parameter and send it back to the
client as the response.
.Ip "$c->send_redirect( $loc, [$code, [$entity_body]] )" 4
.IX Item "$c->send_redirect( $loc, [$code, [$entity_body]] )"
Sends a redirect response back to the client.  The location ($loc) can
be an absolute or a relative \s-1URL\s0. The \f(CW$code\fR must be one the redirect
status codes, and it defaults to \*(L"301 Moved Permanently\*(R"
.Ip "$c->send_error( [$code, [$error_message]] )" 4
.IX Item "$c->send_error( [$code, [$error_message]] )"
Send an error response back to the client.  If the \f(CW$code\fR is missing a
\*(L"Bad Request\*(R" error is reported.  The \f(CW$error_message\fR is a string that
is incorporated in the body of the \s-1HTML\s0 entity body.
.Ip "$c->send_file_response($filename)" 4
.IX Item "$c->send_file_response($filename)"
Send back a response with the specified \f(CW$filename\fR as content.  If the
file happen to be a directory we will generate a \s-1HTML\s0 index for it.
.Ip "$c->send_file($fd);" 4
.IX Item "$c->send_file($fd);"
Copies the file back to the client.  The file can be a string (which
will be interpreted as a filename) or a reference to a glob.
.Ip "$c->daemon" 4
.IX Item "$c->daemon"
Return a reference to the corresponding \fI\s-1HTTP::\s0Daemon\fR object.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the \fIIO::Socket\fR manpage, the \fIApache\fR manpage
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 1996, Gisle Aas
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

.rn }` ''
