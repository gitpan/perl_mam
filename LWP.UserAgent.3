.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::LWP::UserAgent 3 "perl 5.004, patch 55" "2/Oct/97" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
LWP::UserAgent \- A WWW UserAgent class
.SH "SYNOPSIS"
.PP
.Vb 2
\& require LWP::UserAgent;
\& $ua = new LWP::UserAgent;
.Ve
.Vb 1
\& $request = new HTTP::Request('GET', 'file://localhost/etc/motd');
.Ve
.Vb 3
\& $response = $ua->request($request); # or
\& $response = $ua->request($request, '/tmp/sss'); # or
\& $response = $ua->request($request, \e&callback, 4096);
.Ve
.Vb 1
\& sub callback { my($data, $response, $protocol) = @_; .... }
.Ve
.SH "DESCRIPTION"
The \f(CWLWP::UserAgent\fR is a class implementing a simple World-Wide Web
user agent in Perl. It brings together the HTTP::Request,
HTTP::Response and the LWP::Protocol classes that form the rest of the
core of libwww-perl library. For simple uses this class can be used
directly to dispatch WWW requests, alternatively it can be subclassed
for application-specific behaviour.
.PP
In normal usage the application creates a UserAgent object, and then
configures it with values for timeouts proxies, name, etc. The next
step is to create an instance of \f(CWHTTP::Request\fR for the request that
needs to be performed. This request is then passed to the UserAgent
\fIrequest()\fR method, which dispatches it using the relevant protocol,
and returns a \f(CWHTTP::Response\fR object.
.PP
The basic approach of the library is to use HTTP style communication
for all protocol schemes, i.e. you will receive an \f(CWHTTP::Response\fR
object also for gopher or ftp requests.  In order to achieve even more
similarities with HTTP style communications, gopher menus and file
directories will be converted to HTML documents.
.PP
The \fIrequest()\fR method can process the content of the response in one of
three ways: in core, into a file, or into repeated calls of a
subroutine.  You choose which one by the kind of value passed as the
second argument to \fIrequest()\fR.
.PP
The in core variant simply returns the content in a scalar attribute
called \fIcontent()\fR of the response object, and is suitable for small
HTML replies that might need further parsing.  This variant is used if
the second argument is missing (or is undef).
.PP
The filename variant requires a scalar containing a filename as the
second argument to \fIrequest()\fR, and is suitable for large WWW objects
which need to be written directly to the file, without requiring large
amounts of memory. In this case the response object returned from
\fIrequest()\fR will have empty \fIcontent()\fR.  If the request fails, then the
\fIcontent()\fR might not be empty, and the file will be untouched.
.PP
The subroutine variant requires a reference to callback routine as the
second argument to \fIrequest()\fR and it can also take an optional chuck
size as third argument.  This variant can be used to construct
\*(L"pipe-lined\*(R" processing, where processing of received chuncks can
begin before the complete data has arrived.  The callback function is
called with 3 arguments: the data received this time, a reference to
the response object and a reference to the protocol object.  The
response object returned from \fIrequest()\fR will have empty \fIcontent()\fR.  If
the request fails, then the the callback routine will not have been
called, and the response->\fIcontent()\fR might not be empty.
.PP
The request can be aborted by calling \fIdie()\fR within the callback
routine.  The die message will be available as the \*(L"X\-Died\*(R" special
response header field.
.PP
The library also accepts that you put a subroutine reference as
content in the request object.  This subroutine should return the
content (possibly in pieces) when called.  It should return an empty
string when there is no more content.
.PP
The user of this module can finetune timeouts and error handling by
calling the \fIuse_alarm()\fR and \fIuse_eval()\fR methods.
.PP
By default the library uses \fIalarm()\fR to implement timeouts, dying if
the timeout occurs. If this is not the prefered behaviour or it
interferes with other parts of the application one can disable the use
alarms. When alarms are disabled timeouts can still occur for example
when reading data, but other cases like name lookups etc will not be
timed out by the library itself.
.PP
The library catches errors (such as internal errors and timeouts) and
present them as HTTP error responses. Alternatively one can switch off
this behaviour, and let the application handle dies.
.SH "SEE ALSO"
See the \fILWP\fR manpage for a complete overview of libwww-perl5.  See the \fIrequest\fR manpage and
the \fImirror\fR manpage for examples of usage.
.SH "METHODS"
.Sh "\f(CW$ua\fR = new \s-1LWP::\s0UserAgent;"
Constructor for the UserAgent.  Returns a reference to a
\s-1LWP::\s0UserAgent object.
.Sh "\f(CW$ua\fR\->\fIsimple_request\fR\|($request, [$arg [, \f(CW$size\fR]])"
This method dispatches a single \s-1WWW\s0 request on behalf of a user, and
returns the response received.  The \f(CW$request\fR should be a reference
to a \f(CWHTTP::Request\fR object with values defined for at least the
\fImethod()\fR and \fIurl()\fR attributes.
.PP
If \f(CW$arg\fR is a scalar it is taken as a filename where the content of
the response is stored.
.PP
If \f(CW$arg\fR is a reference to a subroutine, then this routine is called
as chunks of the content is received.  An optional \f(CW$size\fR argument
is taken as a hint for an appropriate chunk size.
.PP
If \f(CW$arg\fR is omitted, then the content is stored in the response
object itself.
.Sh "\f(CW$ua\fR\->\fIrequest\fR\|($request, \f(CW$arg\fR [, \f(CW$size\fR])"
Process a request, including redirects and security.  This method may
actually send several different simple reqeusts.
.PP
The arguments are the same as for \f(CWsimple_request()\fR.
.Sh "\f(CW$ua\fR\->redirect_ok"
This method is called by \fIrequest()\fR before it tries to do any
redirects.  It should return a true value if the redirect is allowed
to be performed. Subclasses might want to override this.
.PP
The default implementation will return \s-1FALSE\s0 for \s-1POST\s0 request and \s-1TRUE\s0
for all others.
.Sh "\f(CW$ua\fR\->\fIcredentials\fR\|($netloc, \f(CW$realm\fR, \f(CW$uname\fR, \f(CW$pass\fR)"
Set the user name and password to be used for a realm.  It is often more
useful to specialize the \fIget_basic_credentials()\fR method instead.
.Sh "\f(CW$ua\fR\->\fIget_basic_credentials\fR\|($realm, \f(CW$uri\fR)"
This is called by \fIrequest()\fR to retrieve credentials for a Realm
protected by Basic Authentication or Digest Authentication.
.PP
Should return username and password in a list.  Return undef to abort
the authentication resolution atempts.
.PP
This implementation simply checks a set of pre-stored member
variables. Subclasses can override this method to e.g. ask the user
for a username/password.  An example of this can be found in
\f(CWlwp-request\fR program distributed with this library.
.Sh "\f(CW$ua\fR\->\fIagent\fR\|([$product_id])"
Get/set the product token that is used to identify the user agent on
the network.  The agent value is sent as the \*(L"User-Agent\*(R" header in
the requests. The default agent name is \*(L"libwww-perl/#.##\*(R", where
\*(L"#.##\*(R" is substitued with the version numer of this library.
.PP
The user agent string should be one or more simple product identifiers
with an optional version number separated by the \*(L"/\*(R" character.
Examples are:
.PP
.Vb 2
\&  $ua->agent('Checkbot/0.4 ' . $ua->agent);
\&  $ua->agent('Mozilla/5.0');
.Ve
.Sh "\f(CW$ua\fR\->\fIfrom\fR\|([$email_address])"
Get/set the Internet e-mail address for the human user who controls
the requesting user agent.  The address should be machine-usable, as
defined in \s-1RFC\s0 822.  The from value is send as the \*(L"From\*(R" header in
the requests.  There is no default.  Example:
.PP
.Vb 1
\&  $ua->from('aas@sn.no');
.Ve
.Sh "\f(CW$ua\fR\->\fItimeout\fR\|([$secs])"
Get/set the timeout value in seconds. The default \fItimeout()\fR value is
180 seconds, i.e. 3 minutes.
.Sh "\f(CW$ua\fR\->\fIcookie_jar\fR\|([$cookies])"
Get/set the \fI\s-1HTTP::\s0Cookies\fR object to use.  The default is to have no
cookie_jar, i.e. never automatically add \*(L"Cookie\*(R" headers to the
requests.
.Sh "\f(CW$ua\fR\->\fIuse_alarm\fR\|([$boolean])"
Get/set a value indicating wether to use \fIalarm()\fR when implementing
timeouts.  The default is \s-1TRUE\s0, if your system supports it.  You can
disable it if it interfers with other uses of alarm in your application.
.Sh "\f(CW$ua\fR\->\fIuse_eval\fR\|([$boolean])"
Get/set a value indicating wether to handle internal errors internally
by trapping with eval.  The default is \s-1TRUE\s0, i.e. the \f(CW$ua\fR\->\fIrequest()\fR
will never die.
.Sh "\f(CW$ua\fR\->\fIparse_head\fR\|([$boolean])"
Get/set a value indicating wether we should initialize response
headers from the <head> section of \s-1HTML\s0 documents. The default is
\s-1TRUE\s0.  Do not turn this off, unless you know what you are doing.
.Sh "\f(CW$ua\fR\->\fImax_size\fR\|([$bytes])"
Get/set the size limit for response content.  The default is undef,
which means that there is not limit.  If the returned response content
is only partial, because the size limit was exceeded, then a
\*(L"X\-Content-Range\*(R" header will be added to the response.
.Sh "\f(CW$ua\fR\->clone;"
Returns a copy of the \s-1LWP::\s0UserAgent object
.Sh "\f(CW$ua\fR\->\fIis_protocol_supported\fR\|($scheme)"
You can use this method to query if the library currently support the
specified \f(CWscheme\fR.  The \f(CWscheme\fR might be a string (like \*(L'http\*(R' or
\&'ftp') or it might be an \s-1URI::URL\s0 object reference.
.Sh "\f(CW$ua\fR\->\fImirror\fR\|($url, \f(CW$file\fR)"
Get and store a document identified by a \s-1URL\s0, using If-Modified-Since,
and checking of the Content-Length.  Returns a reference to the
response object.
.Sh "\f(CW$ua\fR\->\fIproxy\fR\|(...)"
Set/retrieve proxy \s-1URL\s0 for a scheme:
.PP
.Vb 2
\& $ua->proxy(['http', 'ftp'], 'http://proxy.sn.no:8001/');
\& $ua->proxy('gopher', 'http://proxy.sn.no:8001/');
.Ve
The first form specifies that the \s-1URL\s0 is to be used for proxying of
access methods listed in the list in the first method argument,
i.e. \*(L'http\*(R' and \*(L'ftp\*(R'.
.PP
The second form shows a shorthand form for specifying
proxy \s-1URL\s0 for a single access scheme.
.Sh "\f(CW$ua\fR\->\fIenv_proxy()\fR"
Load proxy settings from *_proxy environment variables.  You might
specify proxies like this (sh-syntax):
.PP
.Vb 4
\&  gopher_proxy=http://proxy.my.place/
\&  wais_proxy=http://proxy.my.place/
\&  no_proxy="my.place"
\&  export gopher_proxy wais_proxy no_proxy
.Ve
Csh or tcsh users should use the \f(CWsetenv\fR command to define these
envirionment variables.
.Sh "\f(CW$ua\fR\->\fIno_proxy\fR\|($domain,...)"
Do not proxy requests to the given domains.  Calling no_proxy without
any domains clears the list of domains. Eg:
.PP
.Vb 1
\& $ua->no_proxy('localhost', 'no', ...);
.Ve

.rn }` ''
.IX Title "lib::LWP::UserAgent 3"
.IX Name "LWP::UserAgent - A WWW UserAgent class"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "SEE ALSO"

.IX Header "METHODS"

.IX Subsection "\f(CW$ua\fR = new \s-1LWP::\s0UserAgent;"

.IX Subsection "\f(CW$ua\fR\->\fIsimple_request\fR\|($request, [$arg [, \f(CW$size\fR]])"

.IX Subsection "\f(CW$ua\fR\->\fIrequest\fR\|($request, \f(CW$arg\fR [, \f(CW$size\fR])"

.IX Subsection "\f(CW$ua\fR\->redirect_ok"

.IX Subsection "\f(CW$ua\fR\->\fIcredentials\fR\|($netloc, \f(CW$realm\fR, \f(CW$uname\fR, \f(CW$pass\fR)"

.IX Subsection "\f(CW$ua\fR\->\fIget_basic_credentials\fR\|($realm, \f(CW$uri\fR)"

.IX Subsection "\f(CW$ua\fR\->\fIagent\fR\|([$product_id])"

.IX Subsection "\f(CW$ua\fR\->\fIfrom\fR\|([$email_address])"

.IX Subsection "\f(CW$ua\fR\->\fItimeout\fR\|([$secs])"

.IX Subsection "\f(CW$ua\fR\->\fIcookie_jar\fR\|([$cookies])"

.IX Subsection "\f(CW$ua\fR\->\fIuse_alarm\fR\|([$boolean])"

.IX Subsection "\f(CW$ua\fR\->\fIuse_eval\fR\|([$boolean])"

.IX Subsection "\f(CW$ua\fR\->\fIparse_head\fR\|([$boolean])"

.IX Subsection "\f(CW$ua\fR\->\fImax_size\fR\|([$bytes])"

.IX Subsection "\f(CW$ua\fR\->clone;"

.IX Subsection "\f(CW$ua\fR\->\fIis_protocol_supported\fR\|($scheme)"

.IX Subsection "\f(CW$ua\fR\->\fImirror\fR\|($url, \f(CW$file\fR)"

.IX Subsection "\f(CW$ua\fR\->\fIproxy\fR\|(...)"

.IX Subsection "\f(CW$ua\fR\->\fIenv_proxy()\fR"

.IX Subsection "\f(CW$ua\fR\->\fIno_proxy\fR\|($domain,...)"

