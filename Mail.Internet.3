.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Mail::Internet 3 "perl 5.007, patch 00" "8/Feb/102" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Mail::Internet \- manipulate Internet format (RFC 822) mail messages
.SH "SYNOPSIS"
.PP
.Vb 1
\&    use Mail::Internet;
.Ve
.SH "DESCRIPTION"
This package provides a class object which can be used for reading, creating,
manipulating and writing a message with RFC822 compliant headers.
.SH "CONSTRUCTOR"
.Ip "new ( [ \s-1ARG\s0 ], [ \s-1OPTIONS\s0 ] )" 4
\f(CWARG\fR is optiona and may be either a file descriptor (reference to a \s-1GLOB\s0)
or a reference to an array. If given the new object will be
initialized with headers and body either from the array of read from 
the file descriptor.
.Sp
\f(CWOPTIONS\fR is a list of options given in the form of key-value
pairs, just like a hash table. Valid options are
.Ip "\fBHeader\fR" 12
The value of this option should be a \f(CWMail::Header\fR object. If given then
\f(CWMail::Internet\fR will not attempt to read a mail header from \f(CWARG\fR, if
it was specified.
.Ip "\fBBody\fR" 12
The value of this option should be a reference to an array which contains
the lines for the body of the message. Each line should be terminated with
\f(CW\en\fR (\s-1LF\s0). If Body is given then \f(CWMail::Internet\fR will not attempt to
read the body from \f(CWARG\fR (even if it is specified).
.Sp
The Mail::Header options \f(CWModify\fR, \f(CWMailFrom\fR and \f(CWFoldLength\fR may
also be given.
.SH "METHODS"
.Ip "body ( [ \s-1BODY\s0 ] )" 4
Returns the body of the message. This is a reference to an array.
Each entry in the array represents a single line in the message.
.Sp
If \fI\s-1BODY\s0\fR is given, it can be a referenc to an aray or an array, then
the body will be replaced. If a reference is passed, it is used directly
and not copied, so any sunsequent changes to the array will change the
contents of the body.
.Ip "print_header ( [ \s-1FILEHANDLE\s0 ] )" 4
.Ip "print_body ( [ \s-1FILEHANDLE\s0 ] )" 4
.Ip "print ( [ \s-1FILEHANDLE\s0 ] )" 4
Print the header, body or whole message to file descriptor \fI\s-1FILEHANDLE\s0\fR.
\fI$fd\fR should be a reference to a \s-1GLOB\s0. If \fI\s-1FILEHANDLE\s0\fR is not given the
output will be sent to \s-1STDOUT\s0.
.Sp
.Vb 1
\&    $mail->print( \e*STDOUT );  # Print message to STDOUT
.Ve
.Ip "as_string ()" 4
Returns the message as a single string.
.Ip "as_mbox_string ( [ \s-1ALREADY_ESCAPED\s0 ] )" 4
Returns the message as a string in mbox format.  \f(CWALREADY_ESCAPED\fR, if
given and true, indicates that \->escape_from has already been called on
this object.
.Ip "head ()" 4
Returns the \f(CWMail::Header\fR object which holds the headers for the current
message
.SH "UTILITY METHODS"
The following methods are more a utility type than a manipulation
type of method.
.Ip "remove_sig ( [ \s-1NLINES\s0 ] )" 4
Attempts to remove a users signature from the body of a message. It does this 
by looking for a line equal to \f(CW'-- '\fR within the last \f(CWNLINES\fR of the
message. If found then that line and all lines after it will be removed. If
\f(CWNLINES\fR is not given a default value of 10 will be used. This would be of
most use in auto-reply scripts.
.Ip "tidy_body ()" 4
Removes all leading and trailing lines from the body that only contain
white spaces.
.Ip "reply ()" 4
Create a new object with header initialised for a reply to the current 
object. And the body will be a copy of the current message indented.
.Ip "add_signature ( [ \s-1FILE\s0 ] )" 4
Append a signature to the message. \f(CWFILE\fR is a file which contains
the signature, if not given then the file \*(L"$\s-1ENV\s0{\s-1HOME\s0}/.signature\*(R"
will be checked for.
.Ip "send ( [ type [ args.. ]] )" 4
Send a Mail::Internet message using Mail::Mailer.  Type and args are
passed on to \f(CWMail::Mailer\fR
.Ip "smtpsend ( [ \s-1OPTIONS\s0 ] )" 4
Send a Mail::Internet message via \s-1SMTP\s0, requires Net::\s-1SMTP\s0
.Sp
The return value will be a list of email addresses that the message was sent
to. If the message was not sent the list will be empty.
.Sp
Options are passed as key-value pairs. Current options are
.Ip "Host" 8
Name of the \s-1SMTP\s0 server to connect to, or a Net::\s-1SMTP\s0 object to use
.Sp
If \f(CWHost\fR is not given then the \s-1SMTP\s0 host is found by attempting
connections first to hosts specified in \f(CW$ENV{SMTPHOSTS}\fR, a colon
separated list, then \f(CWmailhost\fR and \f(CWlocalhost\fR.
.Ip "To" 8
.Ip "Cc" 8
.Ip "Bcc" 8
Send the email to the given addresses, each can be either a string or
a reference to a list of email addresses. If none of \f(CWTo\fR, <Cc> or \f(CWBcc\fR
are given then the addresses are extracted from the message being sent.
.Ip "Hello" 8
Send a \s-1HELO\s0 (or \s-1EHLO\s0) command to the server with the given name.
.Ip "Port" 8
Port number to connect to on remote host
.Ip "Debug" 8
Debug value to pass to Net::\s-1SMPT\s0, see <Net::\s-1SMTP\s0>
.Ip "nntppost ( [ \s-1OPTIONS\s0 ] )" 4
Post an article via \s-1NNTP\s0, requires Net::\s-1NNTP\s0.
.Sp
Options are passed as key-value pairs. Current options are
.Ip "Host" 8
Name of \s-1NNTP\s0 server to connect to, or a Net::\s-1NNTP\s0 object to use.
.Ip "Port" 8
Port number to connect to on remote host
.Ip "Debug" 8
Debug value to pass to Net::\s-1NNTP\s0, see <Net::\s-1NNTP\s0>
.Ip "escape_from ()" 4
It can cause problems with some applications if a message contains a line
starting with \f(CW`From '\fR, in particular when attempting to split a folder.
This method inserts a leading \f(CW`\fR'> on anyline that matches the regular
expression \f(CW/^\fR*From/>
.Ip "unescape_from ()" 4
This method will remove the escaping added by escape_from
.SH "SEE ALSO"
the \fIMail::Header\fR manpage
the \fIMail::Address\fR manpage
.SH "AUTHOR"
Graham Barr.  Maintained by Mark Overmeer <mailtools@overmeer.net>
.SH "COPYRIGHT"
Copyright (c) 1995-2001 Graham Barr. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms
as Perl itself.

.rn }` ''
.IX Title "Mail::Internet 3"
.IX Name "Mail::Internet - manipulate Internet format (RFC 822) mail messages"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "CONSTRUCTOR"

.IX Item "new ( [ \s-1ARG\s0 ], [ \s-1OPTIONS\s0 ] )"

.IX Item "\fBHeader\fR"

.IX Item "\fBBody\fR"

.IX Header "METHODS"

.IX Item "body ( [ \s-1BODY\s0 ] )"

.IX Item "print_header ( [ \s-1FILEHANDLE\s0 ] )"

.IX Item "print_body ( [ \s-1FILEHANDLE\s0 ] )"

.IX Item "print ( [ \s-1FILEHANDLE\s0 ] )"

.IX Item "as_string ()"

.IX Item "as_mbox_string ( [ \s-1ALREADY_ESCAPED\s0 ] )"

.IX Item "head ()"

.IX Header "UTILITY METHODS"

.IX Item "remove_sig ( [ \s-1NLINES\s0 ] )"

.IX Item "tidy_body ()"

.IX Item "reply ()"

.IX Item "add_signature ( [ \s-1FILE\s0 ] )"

.IX Item "send ( [ type [ args.. ]] )"

.IX Item "smtpsend ( [ \s-1OPTIONS\s0 ] )"

.IX Item "Host"

.IX Item "To"

.IX Item "Cc"

.IX Item "Bcc"

.IX Item "Hello"

.IX Item "Port"

.IX Item "Debug"

.IX Item "nntppost ( [ \s-1OPTIONS\s0 ] )"

.IX Item "Host"

.IX Item "Port"

.IX Item "Debug"

.IX Item "escape_from ()"

.IX Item "unescape_from ()"

.IX Header "SEE ALSO"

.IX Header "AUTHOR"

.IX Header "COPYRIGHT"

