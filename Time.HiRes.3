.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH HiRes 3 "perl 5.004, patch 55" "12/Nov/97" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Time::HiRes \- Perl extension for ualarm, usleep, and gettimeofday
.SH "SYNOPSIS"
.PP
.Vb 1
\&  use Time::HiRes qw( usleep ualarm gettimeofday tv_interval );
.Ve
.Vb 1
\&  usleep ($microseconds);
.Ve
.Vb 2
\&  ualarm ($microseconds);
\&  ualarm ($microseconds, $interval_microseconds);
.Ve
.Vb 2
\&  $t0 = [gettimeofday];
\&  ($seconds, $microseconds) = gettimeofday;
.Ve
.Vb 3
\&  $elapsed = tv_interval ( $t0, [$seconds, $microseconds]);
\&  $elapsed = tv_interval ( $t0, [gettimeofday]);
\&  $elapsed = tv_interval ( $t0 );
.Ve
.Vb 5
\&  use Time::HiRes qw ( time alarm sleep );
\&  $now_fractions = time;
\&  sleep ($floating_seconds);
\&  alarm ($floating_seconds);
\&  alarm ($floating_seconds, $floating_interval);
.Ve
.SH "DESCRIPTION"
The \f(CWTime::HiRes\fR module implements a Perl interface to the usleep, ualarm,
and gettimeofday system calls. See the EXAMPLES section below and the test
scripts for usage; see your system documentation for the description of
the underlying gettimeofday, usleep, and ualarm calls.
.PP
If your system lacks \fIgettimeofday\fR\|(2) you don't get \fIgettimeofday()\fR or the
one-arg form of \fItv_interval()\fR.  If you don't have \fIusleep\fR\|(3) or \fIselect\fR\|(2)
you don't get \fIusleep()\fR or \fIsleep()\fR.  If your system don't have \fIualarm\fR\|(3)
or \fIsetitimer\fR\|(2) you don't
get \fIualarm()\fR or \fIalarm()\fR.  If you try to import an unimplemented function
in the \f(CWuse\fR statement it will fail at compile time.
.PP
The following functions can be imported from this module.  No
functions are exported by default.
.Ip "gettimeofday ()" 4
In array context it returns a 2 element array with the seconds and
microseconds since the epoch.  In scalar context it returns floating
seconds like \fITime::HiRes::time()\fR (see below).
.Ip "usleep ( $useconds )" 4
Issues a usleep for the number of microseconds specified. See also 
\fITime::HiRes::sleep()\fR below.
.Ip "ualarm ( $useconds [, $interval_useconds ] )" 4
Issues a ualarm call; interval_useconds is optional and will be 0 if 
unspecified, resulting in alarm-like behaviour.
.Ip "tv_interval ( $ref_to_gettimeofday [, $ref_to_later_gettimeofday] )" 4
Returns the floating seconds between the two times, which should have been 
returned by \fIgettimeofday()\fR. If the second argument is omitted, then the
current time is used.
.Ip "time ()" 4
Returns a floating seconds since the epoch. This function can be imported,
resulting in a nice drop-in replacement for the \f(CWtime\fR provided with perl,
see the \s-1EXAMPLES\s0 below.
.Ip "sleep ( $floating_seconds )" 4
Converts \f(CW$floating_seconds\fR to microseconds and issues a usleep for the 
result.  This function can be imported, resulting in a nice drop-in 
replacement for the \f(CWsleep\fR provided with perl, see the \s-1EXAMPLES\s0 below.
.Ip "alarm ( $floating_seconds [, $interval_floating_seconds ] )" 4
Converts \f(CW$floating_seconds\fR and \f(CW$interval_floating_seconds\fR and issues a
ualarm for the results.  The \f(CW$interval_floating_seconds\fR argument is optional and will 
be 0 if unspecified, resulting in alarm-like behaviour.  This function can 
be imported, resulting in a nice drop-in 
replacement for the \f(CWalarm\fR provided with perl, see the \s-1EXAMPLES\s0 below.
.SH "EXAMPLES"
.PP
.Vb 1
\&  use Time::HiRes qw(usleep ualarm gettimeofday tv_interval);
.Ve
.Vb 2
\&  $microseconds = 750_000;
\&  usleep $microseconds;
.Ve
.Vb 2
\&  # signal alarm in 2.5s & every .1s thereafter
\&  ualarm 2_500_000, 100_000;    
.Ve
.Vb 2
\&  # get seconds and microseconds since the epoch
\&  ($s, $usec) = gettimeofday;
.Ve
.Vb 10
\&  # measure elapsed time 
\&  # (could also do by subtracting 2 gettimeofday return values)
\&  $t0 = [gettimeofday];
\&  # do bunch of stuff here
\&  $t1 = [gettimeofday];
\&  # do more stuff here
\&  $t0_t1 = tv_interval $t0, $t1;
\&  
\&  $elapsed = tv_interval ($t0, [gettimeofday]);
\&  $elapsed = tv_interval ($t0); # equivalent code
.Ve
.Vb 13
\&  #
\&  # replacements for time, alarm and sleep that know about
\&  # floating seconds
\&  #
\&  use Time::HiRes;
\&  $now_fractions = Time::HiRes::time;
\&  Time::HiRes::sleep (2.5);
\&  Time::HiRes::alarm (10.6666666);
\& 
\&  use Time::HiRes qw ( time alarm sleep );
\&  $now_fractions = time;
\&  sleep (2.5);
\&  alarm (10.6666666);
.Ve
.SH "AUTHORS"
D. Wegscheid <wegscd@whirlpool.com>
R. Schertler <roderick@argon.org>
J. Hietaniemi <jhi@iki.fi>
G. Aas <gisle@aas.no>
.SH "REVISION"
$Id: HiRes.pm,v 1.16 1997/11/13 02:06:36 wegscd Exp $
.PP
$Log: HiRes.pm,v $
Revision 1.16  1997/11/13 02:06:36  wegscd
version bump to accomodate HiRes.xs fix.
.PP
Revision 1.15  1997/11/11 02:17:59  wegscd
POD editing, courtesy of Gisle Aas.
.PP
Revision 1.14  1997/11/06 03:14:35  wegscd
Update version # for Makefile.PL and HiRes.xs changes.
.PP
Revision 1.13  1997/11/05 05:36:25  wegscd
change version # for Makefile.pl and HiRes.xs changes.
.PP
Revision 1.12  1997/10/13 20:55:33  wegscd
Force a new version for Makefile.PL changes.
.PP
Revision 1.11  1997/09/05 19:59:33  wegscd
New version to bump version for README and Makefile.PL fixes.
Fix bad RCS log.
.PP
Revision 1.10  1997/05/23 01:11:38  wegscd
Conditional compilation; EXPORT_FAIL fixes.
.PP
Revision 1.2  1996/12/30 13:28:40  wegscd
Update documentation for what to do when missing \fIualarm()\fR and friends.
.PP
Revision 1.1  1996/10/17 20:53:31  wegscd
Fix =head1 being next to _\|_END_\|_ so pod2man works
.PP
Revision 1.0  1996/09/03 18:25:15  wegscd
Initial revision
.SH "COPYRIGHT"
Copyright (c) 1996-1997 Douglas E. Wegscheid.
All rights reserved. This program is free software; you can
redistribute it and/or modify it under the same terms as Perl itself.

.rn }` ''
.IX Title "HiRes 3"
.IX Name "Time::HiRes - Perl extension for ualarm, usleep, and gettimeofday"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "gettimeofday ()"

.IX Item "usleep ( $useconds )"

.IX Item "ualarm ( $useconds [, $interval_useconds ] )"

.IX Item "tv_interval ( $ref_to_gettimeofday [, $ref_to_later_gettimeofday] )"

.IX Item "time ()"

.IX Item "sleep ( $floating_seconds )"

.IX Item "alarm ( $floating_seconds [, $interval_floating_seconds ] )"

.IX Header "EXAMPLES"

.IX Header "AUTHORS"

.IX Header "REVISION"

.IX Header "COPYRIGHT"

