.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Class::Struct 3 "perl 5.004, patch 01" "10/Apr/97" "Perl Programmers Reference Guide"
.IX Title "Class::Struct 3"
.UC
.IX Name "Class::Struct - declare struct-like datatypes as Perl classes"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
Class::Struct \- declare struct-like datatypes as Perl classes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 5
\&    use Class::Struct;
\&            # declare struct, based on array:
\&    struct( CLASS_NAME => [ ELEMENT_NAME => ELEMENT_TYPE, ... ]);
\&            # declare struct, based on hash:
\&    struct( CLASS_NAME => { ELEMENT_NAME => ELEMENT_TYPE, ... });
.Ve
.Vb 4
\&    package CLASS_NAME;
\&    use Class::Struct;
\&            # declare struct, based on array, implicit class name:
\&    struct( ELEMENT_NAME => ELEMENT_TYPE, ... );
.Ve
.Vb 4
\&    package Myobj;
\&    use Class::Struct;
\&            # declare struct with four types of elements:
\&    struct( s => '$', a => '@', h => '%', c => 'My_Other_Class' );
.Ve
.Vb 1
\&    $obj = new Myobj;               # constructor
.Ve
.Vb 3
\&                                    # scalar type accessor:
\&    $element_value = $obj->s;           # element value
\&    $obj->s('new value');               # assign to element
.Ve
.Vb 4
\&                                    # array type accessor:
\&    $ary_ref = $obj->a;                 # reference to whole array
\&    $ary_element_value = $obj->a(2);    # array element value
\&    $obj->a(2, 'new value');            # assign to array element
.Ve
.Vb 4
\&                                    # hash type accessor:
\&    $hash_ref = $obj->h;                # reference to whole hash
\&    $hash_element_value = $obj->h('x'); # hash element value
\&    $obj->h('x', 'new value');        # assign to hash element
.Ve
.Vb 4
\&                                    # class type accessor:
\&    $element_value = $obj->c;           # object reference
\&    $obj->c->method(...);               # call method of object
\&    $obj->c(new My_Other_Class);        # assign a new object
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\f(CWClass::Struct\fR exports a single function, \f(CWstruct\fR.
Given a list of element names and types, and optionally
a class name, \f(CWstruct\fR creates a Perl 5 class that implements
a \*(L"struct-like\*(R" data structure.
.PP
The new class is given a constructor method, \f(CWnew\fR, for creating
struct objects.
.PP
Each element in the struct data has an accessor method, which is
used to assign to the element and to fetch its value.  The
default accessor can be overridden by declaring a \f(CWsub\fR of the
same name in the package.  (See Example 2.)
.PP
Each element's type can be scalar, array, hash, or class.
.Sh "The \f(CWstruct()\fR function"
.IX Subsection "The \f(CWstruct()\fR function"
The \f(CWstruct\fR function has three forms of parameter-list.
.PP
.Vb 3
\&    struct( CLASS_NAME => [ ELEMENT_LIST ]);
\&    struct( CLASS_NAME => { ELEMENT_LIST });
\&    struct( ELEMENT_LIST );
.Ve
The first and second forms explicitly identify the name of the
class being created.  The third form assumes the current package
name as the class name.
.PP
An object of a class created by the first and third forms is
based on an array, whereas an object of a class created by the
second form is based on a hash. The array-based forms will be
somewhat faster and smaller; the hash-based forms are more
flexible.
.PP
The class created by \f(CWstruct\fR must not be a subclass of another
class other than \f(CWUNIVERSAL\fR.
.PP
A function named \f(CWnew\fR must not be explicitly defined in a class
created by \f(CWstruct\fR.
.PP
The \fI\s-1ELEMENT_LIST\s0\fR has the form
.PP
.Vb 1
\&    NAME => TYPE, ...
.Ve
Each name-type pair declares one element of the struct. Each
element name will be defined as an accessor method unless a
method by that name is explicitly defined; in the latter case, a
warning is issued if the warning flag (\fB\-w\fR) is set.
.Sh "Element Types and Accessor Methods"
.IX Subsection "Element Types and Accessor Methods"
The four element types -- scalar, array, hash, and class -- are
represented by strings -- \f(CW'$'\fR, \f(CW'@'\fR, \f(CW'%'\fR, and a class name --
optionally preceded by a \f(CW'*'\fR.
.PP
The accessor method provided by \f(CWstruct\fR for an element depends
on the declared type of the element.
.Ip "Scalar (\f(CW'$'\fR or \f(CW'*$'\fR)" 5
.IX Item "Scalar (\f(CW'$'\fR or \f(CW'*$'\fR)"
The element is a scalar, and is initialized to \f(CWundef\fR.
.Sp
The accessor's argument, if any, is assigned to the element.
.Sp
If the element type is \f(CW'$'\fR, the value of the element (after
assignment) is returned. If the element type is \f(CW'*$'\fR, a reference
to the element is returned.
.Ip "Array (\f(CW'@'\fR or \f(CW'*@'\fR)" 5
.IX Item "Array (\f(CW'@'\fR or \f(CW'*@'\fR)"
The element is an array, initialized to \f(CW()\fR.
.Sp
With no argument, the accessor returns a reference to the
element's whole array.
.Sp
With one or two arguments, the first argument is an index
specifying one element of the array; the second argument, if
present, is assigned to the array element.  If the element type
is \f(CW'@'\fR, the accessor returns the array element value.  If the
element type is \f(CW'*@'\fR, a reference to the array element is
returned.
.Ip "Hash (\f(CW'%'\fR or \f(CW'*%'\fR)" 5
.IX Item "Hash (\f(CW'%'\fR or \f(CW'*%'\fR)"
The element is a hash, initialized to \f(CW()\fR.
.Sp
With no argument, the accessor returns a reference to the
element's whole hash.
.Sp
With one or two arguments, the first argument is a key specifying
one element of the hash; the second argument, if present, is
assigned to the hash element.  If the element type is \f(CW'%'\fR, the
accessor returns the hash element value.  If the element type is
\&\f(CW'*%'\fR, a reference to the hash element is returned.
.Ip "Class (\f(CW'Class_Name'\fR or \f(CW'*Class_Name'\fR)" 5
.IX Item "Class (\f(CW'Class_Name'\fR or \f(CW'*Class_Name'\fR)"
The element's value must be a reference blessed to the named
class or to one of its subclasses. The element is initialized to
the result of calling the \f(CWnew\fR constructor of the named class.
.Sp
The accessor's argument, if any, is assigned to the element. The
accessor will \f(CWcroak\fR if this is not an appropriate object
reference.
.Sp
If the element type does not start with a \f(CW'*'\fR, the accessor
returns the element value (after assignment). If the element type
starts with a \f(CW'*'\fR, a reference to the element itself is returned.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Ip "Example 1" 5
.IX Item "Example 1"
Giving a struct element a class type that is also a struct is how
structs are nested.  Here, \f(CWtimeval\fR represents a time (seconds and
microseconds), and \f(CWrusage\fR has two elements, each of which is of
type \f(CWtimeval\fR.
.Sp
.Vb 1
\&    use Class::Struct;
.Ve
.Vb 4
\&    struct( rusage => {
\&        ru_utime => timeval,  # seconds
\&        ru_stime => timeval,  # microseconds
\&    });
.Ve
.Vb 4
\&    struct( timeval => [
\&        tv_secs  => '$',
\&        tv_usecs => '$',
\&    ]);
.Ve
.Vb 3
\&        # create an object:
\&    my $t = new rusage;
\&        # $t->ru_utime and $t->ru_stime are objects of type timeval.
.Ve
.Vb 5
\&        # set $t->ru_utime to 100.0 sec and $t->ru_stime to 5.0 sec.
\&    $t->ru_utime->tv_secs(100);
\&    $t->ru_utime->tv_usecs(0);
\&    $t->ru_stime->tv_secs(5);
\&    $t->ru_stime->tv_usecs(0);
.Ve
.Ip "Example 2" 5
.IX Item "Example 2"
An accessor function can be redefined in order to provide
additional checking of values, etc.  Here, we want the \f(CWcount\fR
element always to be nonnegative, so we redefine the \f(CWcount\fR
accessor accordingly.
.Sp
.Vb 2
\&    package MyObj;
\&    use Class::Struct;
.Ve
.Vb 2
\&                # declare the struct
\&    struct ( 'MyObj', { count => '$', stuff => '%' } );
.Ve
.Vb 10
\&                # override the default accessor method for 'count'
\&    sub count {
\&        my $self = shift;
\&        if ( @_ ) {
\&            die 'count must be nonnegative' if $_[0] < 0;
\&            $self->{'count'} = shift;
\&            warn "Too many args to count" if @_;
\&        }
\&        return $self->{'count'};
\&    }
.Ve
.Vb 4
\&    package main;
\&    $x = new MyObj;
\&    print "\e$x->count(5) = ", $x->count(5), "\en";
\&                            # prints '$x->count(5) = 5'
.Ve
.Vb 2
\&    print "\e$x->count = ", $x->count, "\en";
\&                            # prints '$x->count = 5'
.Ve
.Vb 2
\&    print "\e$x->count(-5) = ", $x->count(-5), "\en";
\&                            # dies due to negative argument!
.Ve
.SH "Author and Modification History"
.IX Header "Author and Modification History"
Renamed to \f(CWClass::Struct\fR and modified by Jim Miner, 1997-04-02.
.Sp
.Vb 8
\&    members() function removed.
\&    Documentation corrected and extended.
\&    Use of struct() in a subclass prohibited.
\&    User definition of accessor allowed.
\&    Treatment of '*' in element types corrected.
\&    Treatment of classes as element types corrected.
\&    Class name to struct() made optional.
\&    Diagnostic checks added.
.Ve
Originally \f(CWClass::Template\fR by Dean Roehrich.
.Sp
.Vb 19
\&    # Template.pm   --- struct/member template builder
\&    #   12mar95
\&    #   Dean Roehrich
\&    #
\&    # changes/bugs fixed since 28nov94 version:
\&    #  - podified
\&    # changes/bugs fixed since 21nov94 version:
\&    #  - Fixed examples.
\&    # changes/bugs fixed since 02sep94 version:
\&    #  - Moved to Class::Template.
\&    # changes/bugs fixed since 20feb94 version:
\&    #  - Updated to be a more proper module.
\&    #  - Added "use strict".
\&    #  - Bug in build_methods, was using @var when @$var needed.
\&    #  - Now using my() rather than local().
\&    #
\&    # Uses perl5 classes to create nested data types.
\&    # This is offered as one implementation of Tom Christiansen's "structs.pl"
\&    # idea.
.Ve

.rn }` ''
