.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH RESPONSE 1 "perl 5.003, patch 93" "25/Nov/96" "User Contributed Perl Documentation"
.IX Title "RESPONSE 1"
.UC
.IX Name "HTTP::Response - Class encapsulating HTTP Responses"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
HTTP::Response \- Class encapsulating HTTP Responses
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 1
\& require HTTP::Response;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CWHTTP::Response\fR class encapsulate HTTP style responses.  A
response consist of a response line, some headers, and a (potential
empty) content. Note that the LWP library will use HTTP style
responses also for non-HTTP protocol schemes.
.PP
Instances of this class are usually created and returned by the
\f(CWrequest()\fR method of an \f(CWLWP::UserAgent\fR object:
.PP
.Vb 7
\& ...
\& $response = $ua->request($request)
\& if ($response->is_success) {
\&     print $response->content;
\& } else {
\&     print $response->error_as_HTML;
\& }
.Ve
.SH "METHODS"
.IX Header "METHODS"
\f(CWHTTP::Response\fR is a subclass of \f(CWHTTP::Message\fR and therefore
inherits its methods.  The inherited methods are \fIheader()\fR,
\fIpush_header()\fR, \fIremove_header()\fR, \fIheaders_as_string()\fR, and \fIcontent()\fR.
The header convenience methods are also available.  See
the \fIHTTP::Message\fR manpage for details.
.Sh "\f(CW$r\fR = new \s-1HTTP::\s0Response ($rc, [$msg, [$header, [$content]]])"
.IX Subsection "\f(CW$r\fR = new \s-1HTTP::\s0Response ($rc, [$msg, [$header, [$content]]])"
Constructs a new \f(CWHTTP::Response\fR object describing a response with
response code \f(CW$rc\fR and optional message \f(CW$msg\fR.
.Sh "\f(CW$r\fR\->\fIcode\fR\|([$code])"
.IX Subsection "\f(CW$r\fR\->\fIcode\fR\|([$code])"
.Sh "\f(CW$r\fR\->\fImessage\fR\|([$message])"
.IX Subsection "\f(CW$r\fR\->\fImessage\fR\|([$message])"
.Sh "\f(CW$r\fR\->\fIrequest\fR\|([$request])"
.IX Subsection "\f(CW$r\fR\->\fIrequest\fR\|([$request])"
.Sh "\f(CW$r\fR\->\fIprevious\fR\|([$previousResponse])"
.IX Subsection "\f(CW$r\fR\->\fIprevious\fR\|([$previousResponse])"
These methods provide public access to the member variables.  The
first two containing respectively the response code and the message
of the response.
.PP
The request attribute is a reference the request that gave this
response.  It does not have to be the same request as passed to the
\f(CW$ua\fR\->\fIrequest()\fR method, because there might have been redirects and
authorization retries in between.
.PP
The previous attribute is used to link together chains of responses.
You get chains of responses if the first response is redirect or
unauthorized.
.Sh "\f(CW$r\fR\->base"
.IX Subsection "\f(CW$r\fR\->base"
Returns the base \s-1URL\s0 for this response.  The return value will be a
reference to a \s-1URI::URL\s0 object.
.PP
The base \s-1URL\s0 is obtained from one the following sources (in priority
order):
.Ip "1." 4
.IX Item "1."
Embedded in the document content, for instance <\s-1BASE\s0 \s-1HREF\s0=\*(R"...">
in \s-1HTML\s0 documents.
.Ip "2." 4
.IX Item "2."
A \*(L"Content-Base:\*(R" or a \*(L"Content-Location:\*(R" header in the response.
.Sp
For backwards compatability with older \s-1HTTP\s0 implementations we will
also look for the \*(L"Base:\*(R" header.
.Ip "3." 4
.IX Item "3."
The \s-1URL\s0 used to request this response. This might not be the original
\s-1URL\s0 that was passed to \f(CW$ua\fR\->\fIrequest()\fR method, because we might have
received some redirect responses first.
.PP
When the \s-1LWP\s0 protocol modules produce the \s-1HTTP::\s0Response object, then
any base \s-1URL\s0 embedded in the document (step 1) will already have
initialized the \*(L"Content-Base:\*(R" header. This means that this method
only perform the last 2 steps (the content is not always available
either).
.Sh "\f(CW$r\fR\->\fIas_string()\fR"
.IX Subsection "\f(CW$r\fR\->\fIas_string()\fR"
Method returning a textual representation of the request.  Mainly
useful for debugging purposes. It takes no arguments.
.Sh "\f(CW$r\fR\->is_info"
.IX Subsection "\f(CW$r\fR\->is_info"
.Sh "\f(CW$r\fR\->is_success"
.IX Subsection "\f(CW$r\fR\->is_success"
.Sh "\f(CW$r\fR\->is_redirect"
.IX Subsection "\f(CW$r\fR\->is_redirect"
.Sh "\f(CW$r\fR\->is_error"
.IX Subsection "\f(CW$r\fR\->is_error"
These methods indicate if the response was informational, sucessful, a
redirection, or an error.
.Sh "\f(CW$r\fR\->\fIerror_as_HTML()\fR"
.IX Subsection "\f(CW$r\fR\->\fIerror_as_HTML()\fR"
Return a string containing a complete \s-1HTML\s0 document indicating what
error occurred.  This method should only be called when \f(CW$r\fR\->is_error
is \s-1TRUE\s0.
.Sh "\f(CW$r\fR\->current_age"
.IX Subsection "\f(CW$r\fR\->current_age"
This function will calculate the \*(L"current age\*(R" of the response as
specified by <draft-ietf-http-v11-spec-07> section 13.2.3.  The
age of a response is the time since it was sent by the origin server.
The returned value is a number representing the age in seconds.
.Sh "\f(CW$r\fR\->freshness_lifetime"
.IX Subsection "\f(CW$r\fR\->freshness_lifetime"
This function will calculate the \*(L"freshness lifetime\*(R" of the response
as specified by <draft-ietf-http-v11-spec-07> section 13.2.4.  The
\*(L"freshness lifetime\*(R" is the length of time between the generation of a
response and its expiration time.  The returned value is a number
representing the freshness lifetime in seconds.
.PP
If the response does not contain an \*(L"Expires\*(R" or a \*(L"Cache-Control\*(R"
header, then this function will apply some simple heuristic based on
\*(L'Last-Modified\*(R' to determine a suitable lifetime.
.Sh "\f(CW$r\fR\->is_fresh"
.IX Subsection "\f(CW$r\fR\->is_fresh"
Returns \s-1TRUE\s0 if the response is fresh, based on the values of
\fIfreshness_lifetime()\fR and \fIcurrent_age()\fR.  If the response is not longer
fresh, then it has to be refetched or revalidated by the origin
server.
.Sh "\f(CW$r\fR\->fresh_until"
.IX Subsection "\f(CW$r\fR\->fresh_until"
Returns the time when this entiy is no longer fresh.

.rn }` ''
