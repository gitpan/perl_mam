.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH URI 3 "perl 5.007, patch 00" "30/Dec/101" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
URI \- Uniform Resource Identifiers (absolute and relative)
.SH "SYNOPSIS"
.PP
.Vb 5
\& $u1 = URI->new("http://www.perl.com");
\& $u2 = URI->new("foo", "http");
\& $u3 = $u2->abs($u1);
\& $u4 = $u3->clone;
\& $u5 = URI->new("HTTP://WWW.perl.com:80")->canonical;
.Ve
.Vb 2
\& $str = $u->as_string;
\& $str = "$u";
.Ve
.Vb 4
\& $scheme = $u->scheme;
\& $opaque = $u->opaque;
\& $path   = $u->path;
\& $frag   = $u->fragment;
.Ve
.Vb 3
\& $u->scheme("ftp");
\& $u->host("ftp.perl.com");
\& $u->path("cpan/");
.Ve
.SH "DESCRIPTION"
This module implements the \f(CWURI\fR class.  Objects of this class
represent \*(L"Uniform Resource Identifier references\*(R" as specified in RFC
2396 (and updated by RFC 2732).
.PP
A Uniform Resource Identifier is a compact string of characters for
identifying an abstract or physical resource.  A Uniform Resource
Identifier can be further classified either a Uniform Resource Locator
(URL) or a Uniform Resource Name (URN).  The distinction between URL
and URN does not matter to the \f(CWURI\fR class interface. A
\*(L"URI\-reference\*(R" is a URI that may have additional information attached
in the form of a fragment identifier.
.PP
An absolute URI reference consists of three parts.  A \fIscheme\fR, a
\fIscheme specific part\fR and a \fIfragment\fR identifier.  A subset of URI
references share a common syntax for hierarchical namespaces.  For
these the scheme specific part is further broken down into
\fIauthority\fR, \fIpath\fR and \fIquery\fR components.  These URI can also
take the form of relative URI references, where the scheme (and
usually also the authority) component is missing, but implied by the
context of the URI reference.  The three forms of URI reference
syntax are summarized as follows:
.PP
.Vb 3
\&  <scheme>:<scheme-specific-part>#<fragment>
\&  <scheme>://<authority><path>?<query>#<fragment>
\&  <path>?<query>#<fragment>
.Ve
The components that a URI reference can be divided into depend on the
\fIscheme\fR.  The \f(CWURI\fR class provides methods to get and set the
individual components.  The methods available for a specific
\f(CWURI\fR object depend on the scheme.
.SH "CONSTRUCTORS"
The following methods construct new \f(CWURI\fR objects:
.Ip "$uri = \s-1URI\s0\->new( $str, [$scheme] )" 4
This class method constructs a new \s-1URI\s0 object.  The string
representation of a \s-1URI\s0 is given as argument together with an optional
scheme specification.  Common \s-1URI\s0 wrappers like "" and <>, as well as
leading and trailing white space, are automatically removed from
the \f(CW$str\fR argument before it is processed further.
.Sp
The constructor determines the scheme, maps this to an appropriate
\s-1URI\s0 subclass, constructs a new object of that class and returns it.
.Sp
The \f(CW$scheme\fR argument is only used when \f(CW$str\fR is a
relative \s-1URI\s0.  It can either be a simple string that
denotes the scheme, a string containing an absolute \s-1URI\s0 reference or
an absolute \f(CWURI\fR object.  If no \f(CW$scheme\fR is specified for a relative
\s-1URI\s0 \f(CW$str\fR, then \f(CW$str\fR is simply treated as a generic \s-1URI\s0 (no scheme
specific methods available).
.Sp
The set of characters available for building \s-1URI\s0 references is
restricted (see the \fI\s-1URI::\s0Escape\fR manpage).  Characters outside this set are
automatically escaped by the \s-1URI\s0 constructor.
.Ip "$uri = \s-1URI\s0\->new_abs( $str, $base_uri )" 4
This constructs a new absolute \s-1URI\s0 object.  The \f(CW$str\fR argument can
denote a relative or absolute \s-1URI\s0.  If relative, then it will be
absolutized using \f(CW$base_uri\fR as base. The \f(CW$base_uri\fR must be an absolute
\s-1URI\s0.
.Ip "$uri = \s-1URI::\s0file->new( $filename, [$os] )" 4
This constructs a new \fIfile\fR \s-1URI\s0 from a file name.  See the \fI\s-1URI::\s0file\fR manpage.
.Ip "$uri = \s-1URI::\s0file->new_abs( $filename, [$os] )" 4
This constructs a new absolute \fIfile\fR \s-1URI\s0 from a file name.  See
the \fI\s-1URI::\s0file\fR manpage.
.Ip "$uri = \s-1URI::\s0file->cwd" 4
This returns the current working directory as a \fIfile\fR \s-1URI\s0.  See
the \fI\s-1URI::\s0file\fR manpage.
.Ip "$uri->clone" 4
This method returns a copy of the \f(CW$uri\fR.
.SH "COMMON METHODS"
The methods described in this section are available for all \f(CWURI\fR
objects.
.PP
Methods that give access to components of a URI will always return the
old value of the component.  The value returned will be \f(CWundef\fR if the
component was not present.  There is generally a difference between a
component that is empty (represented as \f(CW""\fR) and a component that is
missing (represented as \f(CWundef\fR).  If an accessor method is given an
argument it will update the corresponding component in addition to
returning the old value of the component.  Passing an undefined
argument will remove the component (if possible).  The description of
the various accessor methods will tell if the component is passed as
an escaped or an unescaped string.  Components that can be futher
divided into sub-parts are usually passed escaped, as unescaping might
change its semantics.
.PP
The common methods available for all URI are:
.Ip "$uri->scheme( [$new_scheme] )" 4
This method sets and returns the scheme part of the \f(CW$uri\fR.  If the \f(CW$uri\fR is
relative, then \f(CW$uri\fR\->scheme returns \f(CWundef\fR.  If called with an
argument, it will update the scheme of \f(CW$uri\fR, possibly changing the
class of \f(CW$uri\fR, and return the old scheme value.  The method croaks
if the new scheme name is illegal; scheme names must begin with a
letter and must consist of only \s-1US\s0\-\s-1ASCII\s0 letters, numbers, and a few
special marks: \*(L".\*(R", \*(L"+\*(R", \*(L"\-\*(R".  This restriction effectively means
that scheme have to be passed unescaped.  Passing an undefined
argument to the scheme method will make the \s-1URI\s0 relative (if possible).
.Sp
Letter case does not matter for scheme names.  The string
returned by \f(CW$uri\fR\->scheme is always lowercase.  If you want the scheme
just as it was written in the \s-1URI\s0 in its original case,
you can use the \f(CW$uri\fR\->_scheme method instead.
.Ip "$uri->opaque( [$new_opaque] )" 4
This method sets and returns the scheme specific part of the \f(CW$uri\fR 
(everything between the scheme and the fragment)
as an escaped string.
.Ip "$uri->path( [$new_path] )" 4
This method sets and returns the same value as \f(CW$uri\fR\->opaque unless the \s-1URI\s0
supports the generic syntax for hierarchical namespaces.
In that case the generic method is overridden to set and return
the part of the \s-1URI\s0 between the \fIhost name\fR and the \fIfragment\fR.
.Ip "$uri->fragment( [$new_frag] )" 4
This method returns the fragment identifier of a \s-1URI\s0 reference
as an escaped string.
.Ip "$uri->as_string" 4
This method returns a \s-1URI\s0 object to a plain string.  \s-1URI\s0 objects are
also converted to plain strings automatically by overloading.  This
means that \f(CW$uri\fR objects can be used as plain strings in most Perl
constructs.
.Ip "$uri->canonical" 4
This method will return a normalized version of the \s-1URI\s0.  The rules
for normalization are scheme dependent.  It usually involves
lowercasing of the scheme and the Internet host name components,
removing the explicit port specification if it matches the default port,
uppercasing all escape sequences, and unescaping octets that can be
better represented as plain characters.
.Sp
For efficiency reasons, if the \f(CW$uri\fR already was in normalized form,
then a reference to it is returned instead of a copy.
.Ip "$uri->eq( $other_uri )" 4
.Ip "\s-1URI::\s0eq( $first_uri, $other_uri )" 4
This method tests whether two \s-1URI\s0 references are equal.  \s-1URI\s0 references
that normalize to the same string are considered equal.  The method
can also be used as a plain function which can also test two string
arguments.
.Sp
If you need to test whether two \f(CWURI\fR object references denote the
same object, use the \*(L'==\*(R' operator.
.Ip "$uri->abs( $base_uri )" 4
This method returns an absolute \s-1URI\s0 reference.  If \f(CW$uri\fR already is
absolute, then a reference to it is simply returned.  If the \f(CW$uri\fR
is relative, then a new absolute \s-1URI\s0 is constructed by combining the
\f(CW$uri\fR and the \f(CW$base_uri\fR, and returned.
.Ip "$uri->rel( $base_uri )" 4
This method returns a relative \s-1URI\s0 reference if it is possible to
make one that denotes the same resource relative to \f(CW$base_uri\fR.
If not, then \f(CW$uri\fR is simply returned.
.SH "GENERIC METHODS"
The following methods are available to schemes that use the
common/generic syntax for hierarchical namespaces.  The description of
schemes below will tell which one these are.  Unknown schemes are
assumed to support the generic syntax, and therefore the following
methods:
.Ip "$uri->authority( [$new_authority] )" 4
This method sets and returns the escaped authority component
of the \f(CW$uri\fR.
.Ip "$uri->path( [$new_path] )" 4
This method sets and returns the escaped path component of
the \f(CW$uri\fR (the part between the host name and the query or fragment).
The path will never be undefined, but it can be the empty string.
.Ip "$uri->path_query( [$new_path_query] )" 4
This method sets and returns the escaped path and query
components as a single entity.  The path and the query are
separated by a \*(L"?\*(R" character, but the query can itself contain \*(L"?\*(R".
.Ip "$uri->path_segments( [$segment,...] )" 4
This method sets and returns the path.  In scalar context it returns
the same value as \f(CW$uri\fR\->path.  In list context it will return the
unescaped path segments that make up the path.  Path segments that
have parameters are returned as an anonymous array.  The first element
is the unescaped path segment proper.  Subsequent elements are escaped
parameter strings.  Such an anonymous array uses overloading so it can
be treated as a string too, but this string does not include the
parameters.
.Ip "$uri->query( [$new_query] )" 4
This method sets and returns the escaped query component of
the \f(CW$uri\fR.
.Ip "$uri->query_form( [$key => $value,...] )" 4
This method sets and returns query components that use the
\fIapplication/x-www-form-urlencoded\fR format.  Key/value pairs are
separated by \*(L"&\*(R" and the key is separated from the value with a \*(L"=\*(R"
character.
.Ip "$uri->query_keywords( [$keywords,...] )" 4
This method sets and returns query components that use the
keywords separated by \*(L"+\*(R" format.
.SH "SERVER METHODS"
Schemes where the \fIauthority\fR component denotes a Internet host will
have the following methods available in addition to the generic
methods.
.Ip "$uri->userinfo( [$new_userinfo] )" 4
This method sets and returns the escaped userinfo part of the
authority componenent.
.Sp
For some schemes this will be a user name and a password separated by
a colon.  This practice is not recommended. Embedding passwords in
clear text (such as \s-1URI\s0) has proven to be a security risk in almost
every case where it has been used.
.Ip "$uri->host( [$new_host] )" 4
This method sets and returns the unescaped hostname.
.Sp
If the \f(CW$new_host\fR string ends with a colon and a number, then this
number will also set the port.
.Ip "$uri->port( [ $new_port] )" 4
This method sets and returns the port.  The port is simple integer
that should be greater than 0.
.Sp
If no explicit port is specified in the \s-1URI\s0, then the default port of
the \s-1URI\s0 scheme is returned. If you don't want the default port
substituted, then you can use the \f(CW$uri\fR\->_port method instead.
.Ip "$uri->host_port( [ $new_host_port ] )" 4
This method sets and returns the host and port as a single
unit.  The returned value will include a port, even if it matches the
default port.  The host part and the port part is separated with a
colon; \*(L":\*(R".
.Ip "$uri->default_port" 4
This method returns the default port of the \s-1URI\s0 scheme that \f(CW$uri\fR
belongs to.  For \fIhttp\fR this will be the number 80, for \fIftp\fR this
will be the number 21, etc.  The default port for a scheme can not be
changed.
.SH "SCHEME SPECIFIC SUPPORT"
The following URI schemes are specifically supported.  For \f(CWURI\fR
objects not belonging to one of these you can only use the common and
generic methods.
.Ip "\fBdata\fR:" 4
The \fIdata\fR \s-1URI\s0 scheme is specified in \s-1RFC\s0 2397.  It allows inclusion
of small data items as \*(L"immediate\*(R" data, as if it had been included
externally.
.Sp
\f(CWURI\fR objects belonging to the data scheme support the common methods
and two new methods to access their scheme specific components;
\f(CW$uri\fR\->media_type and \f(CW$uri\fR\->data.  See the \fI\s-1URI::\s0data\fR manpage for details.
.Ip "\fBfile\fR:" 4
An old specification of the \fIfile\fR \s-1URI\s0 scheme is found in \s-1RFC\s0 1738.
A new \s-1RFC\s0 2396 based specification in not available yet, but file \s-1URI\s0
references are in common use.
.Sp
\f(CWURI\fR objects belonging to the file scheme support the common and
generic methods.  In addition they provide two methods to map file \s-1URI\s0
back to local file names; \f(CW$uri\fR\->file and \f(CW$uri\fR\->dir.  See the \fI\s-1URI::\s0file\fR manpage
for details.
.Ip "\fBftp\fR:" 4
An old specification of the \fIftp\fR \s-1URI\s0 scheme is found in \s-1RFC\s0 1738.  A
new \s-1RFC\s0 2396 based specification in not available yet, but ftp \s-1URI\s0
references are in common use.
.Sp
\f(CWURI\fR objects belonging to the ftp scheme support the common,
generic and server methods.  In addition they provide two methods to
access the userinfo sub-components: \f(CW$uri\fR\->user and \f(CW$uri\fR\->password.
.Ip "\fBgopher\fR:" 4
The \fIgopher\fR \s-1URI\s0 scheme is specified in
<draft-murali-url-gopher-1996-12-04> and will hopefully be available
as a \s-1RFC\s0 2396 based specification.
.Sp
\f(CWURI\fR objects belonging to the gopher scheme support the common,
generic and server methods. In addition they support some methods to
access gopher specific path components: \f(CW$uri\fR\->gopher_type,
\f(CW$uri\fR\->selector, \f(CW$uri\fR\->search, \f(CW$uri\fR\->string.
.Ip "\fBhttp\fR:" 4
The \fIhttp\fR \s-1URI\s0 scheme is specified in \s-1RFC\s0 2616.
The scheme is used to reference resources hosted by \s-1HTTP\s0 servers.
.Sp
\f(CWURI\fR objects belonging to the http scheme support the common,
generic and server methods.
.Ip "\fBhttps\fR:" 4
The \fIhttps\fR \s-1URI\s0 scheme is a Netscape invention which is commonly
implemented.  The scheme is used to reference \s-1HTTP\s0 servers through \s-1SSL\s0
connections.  It's syntax is the same as http, but the default
port is different.
.Ip "\fBldap\fR:" 4
The \fIldap\fR \s-1URI\s0 scheme is specified in \s-1RFC\s0 2255.  \s-1LDAP\s0 is the
Lightweight Directory Access Protocol.  An ldap \s-1URI\s0 describes an \s-1LDAP\s0
search operation to perform to retrieve information from an \s-1LDAP\s0
directory.
.Sp
\f(CWURI\fR objects belonging to the ldap scheme support the common,
generic and server methods as well as specific ldap methods; \f(CW$uri\fR\->dn,
\f(CW$uri\fR\->attributes, \f(CW$uri\fR\->scope, \f(CW$uri\fR\->filter, \f(CW$uri\fR\->extensions.  See
the \fI\s-1URI::\s0ldap\fR manpage for details.
.Ip "\fBmailto\fR:" 4
The \fImailto\fR \s-1URI\s0 scheme is specified in \s-1RFC\s0 2368.  The scheme was
originally used to designate the Internet mailing address of an
individual or service.  It has (in \s-1RFC\s0 2368) been extended to allow
setting of other mail header fields and the message body.
.Sp
\f(CWURI\fR objects belonging to the mailto scheme support the common
methods and the generic query methods.  In addition they support the
following mailto specific methods: \f(CW$uri\fR\->to, \f(CW$uri\fR\->headers.
.Ip "\fBnews\fR:" 4
The \fInews\fR, \fInntp\fR and \fIsnews\fR \s-1URI\s0 schemes are specified in
<draft-gilman-news-url-01> and will hopefully be available as a \s-1RFC\s0
2396 based specification soon.
.Sp
\f(CWURI\fR objects belonging to the news scheme support the common,
generic and server methods.  In addition they provide some methods to
access the path: \f(CW$uri\fR\->group and \f(CW$uri\fR\->message.
.Ip "\fBnntp\fR:" 4
See \fInews\fR scheme.
.Ip "\fBpop\fR:" 4
The \fIpop\fR \s-1URI\s0 scheme is specified in \s-1RFC\s0 2384. The scheme is used to
reference a \s-1POP3\s0 mailbox.
.Sp
\f(CWURI\fR objects belonging to the pop scheme support the common, generic
and server methods.  In addition they provide two methods to access the
userinfo components: \f(CW$uri\fR\->user and \f(CW$uri\fR\->auth
.Ip "\fBrlogin\fR:" 4
An old speficication of the \fIrlogin\fR \s-1URI\s0 scheme is found in \s-1RFC\s0
1738. \f(CWURI\fR objects belonging to the rlogin scheme support the
common, generic and server methods.
.Ip "\fBrsync\fR:" 4
Information about rsync is available from http://rsync.samba.org.
\f(CWURI\fR objects belonging to the rsync scheme support the common,
generic and server methods.  In addition they provide methods to
access the userinfo sub-components: \f(CW$uri\fR\->user and \f(CW$uri\fR\->password.
.Ip "\fBsnews\fR:" 4
See \fInews\fR scheme.  It's syntax is the same as news, but the default
port is different.
.Ip "\fBtelnet\fR:" 4
An old speficication of the \fItelnet\fR \s-1URI\s0 scheme is found in \s-1RFC\s0
1738. \f(CWURI\fR objects belonging to the telnet scheme support the
common, generic and server methods.
.Ip "\fBssh\fR:" 4
Information about ssh is available at http://www.openssh.com/.
\f(CWURI\fR objects belonging to the ssh scheme support the common,
generic and server methods. In addition they provide methods to
access the userinfo sub-components: \f(CW$uri\fR\->user and \f(CW$uri\fR\->password.
.SH "CONFIGURATION VARIABLES"
The following configuration variables influence how the class and it's
methods behave:
.Ip "$\s-1URI::ABS_ALLOW_RELATIVE_SCHEME\s0" 4
Some older parsers used to allow the scheme name to be present in the
relative \s-1URL\s0 if it was the same as the base \s-1URL\s0 scheme.  \s-1RFC\s0 2396 says
that this should be avoided, but you can enable this old behaviour by
setting the \f(CW$URI::ABS_ALLOW_RELATIVE_SCHEME\fR variable to a \s-1TRUE\s0 value.
The difference is demonstrated by the following examples:
.Sp
.Vb 2
\&  URI->new("http:foo")->abs("http://host/a/b")
\&      ==>  "http:foo"
.Ve
.Vb 3
\&  local $URI::ABS_ALLOW_RELATIVE_SCHEME = 1;
\&  URI->new("http:foo")->abs("http://host/a/b")
\&      ==>  "http:/host/a/foo"
.Ve
.Ip "$\s-1URI::ABS_REMOTE_LEADING_DOTS\s0" 4
You can also have the \fIabs()\fR method ignore excess \*(L"..\*(R"
segments in the relative \s-1URI\s0 by setting \f(CW$URI::ABS_REMOTE_LEADING_DOTS\fR
to a \s-1TRUE\s0 value.  The difference is demonstrated by the following
examples:
.Sp
.Vb 2
\&  URI->new("../../../foo")->abs("http://host/a/b")
\&      ==> "http://host/../../foo"
.Ve
.Vb 3
\&  local $URI::URL::ABS_REMOTE_LEADING_DOTS = 1;
\&  URI->new("../../../foo")->abs("http://host/a/b")
\&      ==> "http://host/foo"
.Ve
.SH "BUGS"
Using regexp variables like \f(CW$1\fR directly as argument to the URI methods
do not work too well with current perl implementations.  I would argue
that this is actually a bug in perl.  The workaround is to quote
them. E.g.:
.PP
.Vb 2
\&   /(...)/ || die;
\&   $u->query("$1");
.Ve
.SH "PARSING URIs WITH REGEXP"
As an alternative to this module, the following (official) regular
expression can be used to decode a URI:
.PP
.Vb 2
\&  my($scheme, $authority, $path, $query, $fragment) =
\&  $uri =~ m|^(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\e?([^#]*))?(?:#(.*))?|;
.Ve
.SH "SEE ALSO"
the \fIURI::file\fR manpage, the \fIURI::WithBase\fR manpage, the \fIURI::Escape\fR manpage, the \fIURI::Heuristic\fR manpage
.PP
RFC 2396: \*(L"Uniform Resource Identifiers (URI): Generic Syntax\*(R",
Berners-Lee, Fielding, Masinter, August 1998.
.SH "COPYRIGHT"
Copyright 1995-2001 Gisle Aas.
.PP
Copyright 1995 Martijn Koster.
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
.SH "AUTHORS / ACKNOWLEDGMENTS"
This module is based on the \f(CWURI::URL\fR module, which in turn was
(distantly) based on the \f(CWwwwurl.pl\fR code in the libwww-perl for
perl4 developed by Roy Fielding, as part of the Arcadia project at the
University of California, Irvine, with contributions from Brooks
Cutter.
.PP
\f(CWURI::URL\fR was developed by Gisle Aas, Tim Bunce, Roy Fielding and
Martijn Koster with input from other people on the libwww-perl mailing
list.
.PP
\f(CWURI\fR and related subclasses was developed by Gisle Aas.

.rn }` ''
.IX Title "URI 3"
.IX Name "URI - Uniform Resource Identifiers (absolute and relative)"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "CONSTRUCTORS"

.IX Item "$uri = \s-1URI\s0\->new( $str, [$scheme] )"

.IX Item "$uri = \s-1URI\s0\->new_abs( $str, $base_uri )"

.IX Item "$uri = \s-1URI::\s0file->new( $filename, [$os] )"

.IX Item "$uri = \s-1URI::\s0file->new_abs( $filename, [$os] )"

.IX Item "$uri = \s-1URI::\s0file->cwd"

.IX Item "$uri->clone"

.IX Header "COMMON METHODS"

.IX Item "$uri->scheme( [$new_scheme] )"

.IX Item "$uri->opaque( [$new_opaque] )"

.IX Item "$uri->path( [$new_path] )"

.IX Item "$uri->fragment( [$new_frag] )"

.IX Item "$uri->as_string"

.IX Item "$uri->canonical"

.IX Item "$uri->eq( $other_uri )"

.IX Item "\s-1URI::\s0eq( $first_uri, $other_uri )"

.IX Item "$uri->abs( $base_uri )"

.IX Item "$uri->rel( $base_uri )"

.IX Header "GENERIC METHODS"

.IX Item "$uri->authority( [$new_authority] )"

.IX Item "$uri->path( [$new_path] )"

.IX Item "$uri->path_query( [$new_path_query] )"

.IX Item "$uri->path_segments( [$segment,...] )"

.IX Item "$uri->query( [$new_query] )"

.IX Item "$uri->query_form( [$key => $value,...] )"

.IX Item "$uri->query_keywords( [$keywords,...] )"

.IX Header "SERVER METHODS"

.IX Item "$uri->userinfo( [$new_userinfo] )"

.IX Item "$uri->host( [$new_host] )"

.IX Item "$uri->port( [ $new_port] )"

.IX Item "$uri->host_port( [ $new_host_port ] )"

.IX Item "$uri->default_port"

.IX Header "SCHEME SPECIFIC SUPPORT"

.IX Item "\fBdata\fR:"

.IX Item "\fBfile\fR:"

.IX Item "\fBftp\fR:"

.IX Item "\fBgopher\fR:"

.IX Item "\fBhttp\fR:"

.IX Item "\fBhttps\fR:"

.IX Item "\fBldap\fR:"

.IX Item "\fBmailto\fR:"

.IX Item "\fBnews\fR:"

.IX Item "\fBnntp\fR:"

.IX Item "\fBpop\fR:"

.IX Item "\fBrlogin\fR:"

.IX Item "\fBrsync\fR:"

.IX Item "\fBsnews\fR:"

.IX Item "\fBtelnet\fR:"

.IX Item "\fBssh\fR:"

.IX Header "CONFIGURATION VARIABLES"

.IX Item "$\s-1URI::ABS_ALLOW_RELATIVE_SCHEME\s0"

.IX Item "$\s-1URI::ABS_REMOTE_LEADING_DOTS\s0"

.IX Header "BUGS"

.IX Header "PARSING URIs WITH REGEXP"

.IX Header "SEE ALSO"

.IX Header "COPYRIGHT"

.IX Header "AUTHORS / ACKNOWLEDGMENTS"

