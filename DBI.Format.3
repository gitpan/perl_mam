.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::DBI::Format 3 "perl 5.007, patch 00" "24/Aug/101" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
DBI::Format \- A package for displaying result tables
.SH "SYNOPSIS"
.PP
.Vb 2
\&  # create a new result object
\&  $r = DBI::Format->new('var1' => 'val1', ...);
.Ve
.Vb 2
\&  # Prepare it for output by creating a header
\&  $r->header($sth, $fh);
.Ve
.Vb 4
\&  # In a loop, display rows
\&  while ($ref = $sth->fetchrow_arrayref()) {
\&    $r->row($ref);
\&  }
.Ve
.Vb 2
\&  # Finally create a trailer
\&  $r->trailer();
.Ve
.SH "DESCRIPTION"
THIS PACKAGE IS STILL VERY EXPERIMENTAL. THINGS WILL CHANGE.
.PP
This package is used for making the output of DBI::Shell configurable.
The idea is to derive a subclass for any kind of output table you might
create. Examples are
.Ip "\(bu" 8
a very simple output format as offered by \fI\s-1DBI::\s0neat_list()\fR.
the section on \fI\s-1AVAILABLE\s0 \s-1SUBCLASSES\s0\fR.
.Ip "\(bu" 8
a box format, as offered by the Data::ShowTable module.
.Ip "\(bu" 8
\s-1HTML\s0 format, as used in \s-1CGI\s0 binaries
.Ip "\(bu" 8
postscript, to be piped into lpr or something similar
.PP
In the future the package should also support interactive methods, for
example tab completion.
.PP
These are the available methods:
.Ip "new(@attr)" 8
.Ip "new(\e%attr)" 8
(Class method) This is the constructor. You'd rather call a subclass
constructor. The construcor is accepting either a list of key/value
pairs or a hash ref.
.Ip "header($sth, $fh)" 8
(Instance method) This is called when a new result table should be
created to display the results of the statement handle \fB$sth\fR. The
(optional) argument \fB$fh\fR is an \s-1IO\s0 handle (or any object supporting
a \fIprint\fR method), usually you use an \s-1IO::\s0Wrap object for \s-1STDIN\s0.
.Sp
The method will query the \fB$sth\fR for its \fI\s-1NAME\s0\fR, \fI\s-1NUM_OF_FIELDS\s0\fR,
\fI\s-1TYPE\s0\fR, \fI\s-1SCALE\s0\fR and \fI\s-1PRECISION\s0\fR attributes and typically print a
header. In general you should not assume that \fB$sth\fR is indeed a \s-1DBI\s0
statement handle and better treat it as a hash ref with the above
attributes.
.Ip "row($ref)" 8
(Instance method) Prints the contents of the array ref \fB$ref\fR. Usually
you obtain this array ref by calling \fB$sth->fetchrow_arrayref()\fR.
.Ip "trailer" 8
(Instance method) Once you have passed all result rows to the result
package, you should call the \fItrailer\fR method. This method can, for
example print the number of result rows.
.SH "AVAILABLE SUBCLASSES"
First of all, you can use the DBI::Format package itself: It's
not an abstract base class, but a very simple default using
\fIDBI::neat_list()\fR.
.Sh "Ascii boxes"
This subclass is using the \fIBox\fR mode of the \fIData::ShowTable\fR module
internally. the \fIData::ShowTable(3)\fR manpage.
.Sh "Raw"
Row is written without formating.  Columns returned in comma or user defined
separated list.
.Sh "String"
Row is written using a string format.  Future releases may include the ability
set the string format, if someone contributes it.
.SH "AUTHOR AND COPYRIGHT"
This module is Copyright (c) 1997, 1998
.PP
.Vb 4
\&    Jochen Wiedmann
\&    Am Eisteich 9
\&    72555 Metzingen
\&    Germany
.Ve
.Vb 2
\&    Email: joe@ispsoft.de
\&    Phone: +49 7123 14887
.Ve
The DBD::Proxy module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
the \fIDBI::Shell(3)\fR manpage, the \fIDBI(3)\fR manpage, the \fIdbish(1)\fR manpage

.rn }` ''
.IX Title "lib::DBI::Format 3"
.IX Name "DBI::Format - A package for displaying result tables"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "new(@attr)"

.IX Item "new(\e%attr)"

.IX Item "header($sth, $fh)"

.IX Item "row($ref)"

.IX Item "trailer"

.IX Header "AVAILABLE SUBCLASSES"

.IX Subsection "Ascii boxes"

.IX Subsection "Raw"

.IX Subsection "String"

.IX Header "AUTHOR AND COPYRIGHT"

.IX Header "SEE ALSO"

