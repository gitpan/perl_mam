.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH ExtUtils::Liblist 3 "perl 5.005, patch 53" "8/Aug/98" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
ExtUtils::Liblist \- determine libraries to use and how to use them
.SH "SYNOPSIS"
\f(CWrequire ExtUtils::Liblist;\fR
.PP
\f(CWExtUtils::Liblist::ext($self, $potential_libs, $verbose);\fR
.SH "DESCRIPTION"
This utility takes a list of libraries in the form \f(CW-llib1 -llib2
-llib3\fR and prints out lines suitable for inclusion in an extension
Makefile.  Extra library paths may be included with the form
\f(CW-L/another/path\fR this will affect the searches for all subsequent
libraries.
.PP
It returns an array of four scalar values: EXTRALIBS, BSLOADLIBS,
LDLOADLIBS, and LD_RUN_PATH.  Some of these don't mean anything
on VMS and Win32.  See the details about those platform specifics
below.
.PP
Dependent libraries can be linked in one of three ways:
.Ip "\(bu For static extensions" 2
by the ld command when the perl binary is linked with the extension
library. See \s-1EXTRALIBS\s0 below.
.Ip "\(bu For dynamic extensions" 2
by the ld command when the shared object is built/linked. See
\s-1LDLOADLIBS\s0 below.
.Ip "\(bu For dynamic extensions" 2
by the DynaLoader when the shared object is loaded. See \s-1BSLOADLIBS\s0
below.
.Sh "\s-1EXTRALIBS\s0"
List of libraries that need to be linked with when linking a perl
binary which includes this extension Only those libraries that
actually exist are included.  These are written to a file and used
when linking perl.
.Sh "\s-1LDLOADLIBS\s0 and \s-1LD_RUN_PATH\s0"
List of those libraries which can or must be linked into the shared
library when created using ld. These may be static or dynamic
libraries.  \s-1LD_RUN_PATH\s0 is a colon separated list of the directories
in \s-1LDLOADLIBS\s0. It is passed as an environment variable to the process
that links the shared library.
.Sh "\s-1BSLOADLIBS\s0"
List of those libraries that are needed but can be linked in
dynamically at run time on this platform.  SunOS/Solaris does not need
this because ld records the information (from \s-1LDLOADLIBS\s0) into the
object file.  This list is used to create a .bs (bootstrap) file.
.SH "PORTABILITY"
This module deals with a lot of system dependencies and has quite a
few architecture specific \fBif\fRs in the code.
.Sh "\s-1VMS\s0 implementation"
The version of \fIext()\fR which is executed under \s-1VMS\s0 differs from the
Unix-\s-1OS/2\s0 version in several respects:
.Ip "\(bu" 2
Input library and path specifications are accepted with or without the
\f(CW-l\fR and \f(CW-L\fR prefices used by Unix linkers.  If neither prefix is
present, a token is considered a directory to search if it is in fact
a directory, and a library to search for otherwise.  Authors who wish
their extensions to be portable to Unix or \s-1OS/2\s0 should use the Unix
prefixes, since the Unix-\s-1OS/2\s0 version of \fIext()\fR requires them.
.Ip "\(bu" 2
Wherever possible, shareable images are preferred to object libraries,
and object libraries to plain object files.  In accordance with \s-1VMS\s0
naming conventions, \fIext()\fR looks for files named \fIlib\fRshr and \fIlib\fRrtl;
it also looks for \fIlib\fRlib and lib\fIlib\fR to accomodate Unix conventions
used in some ported software.
.Ip "\(bu" 2
For each library that is found, an appropriate directive for a linker options
file is generated.  The return values are space-separated strings of
these directives, rather than elements used on the linker command line.
.Ip "\(bu" 2
\s-1LDLOADLIBS\s0 contains both the libraries found based on \f(CW$potential_libs\fR and
the CRTLs, if any, specified in Config.pm.  \s-1EXTRALIBS\s0 contains just those
libraries found based on \f(CW$potential_libs\fR.  \s-1BSLOADLIBS\s0 and \s-1LD_RUN_PATH\s0
are always empty.
.PP
In addition, an attempt is made to recognize several common Unix library
names, and filter them out or convert them to their \s-1VMS\s0 equivalents, as
appropriate.
.PP
In general, the \s-1VMS\s0 version of \fIext()\fR should properly handle input from
extensions originally designed for a Unix or \s-1VMS\s0 environment.  If you
encounter problems, or discover cases where the search could be improved,
please let us know.
.Sh "Win32 implementation"
The version of \fIext()\fR which is executed under Win32 differs from the
Unix-\s-1OS/2\s0 version in several respects:
.Ip "\(bu" 2
If \f(CW$potential_libs\fR is empty, the return value will be empty.
Otherwise, the libraries specified by \f(CW$Config{libs}\fR (see Config.pm)
will be appended to the list of \f(CW$potential_libs\fR.  The libraries
will be searched for in the directories specified in \f(CW$potential_libs\fR
as well as in \f(CW$Config{libpth}\fR. For each library that is found,  a
space-separated list of fully qualified library pathnames is generated.
.Ip "\(bu" 2
Input library and path specifications are accepted with or without the
\f(CW-l\fR and \f(CW-L\fR prefices used by Unix linkers.
.Sp
An entry of the form \f(CW-La:\efoo\fR specifies the \f(CWa:\efoo\fR directory to look
for the libraries that follow.
.Sp
An entry of the form \f(CW-lfoo\fR specifies the library \f(CWfoo\fR, which may be
spelled differently depending on what kind of compiler you are using.  If
you are using \s-1GCC\s0, it gets translated to \f(CWlibfoo.a\fR, but for other win32
compilers, it becomes \f(CWfoo.lib\fR.  If no files are found by those translated
names, one more attempt is made to find them using either \f(CWfoo.a\fR or
\f(CWlibfoo.lib\fR, depending on whether \s-1GCC\s0 or some other win32 compiler is
being used, respectively.
.Sp
If neither the \f(CW-L\fR or \f(CW-l\fR prefix is present in an entry, the entry is
considered a directory to search if it is in fact a directory, and a
library to search for otherwise.  The \f(CW$Config{lib_ext}\fR suffix will
be appended to any entries that are not directories and don't already have
the suffix.
.Sp
Note that the \f(CW-L\fR and <\-l> prefixes are \fBnot required\fR, but authors
who wish their extensions to be portable to Unix or \s-1OS/2\s0 should use the
prefixes, since the Unix-\s-1OS/2\s0 version of \fIext()\fR requires them.
.Ip "\(bu" 2
Entries cannot be plain object files, as many Win32 compilers will
not handle object files in the place of libraries.
.Ip "\(bu" 2
Entries in \f(CW$potential_libs\fR beginning with a colon and followed by
alphanumeric characters are treated as flags.  Unknown flags will be ignored.
.Sp
An entry that matches \f(CW/:nodefault/i\fR disables the appending of default
libraries found in \f(CW$Config{libs}\fR (this should be only needed very rarely).
.Sp
An entry that matches \f(CW/:nosearch/i\fR disables all searching for
the libraries specified after it.  Translation of \f(CW-Lfoo\fR and
\f(CW-lfoo\fR still happens as appropriate (depending on compiler being used,
as reflected by \f(CW$Config{cc}\fR), but the entries are not verified to be
valid files or directories.
.Sp
An entry that matches \f(CW/:search/i\fR reenables searching for
the libraries specified after it.  You can put it at the end to
enable searching for default libraries specified by \f(CW$Config{libs}\fR.
.Ip "\(bu" 2
The libraries specified may be a mixture of static libraries and
import libraries (to link with DLLs).  Since both kinds are used
pretty transparently on the win32 platform, we do not attempt to
distinguish between them.
.Ip "\(bu" 2
\s-1LDLOADLIBS\s0 and \s-1EXTRALIBS\s0 are always identical under Win32, and \s-1BSLOADLIBS\s0
and \s-1LD_RUN_PATH\s0 are always empty (this may change in future).
.Ip "\(bu" 2
You must make sure that any paths and path components are properly
surrounded with double-quotes if they contain spaces. For example,
\f(CW$potential_libs\fR could be (literally):
.Sp
.Vb 1
\&        "-Lc:\eProgram Files\evc\elib" msvcrt.lib "la test\efoo bar.lib"
.Ve
Note how the first and last entries are protected by quotes in order
to protect the spaces.
.Ip "\(bu" 2
Since this module is most often used only indirectly from extension
\f(CWMakefile.PL\fR files, here is an example \f(CWMakefile.PL\fR entry to add
a library to the build process for an extension:
.Sp
.Vb 1
\&        LIBS => ['-lgl']
.Ve
When using \s-1GCC\s0, that entry specifies that MakeMaker should first look
for \f(CWlibgl.a\fR (followed by \f(CWgl.a\fR) in all the locations specified by
\f(CW$Config{libpth}\fR.
.Sp
When using a compiler other than \s-1GCC\s0, the above entry will search for
\f(CWgl.lib\fR (followed by \f(CWlibgl.lib\fR).
.Sp
If the library happens to be in a location not in \f(CW$Config{libpth}\fR,
you need:
.Sp
.Vb 1
\&        LIBS => ['-Lc:\egllibs -lgl']
.Ve
Here is a less often used example:
.Sp
.Vb 1
\&        LIBS => ['-lgl', ':nosearch -Ld:\emesalibs -lmesa -luser32']
.Ve
This specifies a search for library \f(CWgl\fR as before.  If that search
fails to find the library, it looks at the next item in the list. The
\f(CW:nosearch\fR flag will prevent searching for the libraries that follow,
so it simply returns the value as \f(CW-Ld:\emesalibs -lmesa -luser32\fR,
since \s-1GCC\s0 can use that value as is with its linker.
.Sp
When using the Visual C compiler, the second item is returned as
\f(CW-libpath:d:\emesalibs mesa.lib user32.lib\fR.
.Sp
When using the Borland compiler, the second item is returned as
\f(CW-Ld:\emesalibs mesa.lib user32.lib\fR, and MakeMaker takes care of
moving the \f(CW-Ld:\emesalibs\fR to the correct place in the linker
command line.
.SH "SEE ALSO"
the \fIExtUtils::MakeMaker\fR manpage

.rn }` ''
.IX Title "ExtUtils::Liblist 3"
.IX Name "ExtUtils::Liblist - determine libraries to use and how to use them"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Item "\(bu For static extensions"

.IX Item "\(bu For dynamic extensions"

.IX Item "\(bu For dynamic extensions"

.IX Subsection "\s-1EXTRALIBS\s0"

.IX Subsection "\s-1LDLOADLIBS\s0 and \s-1LD_RUN_PATH\s0"

.IX Subsection "\s-1BSLOADLIBS\s0"

.IX Header "PORTABILITY"

.IX Subsection "\s-1VMS\s0 implementation"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Subsection "Win32 implementation"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Item "\(bu"

.IX Header "SEE ALSO"

