.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH CGI::Carp 3 "perl 5.005, patch 53" "15/Jul/98" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
\fBCGI::Carp\fR \- CGI routines for writing to the HTTPD (or other) error log
.SH "SYNOPSIS"
.PP
.Vb 1
\&    use CGI::Carp;
.Ve
.Vb 5
\&    croak "We're outta here!";
\&    confess "It was my fault: $!";
\&    carp "It was your fault!";   
\&    warn "I'm confused";
\&    die  "I'm dying.\en";
.Ve
.SH "DESCRIPTION"
CGI scripts have a nasty habit of leaving warning messages in the error
logs that are neither time stamped nor fully identified.  Tracking down
the script that caused the error is a pain.  This fixes that.  Replace
the usual
.PP
.Vb 1
\&    use Carp;
.Ve
with
.PP
.Vb 1
\&    use CGI::Carp
.Ve
And the standard \fIwarn()\fR, die (), \fIcroak()\fR, \fIconfess()\fR and \fIcarp()\fR calls
will automagically be replaced with functions that write out nicely
time-stamped messages to the HTTP server error log.
.PP
For example:
.PP
.Vb 3
\&   [Fri Nov 17 21:40:43 1995] test.pl: I'm confused at test.pl line 3.
\&   [Fri Nov 17 21:40:43 1995] test.pl: Got an error message: Permission denied.
\&   [Fri Nov 17 21:40:43 1995] test.pl: I'm dying.
.Ve
.SH "REDIRECTING ERROR MESSAGES"
By default, error messages are sent to STDERR.  Most HTTPD servers
direct STDERR to the server's error log.  Some applications may wish
to keep private error logs, distinct from the server's error log, or
they may wish to direct error messages to STDOUT so that the browser
will receive them.
.PP
The \f(CWcarpout()\fR function is provided for this purpose.  Since
\fIcarpout()\fR is not exported by default, you must import it explicitly by
saying
.PP
.Vb 1
\&   use CGI::Carp qw(carpout);
.Ve
The \fIcarpout()\fR function requires one argument, which should be a
reference to an open filehandle for writing errors.  It should be
called in a \f(CWBEGIN\fR block at the top of the CGI application so that
compiler errors will be caught.  Example:
.PP
.Vb 6
\&   BEGIN {
\&     use CGI::Carp qw(carpout);
\&     open(LOG, ">>/usr/local/cgi-logs/mycgi-log") or
\&       die("Unable to open mycgi-log: $!\en");
\&     carpout(LOG);
\&   }
.Ve
\fIcarpout()\fR does not handle file locking on the log for you at this point.
.PP
The real STDERR is not closed -- it is moved to SAVEERR.  Some
servers, when dealing with CGI scripts, close their connection to the
browser when the script closes STDOUT and STDERR.  SAVEERR is used to
prevent this from happening prematurely.
.PP
You can pass filehandles to \fIcarpout()\fR in a variety of ways.  The \*(L"correct\*(R"
way according to Tom Christiansen is to pass a reference to a filehandle 
GLOB:
.PP
.Vb 1
\&    carpout(\e*LOG);
.Ve
This looks weird to mere mortals however, so the following syntaxes are
accepted as well:
.PP
.Vb 5
\&    carpout(LOG);
\&    carpout(main::LOG);
\&    carpout(main'LOG);
\&    carpout(\eLOG);
\&    carpout(\e'main::LOG');
.Ve
.Vb 1
\&    ... and so on
.Ve
FileHandle and other objects work as well.
.PP
Use of \fIcarpout()\fR is not great for performance, so it is recommended
for debugging purposes or for moderate-use applications.  A future
version of this module may delay redirecting STDERR until one of the
CGI::Carp methods is called to prevent the performance hit.
.SH "MAKING PERL ERRORS APPEAR IN THE BROWSER WINDOW"
If you want to send fatal (die, confess) errors to the browser, ask to 
import the special \*(L"fatalsToBrowser\*(R" subroutine:
.PP
.Vb 2
\&    use CGI::Carp qw(fatalsToBrowser);
\&    die "Bad error here";
.Ve
Fatal errors will now be echoed to the browser as well as to the log.  CGI::Carp
arranges to send a minimal HTTP header to the browser so that even errors that
occur in the early compile phase will be seen.
Nonfatal errors will still be directed to the log file only (unless redirected
with carpout).
.Sh "Changing the default message"
By default, the software error message is followed by a note to
contact the Webmaster by e-mail with the time and date of the error.
If this message is not to your liking, you can change it using the
\fIset_message()\fR routine.  This is not imported by default; you should
import it on the \fIuse()\fR line:
.PP
.Vb 2
\&    use CGI::Carp qw(fatalsToBrowser set_message);
\&    set_message("It's not a bug, it's a feature!");
.Ve
You may also pass in a code reference in order to create a custom
error message.  At run time, your code will be called with the text
of the error message that caused the script to die.  Example:
.PP
.Vb 9
\&    use CGI::Carp qw(fatalsToBrowser set_message);
\&    BEGIN {
\&       sub handle_errors {
\&          my $msg = shift;
\&          print "<h1>Oh gosh</h1>";
\&          print "Got an error: $msg";
\&      }
\&      set_message(\e&handle_errors);
\&    }
.Ve
In order to correctly intercept compile-time errors, you should call
\fIset_message()\fR from within a \s-1BEGIN\s0{} block.
.SH "CHANGE LOG"
1.05 \fIcarpout()\fR added and minor corrections by Marc Hedlund
     <hedlund@best.com> on 11/26/95.
.PP
1.06 \fIfatalsToBrowser()\fR no longer aborts for fatal errors within
     \fIeval()\fR statements.
.PP
1.08 \fIset_message()\fR added and \fIcarpout()\fR expanded to allow for FileHandle
     objects.
.PP
1.09 \fIset_message()\fR now allows users to pass a code REFERENCE for 
     really custom error messages.  croak and carp are now
     exported by default.  Thanks to Gunther Birznieks for the
     patches.
.PP
1.10 Patch from Chris Dean (ctdean@cogit.com) to allow 
     module to run correctly under mod_perl.
.SH "AUTHORS"
Lincoln D. Stein <lstein@genome.wi.mit.edu>.  Feel free to redistribute
this under the Perl Artistic License.
.SH "SEE ALSO"
Carp, CGI::Base, CGI::BasePlus, CGI::Request, CGI::MiniSvr, CGI::Form,
CGI::Response

.rn }` ''
.IX Title "CGI::Carp 3"
.IX Name "B<CGI::Carp> - CGI routines for writing to the HTTPD (or other) error log"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "REDIRECTING ERROR MESSAGES"

.IX Header "MAKING PERL ERRORS APPEAR IN THE BROWSER WINDOW"

.IX Subsection "Changing the default message"

.IX Header "CHANGE LOG"

.IX Header "AUTHORS"

.IX Header "SEE ALSO"

