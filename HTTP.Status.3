.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::HTTP::Status 3 "libwww-perl-5.64" "22/Nov/99" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
HTTP::Status \- HTTP Status code processing
.SH "SYNOPSIS"
.PP
.Vb 1
\& use HTTP::Status;
.Ve
.Vb 3
\& if ($rc != RC_OK) {
\&     print status_message($rc), "\en";
\& }
.Ve
.Vb 3
\& if (is_success($rc)) { ... }
\& if (is_error($rc)) { ... }
\& if (is_redirect($rc)) { ... }
.Ve
.SH "DESCRIPTION"
\fIHTTP::Status\fR is a library of routines for defining and
classifying HTTP status codes for libwww-perl.  Status codes are
used to encode the overall outcome of a HTTP response message.  Codes
correspond to those defined in RFC 2616 and RFC 2518.
.SH "CONSTANTS"
The following constant functions can be used as mnemonic status code
names:
.PP
.Vb 3
\&   RC_CONTINUE                          (100)
\&   RC_SWITCHING_PROTOCOLS               (101)
\&   RC_PROCESSING                        (102)
.Ve
.Vb 8
\&   RC_OK                                (200)
\&   RC_CREATED                           (201)
\&   RC_ACCEPTED                          (202)
\&   RC_NON_AUTHORITATIVE_INFORMATION     (203)
\&   RC_NO_CONTENT                        (204)
\&   RC_RESET_CONTENT                     (205)
\&   RC_PARTIAL_CONTENT                   (206)
\&   RC_MULTI_STATUS                      (207)
.Ve
.Vb 7
\&   RC_MULTIPLE_CHOICES                  (300)
\&   RC_MOVED_PERMANENTLY                 (301)
\&   RC_FOUND                             (302)
\&   RC_SEE_OTHER                         (303)
\&   RC_NOT_MODIFIED                      (304)
\&   RC_USE_PROXY                         (305)
\&   RC_TEMPORARY_REDIRECT                (307)
.Ve
.Vb 21
\&   RC_BAD_REQUEST                       (400)
\&   RC_UNAUTHORIZED                      (401)
\&   RC_PAYMENT_REQUIRED                  (402)
\&   RC_FORBIDDEN                         (403)
\&   RC_NOT_FOUND                         (404)
\&   RC_METHOD_NOT_ALLOWED                (405)
\&   RC_NOT_ACCEPTABLE                    (406)
\&   RC_PROXY_AUTHENTICATION_REQUIRED     (407)
\&   RC_REQUEST_TIMEOUT                   (408)
\&   RC_CONFLICT                          (409)
\&   RC_GONE                              (410)
\&   RC_LENGTH_REQUIRED                   (411)
\&   RC_PRECONDITION_FAILED               (412)
\&   RC_REQUEST_ENTITY_TOO_LARGE          (413)
\&   RC_REQUEST_URI_TOO_LARGE             (414)
\&   RC_UNSUPPORTED_MEDIA_TYPE            (415)
\&   RC_REQUEST_RANGE_NOT_SATISFIABLE     (416)
\&   RC_EXPECTATION_FAILED                (417)
\&   RC_UNPROCESSABLE_ENTITY              (422)
\&   RC_LOCKED                            (423)
\&   RC_FAILED_DEPENDENCY                 (424)
.Ve
.Vb 7
\&   RC_INTERNAL_SERVER_ERROR             (500)
\&   RC_NOT_IMPLEMENTED                   (501)
\&   RC_BAD_GATEWAY                       (502)
\&   RC_SERVICE_UNAVAILABLE               (503)
\&   RC_GATEWAY_TIMEOUT                   (504)
\&   RC_HTTP_VERSION_NOT_SUPPORTED        (505)
\&   RC_INSUFFICIENT_STORAGE              (507)
.Ve
.SH "FUNCTIONS"
The following additional functions are provided.  Most of them are
exported by default.
.Ip "status_message($code)" 4
The \fIstatus_message()\fR function will translate status codes to human
readable strings. The string is the same as found in the constant
names above.  If the \f(CW$code\fR is unknown, then \f(CWundef\fR is returned.
.Ip "is_info($code)" 4
Return \s-1TRUE\s0 if \f(CW$code\fR is an \fIInformational\fR status code.  This
class of status code indicates a provisional response which can't have
any content.
.Ip "is_success($code)" 4
Return \s-1TRUE\s0 if \f(CW$code\fR is a \fISuccessful\fR status code.
.Ip "is_redirect($code)" 4
Return \s-1TRUE\s0 if \f(CW$code\fR is a \fIRedirection\fR status code. This class of
status code indicates that further action needs to be taken by the
user agent in order to fulfill the request.
.Ip "is_error($code)" 4
Return \s-1TRUE\s0 if \f(CW$code\fR is an \fIError\fR status code.  The function
return \s-1TRUE\s0 for both client error or a server error status codes.
.Ip "is_client_error($code)" 4
Return \s-1TRUE\s0 if \f(CW$code\fR is an \fIClient Error\fR status code. This class
of status code is intended for cases in which the client seems to have
erred.
.Sp
This function is \fBnot\fR exported by default.
.Ip "is_server_error($code)" 4
Return \s-1TRUE\s0 if \f(CW$code\fR is an \fIServer Error\fR status code. This class
of status codes is intended for cases in which the server is aware
that it has erred or is incapable of performing the request.
.Sp
This function is \fBnot\fR exported by default.
.SH "BUGS"
Wished \f(CW@EXPORT_OK\fR had been used instead of \f(CW@EXPORT\fR in the beginning.
Now too much is exported by default.

.rn }` ''
.IX Title "lib::HTTP::Status 3"
.IX Name "HTTP::Status - HTTP Status code processing"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "CONSTANTS"

.IX Header "FUNCTIONS"

.IX Item "status_message($code)"

.IX Item "is_info($code)"

.IX Item "is_success($code)"

.IX Item "is_redirect($code)"

.IX Item "is_error($code)"

.IX Item "is_client_error($code)"

.IX Item "is_server_error($code)"

.IX Header "BUGS"

