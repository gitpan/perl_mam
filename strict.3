.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH strict 3 "perl 5.003, patch 05" "16/Aug/96" "Perl Programmers Reference Guide"
.IX Title "strict 3"
.UC
.IX Name "strict - Perl pragma to restrict unsafe constructs"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
strict \- Perl pragma to restrict unsafe constructs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 1
\&    use strict;
.Ve
.Vb 4
\&    use strict "vars";
\&    use strict "refs";
\&    use strict "subs";
\&    use strict "untie";
.Ve
.Vb 2
\&    use strict;
\&    no strict "vars";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
If no import list is supplied, all possible restrictions are assumed.
(This is the safest mode to operate in, but is sometimes too strict for
casual programming.)  Currently, there are four possible things to be
strict about:  \*(L"subs\*(R", \*(L"vars\*(R", \*(L"refs\*(R", and \*(L"untie\*(R".
.Ip "\f(CWstrict refs\fR" 6
.IX Item "\f(CWstrict refs\fR"
This generates a runtime error if you 
use symbolic references (see the \fIperlref\fR manpage).
.Sp
.Vb 5
\&    use strict 'refs';
\&    $ref = \e$foo;
\&    print $$ref;        # ok
\&    $ref = "foo";
\&    print $$ref;        # runtime error; normally ok
.Ve
.Ip "\f(CWstrict vars\fR" 6
.IX Item "\f(CWstrict vars\fR"
This generates a compile-time error if you access a variable that wasn't
localized via \f(CWmy()\fR or wasn't fully qualified.  Because this is to avoid
variable suicide problems and subtle dynamic scoping issues, a merely
\fIlocal()\fR variable isn't good enough.  See the \f(CWmy\fR entry in the \fIperlfunc\fR manpage and
the \f(CWlocal\fR entry in the \fIperlfunc\fR manpage.
.Sp
.Vb 4
\&    use strict 'vars';
\&    $X::foo = 1;         # ok, fully qualified
\&    my $foo = 10;        # ok, my() var
\&    local $foo = 9;      # blows up
.Ve
The \fIlocal()\fR generated a compile-time error because you just touched a global
name without fully qualifying it.
.Ip "\f(CWstrict subs\fR" 6
.IX Item "\f(CWstrict subs\fR"
This disables the poetry optimization, generating a compile-time error if
you try to use a bareword identifier that's not a subroutine, unless it
appears in curly braces or on the left hand side of the \*(L"=>\*(R" symbol.
.Sp
.Vb 4
\&    use strict 'subs';
\&    $SIG{PIPE} = Plumber;       # blows up
\&    $SIG{PIPE} = "Plumber";     # just fine: bareword in curlies always ok
\&    $SIG{PIPE} = \e&Plumber;     # preferred form
.Ve
.Ip "\f(CWstrict untie\fR" 6
.IX Item "\f(CWstrict untie\fR"
This generates a runtime error if any references to the object returned
by \f(CWtie\fR (or \f(CWtied\fR) still exist when \f(CWuntie\fR is called. Note that
to get this strict behaviour, the \f(CWuse strict 'untie'\fR statement must
be in the same scope as the \f(CWuntie\fR. See the \f(CWtie\fR entry in the \fIperlfunc\fR manpage,
the \f(CWuntie\fR entry in the \fIperlfunc\fR manpage, the \f(CWtied\fR entry in the \fIperlfunc\fR manpage and the \fIperltie\fR manpage.
.Sp
.Vb 9
\&    use strict 'untie';
\&    $a = tie %a, 'SOME_PKG';
\&    $b = tie %b, 'SOME_PKG';
\&    $b = 0;
\&    tie %c, PKG;
\&    $c = tied %c;
\&    untie %a ;          # blows up, $a is a valid object reference.
\&    untie %b;           # ok, $b is not a reference to the object.
\&    untie %c ;          # blows up, $c is a valid object reference.
.Ve
.PP
See the section on \fIPragmatic Modules\fR in the \fIperlmod\fR manpage.

.rn }` ''
