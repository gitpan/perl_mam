.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Stream 3 "perl 5.007, patch 00" "24/Oct/101" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
XML::Stream \- Creates and XML Stream connection and parses return data
.SH "SYNOPSIS"
.PP
.Vb 1
\&  XML::Stream is an attempt at solidifying the use of XML via streaming.
.Ve
.SH "DESCRIPTION"
.PP
.Vb 5
\&  This module provides the user with methods to connect to a remote server,
\&  send a stream of XML to the server, and receive/parse an XML stream from
\&  the server.  It is primarily based work for the Etherx XML router
\&  developed by the Jabber Development Team.  For more information about
\&  this project visit http://etherx.jabber.org/stream/.
.Ve
.Vb 6
\&  XML::Stream gives the user the ability to define a central callback
\&  that will be used to handle the tags received from the server.  These
\&  tags are passed in the format defined at instantiation time.
\&  the closing tag of an object is seen, the tree is finished and passed
\&  to the call back function.  What the user does with it from there is up
\&  to them.
.Ve
.Vb 3
\&  For a detailed description of how this module works, and about the data
\&  structure that it returns, please view the source of Stream.pm and
\&  look at the detailed description at the end of the file.
.Ve
.SH "METHODS"
.PP
.Vb 12
\&  new(debug=>string,       - creates the XML::Stream object.  debug should
\&      debugfh=>FileHandle,   be set to the path for the debug log to be
\&      debuglevel=>0|1|N,     written.  If set to "stdout" then the debug
\&      debugtime=>0|1,        will go there.   Also, you can specify a
\&      style=>string)         filehandle that already exists byt using
\&                             debugfh.  debuglevel determines the amount of
\&                             debug to generate.  0 is the least, 1 is a
\&                             little more, N is the limit you want.  debugtime
\&                             determines wether a timestamp should be
\&                             preappended to the entry.  style defines the
\&                             way the data structure is returned.  The two
\&                             available styles are:
.Ve
.Vb 2
\&                               tree - XML::Parser Tree format
\&                               hash - XML::Stream::Hash format
.Ve
.Vb 2
\&                             For more information see the respective man
\&                             pages.
.Ve
.Vb 32
\&  Connect(hostname=>string,       - opens a tcp connection to the
\&          port=>integer,            specified server and sends the proper
\&          to=>string,               opening XML Stream tag.  hostname,
\&          from=>string,             port, and namespace are required.
\&          myhostname=>string,       namespaces allows you to use
\&          namespace=>string,        XML::Stream::Namespace objects.
\&          namespaced=>array,        to is needed if you want the stream
\&          connectiontype=>string,   to attribute to be something other
\&          ssl=>0|1)                 than the hostname you are connecting
\&                                    to.  from is needed if you want the
\&                                    stream from attribute to be something
\&                                    other than the hostname you are
\&                                    connecting from.  myhostname should
\&                                    not be needed but if the module cannot
\&                                    determine your hostname properly (check
\&                                    the debug log), set this to the correct
\&                                    value, or if you want the other side
\&                                    of the  stream to think that you are
\&                                    someone else.  The type determines
\&                                    the kind of connection that is made:
\&                                      "tcpip"    - TCP/IP (default)
\&                                      "stdinout" - STDIN/STDOUT
\&                                      "http"     - HTTP
\&                                    HTTP recognizes proxies if the ENV
\&                                    variables http_proxy or https_proxy
\&                                    are set.  ssl specifies if an SLL
\&                                    socket should be used for encrypted
\&                                    communications.  This function returns
\&                                    the same hash from GetRoot() below.
\&                                    Make sure you get the SID (Session ID)
\&                                    since you have to use it to call most
\&                                    other functions in here.
.Ve
.Vb 6
\&  OpenFile(string) - opens a filehandle to the argument specified, and
\&                     pretends that it is a stream.  It will ignore the
\&                     outer tag, and not check if it was a <stream:stream/>.
\&                     This is useful for writing a program that has to
\&                     parse any XML file that is basically made up of
\&                     small packets (like RDF).
.Ve
.Vb 2
\&  Disconnect(sid) - sends the proper closing XML tag and closes the
\&                    specified socket down.
.Ve
.Vb 7
\&  Process(integer) - waits for data to be available on the socket.  If
\&                     a timeout is specified then the Process function
\&                     waits that period of time before returning nothing.
\&                     If a timeout period is not specified then the
\&                     function blocks until data is received.  The function
\&                     returns a hash with session ids as the key, and
\&                     status values or data as the hash values.
.Ve
.Vb 7
\&  SetCallBacks(node=>function,   - sets the callback that should be
\&               update=>function)   called in various situations.  node
\&                                   is used to handle the data structures
\&                                   that are built for each top level tag.
\&                                   Update is used for when Process is
\&                                   blocking waiting for data, but you want
\&                                   your original code to be updated.
.Ve
.Vb 2
\&  GetRoot(sid) - returns the attributes that the stream:stream tag sent by
\&                 the other end listed in a hash for the specified session.
.Ve
.Vb 2
\&  GetSock(sid) - returns a pointer to the IO::Socket object for the
\&                 specified session.
.Ve
.Vb 3
\&  Send(sid,    - sends the string over the specified connection as is.
\&       string)   This does no checking if valid XML was sent or not.
\&                 Best behavior when sending information.
.Ve
.Vb 4
\&  GetErrorCode(sid) - returns a string for the specified session that
\&                      will hopefully contain some useful information
\&                      about why Process or Connect returned an undef
\&                      to you.
.Ve
.SH "EXAMPLES"
.PP
.Vb 2
\&  ##########################
\&  # simple example
.Ve
.Vb 1
\&  use XML::Stream qw( Tree );
.Ve
.Vb 1
\&  $stream = new XML::Stream;
.Ve
.Vb 3
\&  my $status = $stream->Connect(hostname => "jabber.org",
\&                                port => 5222,
\&                                namespace => "jabber:client");
.Ve
.Vb 5
\&  if (!defined($status)) {
\&    print "ERROR: Could not connect to server\en";
\&    print "       (",$stream->GetErrorCode(),")\en";
\&    exit(0);
\&  }
.Ve
.Vb 3
\&  while($node = $stream->Process()) {
\&    # do something with $node
\&  }
.Ve
.Vb 1
\&  $stream->Disconnect();
.Ve
.Vb 2
\&  ###########################
\&  # example using a handler
.Ve
.Vb 1
\&  use XML::Stream qw( Tree );
.Ve
.Vb 6
\&  $stream = new XML::Stream;
\&  $stream->SetCallBacks(node=>\e&noder);
\&  $stream->Connect(hostname => "jabber.org",
\&                   port => 5222,
\&                   namespace => "jabber:client",
\&                   timeout => undef) || die $!;
.Ve
.Vb 3
\&  # Blocks here forever, noder is called for incoming
\&  # packets when they arrive.
\&  while(defined($stream->Process())) { }
.Ve
.Vb 1
\&  print "ERROR: Stream died (",$stream->GetErrorCode(),")\en";
.Ve
.Vb 6
\&  sub noder
\&  {
\&    my $sid = shift;
\&    my $node = shift;
\&    # do something with $node
\&  }
.Ve
.SH "AUTHOR"
Tweaked, tuned, and brightness changes by Ryan Eatmon, reatmon@ti.com
in May of 2000.
Colorized, and Dolby Surround sound added by Thomas Charron,
tcharron@jabber.org
By Jeremie in October of 1999 for http://etherx.jabber.org/streams/
.SH "COPYRIGHT"
This module is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

.rn }` ''
.IX Title "Stream 3"
.IX Name "XML::Stream - Creates and XML Stream connection and parses return data"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "METHODS"

.IX Header "EXAMPLES"

.IX Header "AUTHOR"

.IX Header "COPYRIGHT"

