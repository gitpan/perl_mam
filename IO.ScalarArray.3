.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::IO::ScalarArray 3 "perl 5.007, patch 00" "9/Aug/101" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
IO::ScalarArray \- IO:: interface for reading/writing an array of scalars
.SH "SYNOPSIS"
Perform I/O on strings, using the basic OO interface...
.PP
.Vb 2
\&    use IO::ScalarArray;
\&    @data = ("My mes", "sage:\en");
.Ve
.Vb 5
\&    ### Open a handle on an array, and append to it:
\&    $AH = new IO::ScalarArray \e@data;
\&    $AH->print("Hello");       
\&    $AH->print(", world!\enBye now!\en");  
\&    print "The array is now: ", @data, "\en";
.Ve
.Vb 6
\&    ### Open a handle on an array, read it line-by-line, then close it:
\&    $AH = new IO::ScalarArray \e@data;
\&    while (defined($_ = $AH->getline)) { 
\&        print "Got line: $_";
\&    }
\&    $AH->close;
.Ve
.Vb 3
\&    ### Open a handle on an array, and slurp in all the lines:
\&    $AH = new IO::ScalarArray \e@data;
\&    print "All lines:\en", $AH->getlines; 
.Ve
.Vb 3
\&    ### Get the current position (either of two ways):
\&    $pos = $AH->getpos;         
\&    $offset = $AH->tell;  
.Ve
.Vb 3
\&    ### Set the current position (either of two ways):
\&    $AH->setpos($pos);        
\&    $AH->seek($offset, 0);
.Ve
.Vb 4
\&    ### Open an anonymous temporary array:
\&    $AH = new IO::ScalarArray;
\&    $AH->print("Hi there!");
\&    print "I printed: ", @{$AH->aref}, "\en";      ### get at value
.Ve
Don't like OO for your I/O?  No problem.  
Thanks to the magic of an invisible \fItie()\fR, the following now 
works out of the box, just as it does with IO::Handle:
    
    use IO::ScalarArray;
    \f(CW@data\fR = ("My mes\*(R", \*(L"sage:\en");
.PP
.Vb 5
\&    ### Open a handle on an array, and append to it:
\&    $AH = new IO::ScalarArray \e@data;
\&    print $AH "Hello";    
\&    print $AH ", world!\enBye now!\en";
\&    print "The array is now: ", @data, "\en";
.Ve
.Vb 6
\&    ### Open a handle on a string, read it line-by-line, then close it:
\&    $AH = new IO::ScalarArray \e@data;
\&    while (<$AH>) {
\&        print "Got line: $_";
\&    }
\&    close $AH;
.Ve
.Vb 3
\&    ### Open a handle on a string, and slurp in all the lines:
\&    $AH = new IO::ScalarArray \e@data;
\&    print "All lines:\en", <$AH>;
.Ve
.Vb 2
\&    ### Get the current position (WARNING: requires 5.6):
\&    $offset = tell $AH;
.Ve
.Vb 2
\&    ### Set the current position (WARNING: requires 5.6):
\&    seek $AH, $offset, 0;
.Ve
.Vb 4
\&    ### Open an anonymous temporary scalar:
\&    $AH = new IO::ScalarArray;
\&    print $AH "Hi there!";
\&    print "I printed: ", @{$AH->aref}, "\en";      ### get at value
.Ve
And for you folks with 1.x code out there: the old \fItie()\fR style still works,
though this is \fIunnecessary and deprecated\fR:
.PP
.Vb 1
\&    use IO::ScalarArray;
.Ve
.Vb 5
\&    ### Writing to a scalar...
\&    my @a; 
\&    tie *OUT, 'IO::ScalarArray', \e@a;
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    print "Array is now: ", @a, "\en"
.Ve
.Vb 7
\&    ### Reading and writing an anonymous scalar... 
\&    tie *OUT, 'IO::ScalarArray';
\&    print OUT "line 1\enline 2\en", "line 3\en";
\&    tied(OUT)->seek(0,0);
\&    while (<OUT>) { 
\&        print "Got line: ", $_;
\&    }
.Ve
.SH "DESCRIPTION"
This class is part of the IO::Stringy distribution;
see the \fIIO::Stringy\fR manpage for change log and general information.
.PP
The IO::ScalarArray class implements objects which behave just like 
IO::Handle (or FileHandle) objects, except that you may use them 
to write to (or read from) arrays of scalars.  Logically, an
array of scalars defines an in-core \*(L"file\*(R" whose contents are
the concatenation of the scalars in the array.  The handles created by 
this class are automatically tiehandle'd (though please see the section on \fIWARNINGS\fR
for information relevant to your Perl version).
.PP
For writing large amounts of data with individual \fIprint()\fR statements, 
this class is likely to be more efficient than IO::Scalar.
.PP
Basically, this:
.PP
.Vb 4
\&    my @a;
\&    $AH = new IO::ScalarArray \e@a;
\&    $AH->print("Hel", "lo, ");         ### OO style
\&    $AH->print("world!\en");            ### ditto
.Ve
Or this:
.PP
.Vb 4
\&    my @a;
\&    $AH = new IO::ScalarArray \e@a;
\&    print $AH "Hel", "lo, ";           ### non-OO style
\&    print $AH "world!\en";              ### ditto
.Ve
Causes \f(CW@a\fR to be set to the following array of 3 strings:
.PP
.Vb 3
\&    ( "Hel" , 
\&      "lo, " , 
\&      "world!\en" )
.Ve
See the \fIIO::Scalar\fR manpage and compare with this class.
.SH "PUBLIC INTERFACE"
.Sh "Construction "
.Ip "new [\s-1ARGS\s0...]" 4
\fIClass method.\fR
Return a new, unattached array handle.  
If any arguments are given, they're sent to \fIopen()\fR.
.Ip "open [\s-1ARRAYREF\s0]" 4
\fIInstance method.\fR
Open the array handle on a new array, pointed to by \s-1ARRAYREF\s0.
If no \s-1ARRAYREF\s0 is given, a \*(L"private\*(R" array is created to hold
the file data.
.Sp
Returns the self object on success, undefined on error.
.Ip "opened" 4
\fIInstance method.\fR
Is the array handle opened on something?
.Ip "close" 4
\fIInstance method.\fR
Disassociate the array handle from its underlying array.
Done automatically on destroy.
.Sh "Input and output"
.Ip "flush " 4
\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.Ip "getc" 4
\fIInstance method.\fR
Return the next character, or undef if none remain.
This does a \fIread\fR\|(1), which is somewhat costly.
.Ip "getline" 4
\fIInstance method.\fR
Return the next line, or undef on end of data.
Can safely be called in an array context.
Currently, lines are delimited by \*(L"\en\*(R".
.Ip "getlines" 4
\fIInstance method.\fR
Get all remaining lines.
It will \fIcroak()\fR if accidentally called in a scalar context.
.Ip "print \s-1ARGS\s0..." 4
\fIInstance method.\fR
Print \s-1ARGS\s0 to the underlying array.  
.Sp
Currently, this always causes a \*(L"seek to the end of the array\*(R"
and generates a new array entry.  This may change in the future.
.Ip "read \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0];" 4
\fIInstance method.\fR
Read some bytes from the array.
Returns the number of bytes actually read, 0 on end-of-file, undef on error.
.Ip "write \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0];" 4
\fIInstance method.\fR
Write some bytes into the array.
.Sh "Seeking/telling and other attributes"
.Ip "autoflush " 4
\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.Ip "binmode" 4
\fIInstance method.\fR
No-op, provided for \s-1OO\s0 compatibility.
.Ip "clearerr" 4
\fIInstance method.\fR  Clear the error and \s-1EOF\s0 flags.  A no-op.
.Ip "eof " 4
\fIInstance method.\fR  Are we at end of file?
.Ip "seek \s-1POS\s0,\s-1WHENCE\s0" 4
\fIInstance method.\fR
Seek to a given position in the stream.
Only a \s-1WHENCE\s0 of 0 (\s-1SEEK_SET\s0) is supported.
.Ip "tell" 4
\fIInstance method.\fR
Return the current position in the stream, as a numeric offset.
.Ip "setpos \s-1POS\s0" 4
\fIInstance method.\fR
Seek to a given position in the array, using the opaque \fIgetpos()\fR value.
Don't expect this to be a number.
.Ip "getpos" 4
\fIInstance method.\fR
Return the current position in the array, as an opaque value.
Don't expect this to be a number.
.Ip "aref" 4
\fIInstance method.\fR
Return a reference to the underlying array.
.SH "WARNINGS"
Perl's TIEHANDLE spec was incomplete prior to 5.005_57;
it was missing support for \f(CWseek()\fR, \f(CWtell()\fR, and \f(CWeof()\fR.
Attempting to use these functions with an IO::ScalarArray will not work
prior to 5.005_57. IO::ScalarArray will not have the relevant methods 
invoked; and even worse, this kind of bug can lie dormant for a while.
If you turn warnings on (via \f(CW$^W\fR or \f(CWperl -w\fR),
and you see something like this...
.PP
.Vb 1
\&    attempt to seek on unopened filehandle
.Ve
\&...then you are probably trying to use one of these functions
on an IO::ScalarArray with an old Perl.  The remedy is to simply
use the OO version; e.g.:
.PP
.Vb 2
\&    $AH->seek(0,0);    ### GOOD: will work on any 5.005
\&    seek($AH,0,0);     ### WARNING: will only work on 5.005_57 and beyond
.Ve
.SH "VERSION"
$Id: ScalarArray.pm,v 2.103 2001/08/09 08:04:44 eryq Exp $
.SH "AUTHOR"
.Sh "Principal author"
Eryq (\fIeryq@zeegee.com\fR).
President, ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.Sh "Other contributors "
Thanks to the following individuals for their invaluable contributions
(if I've forgotten or misspelled your name, please email me!):
.PP
\fIAndy Glew,\fR
for suggesting \f(CWgetc()\fR.
.PP
\fIBrandon Browning,\fR
for suggesting \f(CWopened()\fR.
.PP
\fIEric L. Brine,\fR
for his offset-using \fIread()\fR and \fIwrite()\fR implementations. 
.PP
\fIDoug Wilson,\fR
for the \s-1IO::\s0Handle inheritance and automatic tie-ing.

.rn }` ''
.IX Title "lib::IO::ScalarArray 3"
.IX Name "IO::ScalarArray - IO:: interface for reading/writing an array of scalars"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "PUBLIC INTERFACE"

.IX Subsection "Construction "

.IX Item "new [\s-1ARGS\s0...]"

.IX Item "open [\s-1ARRAYREF\s0]"

.IX Item "opened"

.IX Item "close"

.IX Subsection "Input and output"

.IX Item "flush "

.IX Item "getc"

.IX Item "getline"

.IX Item "getlines"

.IX Item "print \s-1ARGS\s0..."

.IX Item "read \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0];"

.IX Item "write \s-1BUF\s0, \s-1NBYTES\s0, [\s-1OFFSET\s0];"

.IX Subsection "Seeking/telling and other attributes"

.IX Item "autoflush "

.IX Item "binmode"

.IX Item "clearerr"

.IX Item "eof "

.IX Item "seek \s-1POS\s0,\s-1WHENCE\s0"

.IX Item "tell"

.IX Item "setpos \s-1POS\s0"

.IX Item "getpos"

.IX Item "aref"

.IX Header "WARNINGS"

.IX Header "VERSION"

.IX Header "AUTHOR"

.IX Subsection "Principal author"

.IX Subsection "Other contributors "

