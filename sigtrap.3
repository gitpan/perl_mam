.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH sigtrap 3 "perl 5.004, patch 55" "25/Nov/97" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
sigtrap \- Perl pragma to enable simple signal handling
.SH "SYNOPSIS"
.PP
.Vb 11
\&    use sigtrap;
\&    use sigtrap qw(stack-trace old-interface-signals);  # equivalent
\&    use sigtrap qw(BUS SEGV PIPE ABRT);
\&    use sigtrap qw(die INT QUIT);
\&    use sigtrap qw(die normal-signals);
\&    use sigtrap qw(die untrapped normal-signals);
\&    use sigtrap qw(die untrapped normal-signals
\&                    stack-trace any error-signals);
\&    use sigtrap 'handler' => \e&my_handler, 'normal-signals';
\&    use sigtrap qw(handler my_handler normal-signals
\&                    stack-trace error-signals);
.Ve
.SH "DESCRIPTION"
The \fBsigtrap\fR pragma is a simple interface to installing signal
handlers.  You can have it install one of two handlers supplied by
\fBsigtrap\fR itself (one which provides a Perl stack trace and one which
simply \f(CWdie()\fRs), or alternately you can supply your own handler for it
to install.  It can be told only to install a handler for signals which
are either untrapped or ignored.  It has a couple of lists of signals to
trap, plus you can supply your own list of signals.
.PP
The arguments passed to the \f(CWuse\fR statement which invokes \fBsigtrap\fR
are processed in order.  When a signal name or the name of one of
\fBsigtrap\fR's signal lists is encountered a handler is immediately
installed, when an option is encountered it affects subsequently
installed handlers.
.SH "OPTIONS"
.Sh "\s-1SIGNAL\s0 \s-1HANDLERS\s0"
These options affect which handler will be used for subsequently
installed signals.
.Ip "\fBstack-trace\fR" 4
The handler used for subsequently installed signals outputs a Perl stack
trace to \s-1STDERR\s0 and then tries to dump core.  This is the default signal
handler.
.Ip "\fBdie\fR" 4
The handler used for subsequently installed signals calls \f(CWdie\fR
(actually \f(CWcroak\fR) with a message indicating which signal was caught.
.Ip "\fBhandler\fR \fIyour-handler\fR" 4
\fIyour-handler\fR will be used as the handler for subsequently installed
signals.  \fIyour-handler\fR can be any value which is valid as an
assignment to an element of \f(CW%SIG\fR.
.Sh "\s-1SIGNAL\s0 \s-1LISTS\s0"
\fBsigtrap\fR has a few built-in lists of signals to trap.  They are:
.Ip "\fBnormal-signals\fR" 4
These are the signals which a program might normally expect to encounter
and which by default cause it to terminate.  They are \s-1HUP\s0, \s-1INT\s0, \s-1PIPE\s0 and
\s-1TERM\s0.
.Ip "\fBerror-signals\fR" 4
These signals usually indicate a serious problem with the Perl
interpreter or with your script.  They are \s-1ABRT\s0, \s-1BUS\s0, \s-1EMT\s0, \s-1FPE\s0, \s-1ILL\s0,
\s-1QUIT\s0, \s-1SEGV\s0, \s-1SYS\s0 and \s-1TRAP\s0.
.Ip "\fBold-interface-signals\fR" 4
These are the signals which were trapped by default by the old
\fBsigtrap\fR interface, they are \s-1ABRT\s0, \s-1BUS\s0, \s-1EMT\s0, \s-1FPE\s0, \s-1ILL\s0, \s-1PIPE\s0, \s-1QUIT\s0,
\s-1SEGV\s0, \s-1SYS\s0, \s-1TERM\s0, and \s-1TRAP\s0.  If no signals or signals lists are passed to
\fBsigtrap\fR, this list is used.
.PP
For each of these three lists, the collection of signals set to be
trapped is checked before trapping; if your architecture does not
implement a particular signal, it will not be trapped but rather
silently ignored.
.Sh "\s-1OTHER\s0"
.Ip "\fBuntrapped\fR" 4
This token tells \fBsigtrap\fR to install handlers only for subsequently
listed signals which aren't already trapped or ignored.
.Ip "\fBany\fR" 4
This token tells \fBsigtrap\fR to install handlers for all subsequently
listed signals.  This is the default behavior.
.Ip "\fIsignal\fR" 4
Any argument which looks like a signal name (that is,
\f(CW/^[A-Z][A-Z0-9]*$/\fR) indicates that \fBsigtrap\fR should install a
handler for that name.
.Ip "\fInumber\fR" 4
Require that at least version \fInumber\fR of \fBsigtrap\fR is being used.
.SH "EXAMPLES"
Provide a stack trace for the old-interface-signals:
.PP
.Vb 1
\&    use sigtrap;
.Ve
Ditto:
.PP
.Vb 1
\&    use sigtrap qw(stack-trace old-interface-signals);
.Ve
Provide a stack trace on the 4 listed signals only:
.PP
.Vb 1
\&    use sigtrap qw(BUS SEGV PIPE ABRT);
.Ve
Die on INT or QUIT:
.PP
.Vb 1
\&    use sigtrap qw(die INT QUIT);
.Ve
Die on HUP, INT, PIPE or TERM:
.PP
.Vb 1
\&    use sigtrap qw(die normal-signals);
.Ve
Die on HUP, INT, PIPE or TERM, except don't change the behavior for
signals which are already trapped or ignored:
.PP
.Vb 1
\&    use sigtrap qw(die untrapped normal-signals);
.Ve
Die on receipt one of an of the \fBnormal-signals\fR which is currently
\fBuntrapped\fR, provide a stack trace on receipt of \fBany\fR of the
\fBerror-signals\fR:
.PP
.Vb 2
\&    use sigtrap qw(die untrapped normal-signals
\&                    stack-trace any error-signals);
.Ve
Install \fImy_handler()\fR as the handler for the \fBnormal-signals\fR:
.PP
.Vb 1
\&    use sigtrap 'handler', \e&my_handler, 'normal-signals';
.Ve
Install \fImy_handler()\fR as the handler for the normal-signals, provide a
Perl stack trace on receipt of one of the error-signals:
.PP
.Vb 2
\&    use sigtrap qw(handler my_handler normal-signals
\&                    stack-trace error-signals);
.Ve

.rn }` ''
.IX Title "sigtrap 3"
.IX Name "sigtrap - Perl pragma to enable simple signal handling"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "OPTIONS"

.IX Subsection "\s-1SIGNAL\s0 \s-1HANDLERS\s0"

.IX Item "\fBstack-trace\fR"

.IX Item "\fBdie\fR"

.IX Item "\fBhandler\fR \fIyour-handler\fR"

.IX Subsection "\s-1SIGNAL\s0 \s-1LISTS\s0"

.IX Item "\fBnormal-signals\fR"

.IX Item "\fBerror-signals\fR"

.IX Item "\fBold-interface-signals\fR"

.IX Subsection "\s-1OTHER\s0"

.IX Item "\fBuntrapped\fR"

.IX Item "\fBany\fR"

.IX Item "\fIsignal\fR"

.IX Item "\fInumber\fR"

.IX Header "EXAMPLES"

