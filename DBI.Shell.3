.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::DBI::Shell 3 "perl 5.007, patch 00" "10/Jan/102" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
DBI::Shell \- Interactive command shell for the DBI
.SH "SYNOPSIS"
.PP
.Vb 1
\&  perl -MDBI::Shell -e shell [<DBI data source> [<user> [<password>]]]
.Ve
or
.PP
.Vb 1
\&  dbish [<DBI data source> [<user> [<password>]]]
.Ve
.SH "DESCRIPTION"
The DBI::Shell module (and dbish command, if installed) provide a
simple but effective command line interface for the Perl DBI module.
.PP
DBI::Shell is very new, very experimental and very subject to change.
Your milage \fIwill\fR vary. Interfaces \fIwill\fR change with each release.
.SH "TO DO"
Proper docs \- but not yet, too much is changing.
.PP
\*(L"/source file\*(R" command to read command file.
Allow to nest via stack of command file handles.
Add command log facility to create batch files.
.PP
Commands:
	load (query?) from file
	save (query?) to file
.PP
Use Data::ShowTable if available.
.PP
Define DBI::Shell plug-in semantics.
	Implement import/export as plug-in module
.PP
Clarify meaning of batch mode
.PP
Completion hooks
.PP
Set/Get DBI handle attributes
.PP
Portability
.PP
Emulate popular command shell modes (Oracle, Ingres etc)?
.SH "COMMANDS"
Many commands \- few documented, yet!
.Ip "help" 4
.Sp
.Vb 1
\&  /help
.Ve
.Ip "chistory" 4
.Sp
.Vb 2
\&  /chistory          (display history of all commands entered)
\&  /chistory | YourPager (display history with paging)
.Ve
.Ip "clear" 4
.Sp
.Vb 1
\&  /clear             (Clears the current command buffer)
.Ve
.Ip "commit" 4
.Sp
.Vb 1
\&  /commit            (commit changes to the database)
.Ve
.Ip "connect" 4
.Sp
.Vb 3
\&  /connect           (pick from available drivers and sources)
\&  /connect dbi:Oracle (pick source from based on driver)
\&  /connect dbi:YourDriver:YourSource i.e. dbi:Oracle:mysid
.Ve
Use this option to change userid or password.
.Ip "current" 4
.Sp
.Vb 1
\&  /current            (Display current statement in the buffer)
.Ve
.Ip "do" 4
.Sp
.Vb 1
\&  /do                 (execute the current (non-select) statement)
.Ve
.Vb 2
\&        dbish> create table foo ( mykey integer )
\&        dbish> /do
.Ve
.Vb 1
\&        dbish> truncate table OldTable /do (Oracle truncate)
.Ve
.Ip "drivers" 4
.Sp
.Vb 1
\&  /drivers            (Display available DBI drivers)
.Ve
.Ip "edit" 4
.Sp
.Vb 1
\&  /edit               (Edit current statement in an external editor)
.Ve
Editor is defined using the enviroment variable \f(CW$VISUAL\fR or
\f(CW$EDITOR\fR or default is vi.  Use /option editor=new editor to change
in the current session.
.Sp
To read a file from the operating system invoke the editor (/edit)
and read the file into the editor buffer.
.Ip "exit" 4
.Sp
.Vb 1
\&  /exit              (Exits the shell)
.Ve
.Ip "get" 4
.Sp
.Vb 1
\&  /get               (Retrieve a previous command to the current buffer)
.Ve
.Ip "go" 4
.Sp
.Vb 1
\&  /go                (Execute the current statement)
.Ve
Run (execute) the statement in the current buffer.  This is the default
action if the statement ends with /
.Sp
.Vb 1
\&        dbish> select * from user_views/
.Ve
.Vb 3
\&        dbish> select table_name from user_tables
\&        dbish> where table_name like 'DSP%'
\&        dbish> /
.Ve
.Vb 1
\&        dbish> select table_name from all_tables/ | more
.Ve
.Ip "history" 4
.Sp
.Vb 2
\&  /history            (Display combined command and result history)
\&  /history | more
.Ve
.Ip "option" 4
.Sp
.Vb 4
\&  /option [option1[=value]] [option2 ...]
\&  /option            (Displays the current options)
\&  /option   MyOption (Displays the value, if exists, of MyOption)
\&  /option   MyOption=4 (defines and/or sets value for MyOption)
.Ve
.Ip "perl" 4
.Sp
.Vb 1
\&  /perl               (Evaluate the current statement as perl code)
.Ve
.Ip "quit" 4
.Sp
.Vb 1
\&  /quit               (Leaves shell.  Same as exit)
.Ve
.Ip "redo" 4
.Sp
.Vb 1
\&  /redo               (Re-execute the previously executed statement)
.Ve
.Ip "rhistory" 4
.Sp
.Vb 1
\&  /rhistory           (Display result history)
.Ve
.Ip "rollback" 4
.Sp
.Vb 1
\&  /rollback           (rollback changes to the database)
.Ve
For this to be useful, turn the autocommit off. /option autocommit=0
.Ip "table_info" 4
.Sp
.Vb 2
\&  /table_info         (display all tables that exist in current database)
\&  /table_info | more  (for paging)
.Ve
.Ip "trace" 4
.Sp
.Vb 1
\&  /trace              (set DBI trace level for current database)
.Ve
Adjust the trace level for \s-1DBI\s0 0 \- 4.  0 off.  4 is lots of information.
Useful for determining what is really happening in \s-1DBI\s0.  See \s-1DBI\s0.
.Ip "type_info" 4
.Sp
.Vb 1
\&  /type_info          (display data types supported by current server)
.Ve
.SH "AUTHORS and ACKNOWLEDGEMENTS"
The DBI::Shell has a long lineage.
.PP
It started life around 1994-1997 as the pmsql script written by Andreas
König. Jochen Wiedmann picked it up and ran with it (adding much along
the way) as \fIdbimon\fR, bundled with his DBD::mSQL driver modules. In
1998, around the time I wanted to bundle a shell with the DBI, Adam
Marks was working on a dbish modeled after the Sybase sqsh utility.
.PP
Wanting to start from a cleaner slate than the feature-full but complex
dbimon, I worked with Adam to create a fairly open modular and very
configurable DBI::Shell module. Along the way Tom Lowery chipped in
ideas and patches. As we go further along more useful code and concepts
from Jochen's dbimon is bound to find it's way back in.
.SH "COPYRIGHT"
The DBI::Shell module is Copyright (c) 1998 Tim Bunce. England.
All rights reserved. Portions are Copyright by Jochen Wiedmann,
Adam Marks and Tom Lowery.
.PP
You may distribute under the terms of either the GNU General Public
License or the Artistic License, as specified in the Perl README file.

.rn }` ''
.IX Title "lib::DBI::Shell 3"
.IX Name "DBI::Shell - Interactive command shell for the DBI"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "TO DO"

.IX Header "COMMANDS"

.IX Item "help"

.IX Item "chistory"

.IX Item "clear"

.IX Item "commit"

.IX Item "connect"

.IX Item "current"

.IX Item "do"

.IX Item "drivers"

.IX Item "edit"

.IX Item "exit"

.IX Item "get"

.IX Item "go"

.IX Item "history"

.IX Item "option"

.IX Item "perl"

.IX Item "quit"

.IX Item "redo"

.IX Item "rhistory"

.IX Item "rollback"

.IX Item "table_info"

.IX Item "trace"

.IX Item "type_info"

.IX Header "AUTHORS and ACKNOWLEDGEMENTS"

.IX Header "COPYRIGHT"

