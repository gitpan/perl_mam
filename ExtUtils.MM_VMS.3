.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH ExtUtils/MM_VMS 3 "perl 5.003, patch 05" "3/Sep/96" "Perl Programmers Reference Guide"
.IX Title "ExtUtils/MM_VMS 3"
.UC
.IX Name "ExtUtils::MM_VMS - methods to override UN*X behaviour in ExtUtils::MakeMaker"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
ExtUtils::MM_VMS \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 1
\& use ExtUtils::MM_VMS; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.Sh "Methods always loaded"
.IX Subsection "Methods always loaded"
.Ip "eliminate_macros" 0
.IX Item "eliminate_macros"
Expands \s-1MM\s0[\s-1KS\s0]/Make macros in a text string, using the contents of
identically named elements of \f(CW%$self\fR, and returns the result
as a file specification in Unix syntax.
.Ip "fixpath" 0
.IX Item "fixpath"
Catchall routine to clean up problem \s-1MM\s0[\s-1SK\s0]/Make macros.  Expands macros
in any directory specification, in order to avoid juxtaposing two
\s-1VMS\s0\-syntax directories when \s-1MM\s0[\s-1SK\s0] is run.  Also expands expressions which
are all macro, so that we can tell how long the expansion is, and avoid
overrunning \s-1DCL\s0's command buffer when \s-1MM\s0[\s-1KS\s0] is running.
.PP
If optional second argument has a \s-1TRUE\s0 value, then the return string is
a \s-1VMS\s0\-syntax directory specification, otherwise it is a \s-1VMS\s0\-syntax file
specification.
.Ip "catdir" 0
.IX Item "catdir"
Concatenates a list of file specifications, and returns the result as a
\s-1VMS\s0\-syntax directory specification.
.Ip "catfile" 0
.IX Item "catfile"
Concatenates a list of file specifications, and returns the result as a
\s-1VMS\s0\-syntax directory specification.
.Ip "curdir (override)" 0
.IX Item "curdir (override)"
Returns a string representing of the current directory.
.Ip "rootdir (override)" 0
.IX Item "rootdir (override)"
Returns a string representing of the root directory.
.Ip "updir (override)" 0
.IX Item "updir (override)"
Returns a string representing of the parent directory.
.Sh "SelfLoaded methods"
.IX Subsection "SelfLoaded methods"
Those methods which override default MM_Unix methods are marked
\*(L"(override)\*(R", while methods unique to \s-1MM_VMS\s0 are marked \*(L"(specific)\*(R".
For overridden methods, documentation is limited to an explanation
of why this method overrides the MM_Unix method; see the ExtUtils::MM_Unix
documentation for more details.
.Ip "guess_name (override)" 0
.IX Item "guess_name (override)"
Try to determine name of extension being built.  We begin with the name
of the current directory.  Since \s-1VMS\s0 filenames are case-insensitive,
however, we look for a \fI.pm\fR file whose name matches that of the current
directory (presumably the \*(L'main\*(R' \fI.pm\fR file for this extension), and try
to find a \f(CWpackage\fR statement from which to obtain the Mixed::Case
package name.
.Ip "find_perl (override)" 0
.IX Item "find_perl (override)"
Use \s-1VMS\s0 file specification syntax and \s-1CLI\s0 commands to find and
invoke Perl images.
.Ip "path (override)" 0
.IX Item "path (override)"
Translate logical name \s-1DCL$PATH\s0 as a searchlist, rather than trying
to \f(CWsplit\fR string value of \f(CW$ENV{'PATH'}\fR.
.Ip "maybe_command (override)" 0
.IX Item "maybe_command (override)"
Follows \s-1VMS\s0 naming conventions for executable files.
If the name passed in doesn't exactly match an executable file,
appends \fI.Exe\fR to check for executable image, and \fI.Com\fR to check
for \s-1DCL\s0 procedure.  If this fails, checks \fISys$Share:\fR for an
executable file having the name specified.  Finally, appends \fI.Exe\fR
and checks again.
.Ip "maybe_command_in_dirs (override)" 0
.IX Item "maybe_command_in_dirs (override)"
Uses \s-1DCL\s0 argument quoting on test command line.
.Ip "perl_script (override)" 0
.IX Item "perl_script (override)"
If name passed in doesn't specify a readable file, appends \fI.pl\fR and
tries again, since it's customary to have file types on all files
under \s-1VMS\s0.
.Ip "file_name_is_absolute (override)" 0
.IX Item "file_name_is_absolute (override)"
Checks for \s-1VMS\s0 directory spec as well as Unix separators.
.Ip "replace_manpage_separator" 0
.IX Item "replace_manpage_separator"
Use as separator a character which is legal in a \s-1VMS\s0\-syntax file name.
.Ip "init_others (override)" 0
.IX Item "init_others (override)"
Provide \s-1VMS\s0\-specific forms of various utility commands, then hand
off to the default MM_Unix method.
.Ip "constants (override)" 0
.IX Item "constants (override)"
Fixes up numerous file and directory macros to insure \s-1VMS\s0 syntax
regardless of input syntax.  Also adds a few \s-1VMS\s0\-specific macros
and makes lists of files comma-separated.
.Ip "const_loadlibs (override)" 0
.IX Item "const_loadlibs (override)"
Basically a stub which passes through library specfications provided
by the caller.  Will be updated or removed when \s-1VMS\s0 support is added
to ExtUtils::Liblist.
.Ip "cflags (override)" 0
.IX Item "cflags (override)"
Bypass shell script and produce qualifiers for \s-1CC\s0 directly (but warn
user if a shell script for this extension exists).  Fold multiple
/Defines into one, since some C compilers pay attention to only one
instance of this qualifier on the command line.
.Ip "const_cccmd (override)" 0
.IX Item "const_cccmd (override)"
Adds directives to point C preprocessor to the right place when
handling #include <sys/foo.h> directives.  Also constructs \s-1CC\s0
command line a bit differently than MM_Unix method.
.Ip "pm_to_blib (override)" 0
.IX Item "pm_to_blib (override)"
\s-1DCL\s0 \fIstill\fR accepts a maximum of 255 characters on a command
line, so we write the (potentially) long list of file names
to a temp file, then persuade Perl to read it instead of the
command line to find args.
.Ip "tool_autosplit (override)" 0
.IX Item "tool_autosplit (override)"
Use \s-1VMS\s0\-style quoting on command line.
.Ip "tool_sxubpp (override)" 0
.IX Item "tool_sxubpp (override)"
Use \s-1VMS\s0\-style quoting on xsubpp command line.
.Ip "xsubpp_version (override)" 0
.IX Item "xsubpp_version (override)"
Test xsubpp exit status according to \s-1VMS\s0 rules ($sts & 1 ==> good)
rather than Unix rules ($sts == 0 ==> good).
.Ip "tools_other (override)" 0
.IX Item "tools_other (override)"
Adds a few \s-1MM\s0[\s-1SK\s0] macros, and shortens some the installatin commands,
in order to stay under \s-1DCL\s0's 255-character limit.  Also changes
\s-1EQUALIZE_TIMESTAMP\s0 to set revision date of target file to one second
later than source file, since \s-1MMK\s0 interprets precisely equal revision
dates for a source and target file as a sign that the target needs
to be updated.
.Ip "dist (override)" 0
.IX Item "dist (override)"
Provide VMSish defaults for some values, then hand off to
default MM_Unix method.
.Ip "c_o (override)" 0
.IX Item "c_o (override)"
Use \s-1VMS\s0 syntax on command line.  In particular, $(\s-1DEFINE\s0) and
$(\s-1PERL_INC\s0) have been pulled into $(\s-1CCCMD\s0).  Also use \s-1MM\s0[\s-1SK\s0] macros.
.Ip "xs_c (override)" 0
.IX Item "xs_c (override)"
Use \s-1MM\s0[\s-1SK\s0] macros.
.Ip "xs_o (override)" 0
.IX Item "xs_o (override)"
Use \s-1MM\s0[\s-1SK\s0] macros, and \s-1VMS\s0 command line for C compiler.
.Ip "top_targets (override)" 0
.IX Item "top_targets (override)"
Use \s-1VMS\s0 quoting on command line for Version_check.
.Ip "dlsyms (override)" 0
.IX Item "dlsyms (override)"
Create \s-1VMS\s0 linker options files specifying universal symbols for this
extension's shareable image, and listing other shareable images or 
libraries to which it should be linked.
.Ip "dynamic_lib (override)" 0
.IX Item "dynamic_lib (override)"
Use \s-1VMS\s0 Link command.
.Ip "dynamic_bs (override)" 0
.IX Item "dynamic_bs (override)"
Use \s-1VMS\s0\-style quoting on Mkbootstrap command line.
.Ip "static_lib (override)" 0
.IX Item "static_lib (override)"
Use \s-1VMS\s0 commands to manipulate object library.
.Ip "manifypods (override)" 0
.IX Item "manifypods (override)"
Use \s-1VMS\s0\-style quoting on command line, and \s-1VMS\s0 logical name
to specify fallback location at build time if we can't find pod2man.
.Ip "processPL (override)" 0
.IX Item "processPL (override)"
Use \s-1VMS\s0\-style quoting on command line.
.Ip "installbin (override)" 0
.IX Item "installbin (override)"
Stay under \s-1DCL\s0's 255 character command line limit once again by
splitting potentially long list of files across multiple lines
in \f(CWrealclean\fR target.
.Ip "subdir_x (override)" 0
.IX Item "subdir_x (override)"
Use \s-1VMS\s0 commands to change default directory.
.Ip "clean (override)" 0
.IX Item "clean (override)"
Split potentially long list of files across multiple commands (in
order to stay under the magic command line limit).  Also use \s-1MM\s0[\s-1SK\s0]
commands for handling subdirectories.
.Ip "realclean (override)" 0
.IX Item "realclean (override)"
Guess what we're working around?  Also, use \s-1MM\s0[\s-1SK\s0] for subdirectories.
.Ip "dist_basics (override)" 0
.IX Item "dist_basics (override)"
Use \s-1VMS\s0\-style quoting on command line.
.Ip "dist_core (override)" 0
.IX Item "dist_core (override)"
Syntax for invoking \fIVMS_Share\fR differs from that for Unix \fIshar\fR,
so \f(CWshdist\fR target actions are \s-1VMS\s0\-specific.
.Ip "dist_dir (override)" 0
.IX Item "dist_dir (override)"
Use \s-1VMS\s0\-style quoting on command line.
.Ip "dist_test (override)" 0
.IX Item "dist_test (override)"
Use \s-1VMS\s0 commands to change default directory, and use \s-1VMS\s0\-style
quoting on command line.
.Ip "install (override)" 0
.IX Item "install (override)"
Work around \s-1DCL\s0's 255 character limit several times,and use
\s-1VMS\s0\-style command line quoting in a few cases.
.Ip "perldepend (override)" 0
.IX Item "perldepend (override)"
Use \s-1VMS\s0\-style syntax for files; it's cheaper to just do it directly here
than to have the MM_Unix method call \f(CWcatfile\fR repeatedly.  Also use
config.vms as source of original config data if the Perl distribution
is available; config.sh is an ancillary file under \s-1VMS\s0.  Finally, if
we have to rebuild Config.pm, use \s-1MM\s0[\s-1SK\s0] to do it.
.Ip "makefile (override)" 0
.IX Item "makefile (override)"
Use \s-1VMS\s0 commands and quoting.
.Ip "test (override)" 0
.IX Item "test (override)"
Use \s-1VMS\s0 commands for handling subdirectories.
.Ip "test_via_harness (override)" 0
.IX Item "test_via_harness (override)"
Use \s-1VMS\s0\-style quoting on command line.
.Ip "test_via_script (override)" 0
.IX Item "test_via_script (override)"
Use \s-1VMS\s0\-style quoting on command line.
.Ip "makeaperl (override)" 0
.IX Item "makeaperl (override)"
Undertake to build a new set of Perl images using \s-1VMS\s0 commands.  Since
\s-1VMS\s0 does dynamic loading, it's not necessary to statically link each
extension into the Perl image, so this isn't the normal build path.
Consequently, it hasn't really been tested, and may well be incomplete.
.Ip "nicetext (override)" 0
.IX Item "nicetext (override)"
Insure that colons marking targets are preceded by space, in order
to distinguish the target delimiter from a colon appearing as
part of a filespec.

.rn }` ''
