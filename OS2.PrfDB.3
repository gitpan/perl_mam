.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH OS2::PrfDB 3 "perl 5.003, patch 93" "13/Mar/97" "Perl Programmers Reference Guide"
.IX Title "OS2::PrfDB 3"
.UC
.IX Name "OS2::PrfDB - Perl extension for access to OS/2 setting database."
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
OS2::PrfDB \- Perl extension for access to OS/2 setting database.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 3
\&  use OS2::PrfDB;
\&  tie %settings, OS2::PrfDB, 'my.ini';
\&  tie %subsettings, OS2::PrfDB::Sub, 'my.ini', 'mykey';
.Ve
.Vb 2
\&  print "$settings{firstkey}{subkey}\en";
\&  print "$subsettings{subkey}\en";
.Ve
.Vb 2
\&  tie %system, OS2::PrfDB, SystemIni;
\&  $system{myapp}{mykey} = "myvalue";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The extention provides both high-level and low-level access to .ini
files. 
.Sh "High level access"
.IX Subsection "High level access"
High-level access is the tie-hash access via two packages:
\f(CWOS2::PrfDB\fR and \f(CWOS2::PrfDB::Sub\fR. First one supports one argument,
the name of the file to open, the second one the name of the file to
open and so called \fIApplication name\fR, or the primary key of the
database.
.PP
.Vb 2
\&  tie %settings, OS2::PrfDB, 'my.ini';
\&  tie %subsettings, OS2::PrfDB::Sub, 'my.ini', 'mykey';
.Ve
One may substitute a handle for already opened ini-file instead of the
file name (obtained via low-level access functions). In particular, 3
functions \fISystemIni()\fR, \fIUserIni()\fR, and \fIAnyIni()\fR provide handles to the
\*(L"systemish\*(R" databases. AniIni will read from both, and write into User
database.
.Sh "Low-level access"
.IX Subsection "Low-level access"
Low-level access functions reside in the package \f(CWOS2::Prf\fR. They are
.Ip "\f(CWOpen(file)\fR" 14
.IX Item "\f(CWOpen(file)\fR"
Opens the database, returns an \fIinteger handle\fR.
.Ip "\f(CWClose(hndl)\fR" 14
.IX Item "\f(CWClose(hndl)\fR"
Closes the database given an \fIinteger handle\fR.
.Ip "\f(CWGet(hndl, appname, key)\fR" 14
.IX Item "\f(CWGet(hndl, appname, key)\fR"
Retrieves data from the database given 2-part-key \f(CWappname\fR \f(CWkey\fR.
If \f(CWkey\fR is \f(CWundef\fR, return the \*(L"\e0\*(R" delimited list of \f(CWkey\fRs,
terminated by \e0. If \f(CWappname\fR is \f(CWundef\fR, returns the list of
possible \f(CWappname\fRs in the same form.
.Ip "\f(CWGetLength(hndl, appname, key)\fR" 14
.IX Item "\f(CWGetLength(hndl, appname, key)\fR"
Same as above, but returns the length of the value.
.Ip "\f(CWSet(hndl, appname, key, value [ , length ])\fR" 14
.IX Item "\f(CWSet(hndl, appname, key, value [ , length ])\fR"
Sets the value. If the \f(CWvalue\fR is not defined, removes the \f(CWkey\fR. If
the \f(CWkey\fR is not defined, removes the \f(CWappname\fR.
.Ip "\f(CWSystem(val)\fR" 14
.IX Item "\f(CWSystem(val)\fR"
Return an \fIinteger handle\fR associated with the system database. If
\f(CWval\fR is 1, it is \fIUser\fR database, if 2, \fISystem\fR database, if
0, handle for \*(L"both\*(R" of them: the handle works for read from any one,
and for write into \fIUser\fR one.
.Ip "\f(CWProfiles()\fR" 14
.IX Item "\f(CWProfiles()\fR"
returns a reference to a list of two strings, giving names of the
\fIUser\fR and \fISystem\fR databases.
.Ip "\f(CWSetUser(file)\fR" 14
.IX Item "\f(CWSetUser(file)\fR"
\fB(Not tested.)\fR Sets the profile name of the \fIUser\fR database. The
application should have a message queue to use this function!
.Sh "Integer handles"
.IX Subsection "Integer handles"
To convert a name or an integer handle into an object acceptable as
argument to \fItie()\fR interface, one may use the following functions from
the package \f(CWOS2::Prf::Hini\fR:
.Ip "\f(CWnew(package, file)\fR" 14
.IX Item "\f(CWnew(package, file)\fR"
.Ip "\f(CWnew_from_int(package, int_hndl [ , filename ])\fR" 14
.IX Item "\f(CWnew_from_int(package, int_hndl [ , filename ])\fR"
.Sh "Exports"
.IX Subsection "Exports"
\fISystemIni()\fR, \fIUserIni()\fR, and \fIAnyIni()\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ilya Zakharevich, ilya@math.ohio-state.edu
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\fIperl\fR\|(1).

.rn }` ''
