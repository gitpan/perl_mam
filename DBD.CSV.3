.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::DBD::CSV 3 "perl 5.007, patch 00" "1/Mar/102" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
DBD::CSV \- DBI driver for CSV files
.SH "SYNOPSIS"
.PP
.Vb 8
\&    use DBI;
\&    $dbh = DBI->connect("DBI:CSV:f_dir=/home/joe/csvdb")
\&        or die "Cannot connect: " . $DBI::errstr;
\&    $sth = $dbh->prepare("CREATE TABLE a (id INTEGER, name CHAR(10))")
\&        or die "Cannot prepare: " . $dbh->errstr();
\&    $sth->execute() or die "Cannot execute: " . $sth->errstr();
\&    $sth->finish();
\&    $dbh->disconnect();
.Ve
.Vb 5
\&    # Read a CSV file with ";" as the separator, as exported by
\&    # MS Excel. Note we need to escape the ";", otherwise it
\&    # would be treated as an attribute separator.
\&    $dbh = DBI->connect(qq{DBI:CSV:csv_sep_char=\e\e;});
\&    $sth = $dbh->prepare("SELECT * FROM info");
.Ve
.Vb 4
\&    # Same example, this time reading "info.csv" as a table:
\&    $dbh = DBI->connect(qq{DBI:CSV:csv_sep_char=\e\e;});
\&    $dbh->{'csv_tables'}->{'info'} = { 'file' => 'info.csv'};
\&    $sth = $dbh->prepare("SELECT * FROM info");
.Ve
.SH "WARNING"
THIS IS ALPHA SOFTWARE. It is *only* \*(L'Alpha\*(R' because the interface (API)
is not finalized. The Alpha status does not reflect code quality or
stability.
.SH "DESCRIPTION"
The DBD::CSV module is yet another driver for the DBI (Database independent
interface for Perl). This one is based on the SQL \*(L"engine\*(R" SQL::Statement
and the abstract DBI driver DBD::File and implements access to
so-called CSV files (Comma separated values). Such files are mostly used for
exporting MS Access and MS Excel data.
.PP
See the \fIDBI(3)\fR manpage for details on DBI, the \fISQL::Statement(3)\fR manpage for details on
SQL::Statement and the \fIDBD::File(3)\fR manpage for details on the base class
DBD::File.
.Sh "Prerequisites"
The only system dependent feature that \s-1DBD::\s0File uses, is the \f(CWflock()\fR
function. Thus the module should run (in theory) on any system with
a working \f(CWflock()\fR, in particular on all Unix machines and on Windows
\s-1NT\s0. Under Windows 95 and MacOS the use of \f(CWflock()\fR is disabled, thus
the module should still be usable,
.PP
Unlike other \s-1DBI\s0 drivers, you don't need an external \s-1SQL\s0 engine
or a running server. All you need are the following Perl modules,
available from any \s-1CPAN\s0 mirror, for example
.PP
.Vb 1
\&  ftp://ftp.funet.fi/pub/languages/perl/CPAN/modules/by-module
.Ve
.Ip "\s-1DBI\s0" 4
the \s-1DBI\s0 (Database independent interface for Perl), version 1.00 or
a later release
.Ip "\s-1SQL::\s0Statement" 4
a simple \s-1SQL\s0 engine
.Ip "Text::\s-1CSV_XS\s0" 4
this module is used for writing rows to or reading rows from \s-1CSV\s0 files.
.Sh "Installation"
Installing this module (and the prerequisites from above) is quite simple.
You just fetch the archive, extract it with
.PP
.Vb 1
\&    gzip -cd DBD-CSV-0.1000.tar.gz | tar xf -
.Ve
(this is for Unix users, Windows users would prefer WinZip or something
similar) and then enter the following:
.PP
.Vb 4
\&    cd DBD-CSV-0.1000
\&    perl Makefile.PL
\&    make
\&    make test
.Ve
If any tests fail, let me know. Otherwise go on with
.PP
.Vb 1
\&    make install
.Ve
Note that you almost definitely need root or administrator permissions.
If you don't have them, read the ExtUtils::MakeMaker man page for details
on installing in your own directories. the \fIExtUtils::MakeMaker\fR manpage.
.Sh ""
.PP
.Vb 6
\&  The level of SQL support available depends on the version of
\&  SQL::Statement installed.  Any version will support *basic*
\&  CREATE, INSERT, DELETE, UPDATE, and SELECT statements.  Only
\&  versions of SQL::Statement 1.0 and above support additional
\&  features such as table joins, string functions, etc.  See the
\&  documentation of the latest version of SQL::Statement for details.
.Ve
.Sh "Creating a database handle"
Creating a database handle usually implies connecting to a database server.
Thus this command reads
.PP
.Vb 2
\&    use DBI;
\&    my $dbh = DBI->connect("DBI:CSV:f_dir=$dir");
.Ve
The directory tells the driver where it should create or open tables
(a.k.a. files). It defaults to the current directory, thus the following
are equivalent:
.PP
.Vb 2
\&    $dbh = DBI->connect("DBI:CSV:");
\&    $dbh = DBI->connect("DBI:CSV:f_dir=.");
.Ve
(I was told, that \s-1VMS\s0 requires
.PP
.Vb 1
\&    $dbh = DBI->connect("DBI:CSV:f_dir=");
.Ve
for whatever reasons.)
.PP
You may set other attributes in the \s-1DSN\s0 string, separated by semicolons.
.Sh "Creating and dropping tables"
You can create and drop tables with commands like the following:
.PP
.Vb 2
\&    $dbh->do("CREATE TABLE $table (id INTEGER, name CHAR(64))");
\&    $dbh->do("DROP TABLE $table");
.Ve
Note that currently only the column names will be stored and no other data.
Thus all other information including column type (\s-1INTEGER\s0 or \fI\s-1CHAR\s0\fR\|(x), for
example), column attributes (\s-1NOT\s0 \s-1NULL\s0, \s-1PRIMARY\s0 \s-1KEY\s0, ...) will silently be
discarded. This may change in a later release.
.PP
A drop just removes the file without any warning.
.PP
See the \fI\s-1DBI\s0(3)\fR manpage for more details.
.PP
Table names cannot be arbitrary, due to restrictions of the \s-1SQL\s0 syntax.
I recommend that table names are valid \s-1SQL\s0 identifiers: The first
character is alphabetic, followed by an arbitrary number of alphanumeric
characters. If you want to use other files, the file names must start
with \*(L'/\*(R', \*(L'./\*(R' or \*(L'../\*(R' and they must not contain white space.
.Sh "Inserting, fetching and modifying data"
The following examples insert some data in a table and fetch it back:
First all data in the string:
.PP
.Vb 2
\&    $dbh->do("INSERT INTO $table VALUES (1, "
\&             . $dbh->quote("foobar") . ")");
.Ve
Note the use of the quote method for escaping the word \*(L'foobar\*(R'. Any
string must be escaped, even if it doesn't contain binary data.
.PP
Next an example using parameters:
.PP
.Vb 2
\&    $dbh->do("INSERT INTO $table VALUES (?, ?)", undef,
\&             2, "It's a string!");
.Ve
Note that you don't need to use the quote method here, this is done
automatically for you. This version is particularly well designed for
loops. Whenever performance is an issue, I recommend using this method.
.PP
You might wonder about the \f(CWundef\fR. Don't wonder, just take it as it
is. :\-) It's an attribute argument that I have never ever used and
will be parsed to the prepare method as a second argument.
.PP
To retrieve data, you can use the following:
.PP
.Vb 8
\&    my($query) = "SELECT * FROM $table WHERE id > 1 ORDER BY id";
\&    my($sth) = $dbh->prepare($query);
\&    $sth->execute();
\&    while (my $row = $sth->fetchrow_hashref) {
\&        print("Found result row: id = ", $row->{'id'},
\&              ", name = ", $row->{'name'});
\&    }
\&    $sth->finish();
.Ve
Again, column binding works: The same example again.
.PP
.Vb 9
\&    my($query) = "SELECT * FROM $table WHERE id > 1 ORDER BY id";
\&    my($sth) = $dbh->prepare($query);
\&    $sth->execute();
\&    my($id, $name);
\&    $sth->bind_columns(undef, \e$id, \e$name);
\&    while ($sth->fetch) {
\&        print("Found result row: id = $id, name = $name\en");
\&    }
\&    $sth->finish();
.Ve
Of course you can even use input parameters. Here's the same example
for the third time:
.PP
.Vb 10
\&    my($query) = "SELECT * FROM $table WHERE id = ?";
\&    my($sth) = $dbh->prepare($query);
\&    $sth->bind_columns(undef, \e$id, \e$name);
\&    for (my($i) = 1;  $i <= 2;   $i++) {
\&        $sth->execute($id);
\&        if ($sth->fetch) {
\&            print("Found result row: id = $id, name = $name\en");
\&        }
\&        $sth->finish();
\&    }
.Ve
See the \fI\s-1DBI\s0(3)\fR manpage for details on these methods. See the \fI\s-1SQL::\s0Statement(3)\fR manpage for
details on the \s-1WHERE\s0 clause.
.PP
Data rows are modified with the \s-1UPDATE\s0 statement:
.PP
.Vb 1
\&    $dbh->do("UPDATE $table SET id = 3 WHERE id = 1");
.Ve
Likewise you use the \s-1DELETE\s0 statement for removing rows:
.PP
.Vb 1
\&    $dbh->do("DELETE FROM $table WHERE id > 1");
.Ve
.Sh "Error handling"
In the above examples we have never cared about return codes. Of course,
this cannot be recommended. Instead we should have written (for example):
.PP
.Vb 14
\&    my($query) = "SELECT * FROM $table WHERE id = ?";
\&    my($sth) = $dbh->prepare($query)
\&        or die "prepare: " . $dbh->errstr();
\&    $sth->bind_columns(undef, \e$id, \e$name)
\&        or die "bind_columns: " . $dbh->errstr();
\&    for (my($i) = 1;  $i <= 2;   $i++) {
\&        $sth->execute($id)
\&            or die "execute: " . $dbh->errstr();
\&        if ($sth->fetch) {
\&            print("Found result row: id = $id, name = $name\en");
\&        }
\&    }
\&    $sth->finish($id)
\&        or die "finish: " . $dbh->errstr();
.Ve
Obviously this is tedious. Fortunately we have \s-1DBI\s0's \fIRaiseError\fR
attribute:
.PP
.Vb 15
\&    $dbh->{'RaiseError'} = 1;
\&    $@ = '';
\&    eval {
\&        my($query) = "SELECT * FROM $table WHERE id = ?";
\&        my($sth) = $dbh->prepare($query);
\&        $sth->bind_columns(undef, \e$id, \e$name);
\&        for (my($i) = 1;  $i <= 2;   $i++) {
\&            $sth->execute($id);
\&            if ($sth->fetch) {
\&                print("Found result row: id = $id, name = $name\en");
\&            }
\&        }
\&        $sth->finish($id);
\&    };
\&    if ($@) { die "SQL database error: $@"; }
.Ve
This is not only shorter, it even works when using \s-1DBI\s0 methods within
subroutines.
.Sh "Metadata"
The following attributes are handled by \s-1DBI\s0 itself and not by \s-1DBD::\s0File,
thus they all work as expected:
.PP
.Vb 9
\&    Active
\&    ActiveKids
\&    CachedKids
\&    CompatMode             (Not used)
\&    InactiveDestroy
\&    Kids
\&    PrintError
\&    RaiseError
\&    Warn                   (Not used)
.Ve
The following \s-1DBI\s0 attributes are handled by \s-1DBD::\s0File:
.Ip "AutoCommit" 4
Always on
.Ip "ChopBlanks" 4
Works
.Ip "\s-1NUM_OF_FIELDS\s0" 4
Valid after \f(CW$sth->execute\fR
.Ip "\s-1NUM_OF_PARAMS\s0" 4
Valid after \f(CW$sth->prepare\fR
.Ip "\s-1NAME\s0" 4
Valid after \f(CW$sth->execute\fR; undef for Non-Select statements.
.Ip "\s-1NULLABLE\s0" 4
Not really working. Always returns an array ref of one's, as \s-1DBD::CSV\s0
doesn't verify input data. Valid after \f(CW$sth->execute\fR; undef for
non-Select statements.
.PP
These attributes and methods are not supported:
.PP
.Vb 4
\&    bind_param_inout
\&    CursorName
\&    LongReadLen
\&    LongTruncOk
.Ve
In addition to the \s-1DBI\s0 attributes, you can use the following dbh
attributes:
.Ip "f_dir" 8
This attribute is used for setting the directory where \s-1CSV\s0 files are
opened. Usually you set it in the dbh, it defaults to the current
directory (\*(R"."). However, it is overwritable in the statement handles.
.Ip "csv_eol" 8
.Ip "csv_sep_char" 8
.Ip "csv_quote_char" 8
.Ip "csv_escape_char" 8
.Ip "csv_class" 8
.Ip "csv_csv" 8
The attributes \fIcsv_eol\fR, \fIcsv_sep_char\fR, \fIcsv_quote_char\fR and
\fIcsv_escape_char\fR are corresponding to the respective attributes of the
Text::\s-1CSV_XS\s0 object. You want to set these attributes if you have unusual
\s-1CSV\s0 files like \fI/etc/passwd\fR or \s-1MS\s0 Excel generated \s-1CSV\s0 files with a semicolon
as separator. Defaults are \*(L"\e015\e012\*(R", \*(L';\*(R', \*(L'"\*(R' and \*(L'"\*(R', respectively.
.Sp
The attributes are used to create an instance of the class \fIcsv_class\fR,
by default Text::\s-1CSV_XS\s0. Alternatively you may pass an instance as
\fIcsv_csv\fR, the latter takes precedence. Note that the \fIbinary\fR
attribute \fImust\fR be set to a true value in that case.
.Sp
Additionally you may overwrite these attributes on a per-table base in
the \fIcsv_tables\fR attribute.
.Ip "csv_tables" 8
This hash ref is used for storing table dependent metadata. For any
table it contains an element with the table name as key and another
hash ref with the following attributes:
.Ip "file" 20
The tables file name; defaults to
.Sp
.Vb 1
\&    "$dbh->{f_dir}/$table"
.Ve
.Ip "eol" 20
.Ip "sep_char" 20
.Ip "quote_char" 20
.Ip "escape_char" 20
.Ip "class" 20
.Ip "csv" 20
These correspond to the attributes \fIcsv_eol\fR, \fIcsv_sep_char\fR,
\fIcsv_quote_char\fR, \fIcsv_escape_char\fR, \fIcsv_class\fR and \fIcsv_csv\fR.
The difference is that they work on a per-table base.
.Ip "col_names" 20
.Ip "skip_first_row" 20
By default \s-1DBD::CSV\s0 assumes that column names are stored in the first
row of the \s-1CSV\s0 file. If this is not the case, you can supply an array
ref of table names with the \fIcol_names\fR attribute. In that case the
attribute \fIskip_first_row\fR will be set to \s-1FALSE\s0.
.Sp
If you supply an empty array ref, the driver will read the first row
for you, count the number of columns and create column names like
\f(CWcol0\fR, \f(CWcol1\fR, ...
.PP
Example: Suggest you want to use \fI/etc/passwd\fR as a \s-1CSV\s0 file. :\-)
There simplest way is:
.PP
.Vb 9
\&    require DBI;
\&    my $dbh = DBI->connect("DBI:CSV:f_dir=/etc;csv_eol=\en;"
\&                           . "csv_sep_char=:;csv_quote_char=;"
\&                           . "csv_escape_char=");
\&    $dbh->{'csv_tables'}->{'passwd'} = {
\&        'col_names' => ["login", "password", "uid", "gid", "realname",
\&                        "directory", "shell"]
\&    };
\&    $sth = $dbh->prepare("SELECT * FROM passwd");
.Ve
Another possibility where you leave all the defaults as they are and
overwrite them on a per table base:
.PP
.Vb 12
\&    require DBI;
\&    my $dbh = DBI->connect("DBI:CSV:");
\&    $dbh->{'csv_tables'}->{'passwd'} = {
\&        'eol' => "\en",
\&        'sep_char' => ":",
\&        'quote_char' => undef,
\&        'escape_char' => undef,
\&        'file' => '/etc/passwd',
\&        'col_names' => ["login", "password", "uid", "gid", "realname",
\&                        "directory", "shell"]
\&    };
\&    $sth = $dbh->prepare("SELECT * FROM passwd");
.Ve
.Sh "Driver private methods"
These methods are inherited from \s-1DBD::\s0File:
.Ip "data_sources" 4
The \f(CWdata_sources\fR method returns a list of subdirectories of the current
directory in the form \*(L"\s-1DBI:CSV:\s0directory=$dirname\*(R". 
.Sp
If you want to read the subdirectories of another directory, use
.Sp
.Vb 2
\&    my($drh) = DBI->install_driver("CSV");
\&    my(@list) = $drh->data_sources('f_dir' => '/usr/local/csv_data' );
.Ve
.Ip "list_tables" 4
This method returns a list of file names inside \f(CW$dbh\fR\->{'directory'}.
Example:
.Sp
.Vb 2
\&    my($dbh) = DBI->connect("DBI:CSV:directory=/usr/local/csv_data");
\&    my(@list) = $dbh->func('list_tables');
.Ve
Note that the list includes all files contained in the directory, even
those that have non-valid table names, from the view of \s-1SQL\s0. See
the section on \fICreating and dropping tables\fR above.
.Sh "Data restrictions"
When inserting and fetching data, you will sometimes be surprised: \s-1DBD::CSV\s0
doesn't correctly handle data types, in particular NULLs. If you insert
integers, it might happen, that fetch returns a string. Of course, a string
containing the integer, so that's perhaps not a real problem. But the
following will never work:
.PP
.Vb 12
\&    $dbh->do("INSERT INTO $table (id, name) VALUES (?, ?)",
\&             undef, "foo bar");
\&    $sth = $dbh->prepare("SELECT * FROM $table WHERE id IS NULL");
\&    $sth->execute();
\&    my($id, $name);
\&    $sth->bind_columns(undef, \e$id, \e$name);
\&    while ($sth->fetch) {
\&        printf("Found result row: id = %s, name = %s\en",
\&              defined($id) ? $id : "NULL",
\&              defined($name) ? $name : "NULL");
\&    }
\&    $sth->finish();
.Ve
The row we have just inserted, will never be returned! The reason is
obvious, if you examine the \s-1CSV\s0 file: The corresponding row looks
like
.PP
.Vb 1
\&    "","foo bar"
.Ve
In other words, not a \s-1NULL\s0 is stored, but an empty string. \s-1CSV\s0 files
don't have a concept of \s-1NULL\s0 values. Surprisingly the above example
works, if you insert a \s-1NULL\s0 value for the name! Again, you find
the explanation by examining the \s-1CSV\s0 file:
.PP
.Vb 1
\&    ""
.Ve
In other words, \s-1DBD::CSV\s0 has \*(L"emulated\*(R" a \s-1NULL\s0 value by writing a row
with less columns. Of course this works only if the rightmost column
is \s-1NULL\s0, the two rightmost columns are \s-1NULL\s0, ..., but the leftmost
column will never be \s-1NULL\s0!
.PP
See the section on \fICreating and dropping tables\fR above for table name restrictions.
.SH "TODO"
Extensions of DBD::CSV:
.Ip "\s-1CSV\s0 file scanner" 4
Write a simple \s-1CSV\s0 file scanner that reads a \s-1CSV\s0 file and attempts
to guess sep_char, quote_char, escape_char and eol automatically.
.PP
These are merely restrictions of the \s-1DBD::\s0File or \s-1SQL::\s0Statement
modules:
.Ip "Table name mapping" 4
Currently it is not possible to use files with names like \f(CWnames.csv\fR.
Instead you have to use soft links or rename files. As an alternative
one might use, for example a dbh attribute \*(L'table_map\*(R'. It might be a
hash ref, the keys being the table names and the values being the file
names.
.Ip "Column name mapping" 4
Currently the module assumes that column names are stored in the first
row. While this is fine in most cases, there should be a possibility
of setting column names and column number from the programmer: For
example \s-1MS\s0 Access doesn't export column names by default.
.SH "KNOWN BUGS"
.Ip "\(bu" 8
The module is using \fIflock()\fR internally. However, this function is not
available on platforms. Using \fIflock()\fR is disabled on MacOS and Windows
95: There's no locking at all (perhaps not so important on these
operating systems, as they are for single users anyways).
.SH "AUTHOR AND COPYRIGHT"
This module is currently maintained by
.PP
.Vb 2
\&      Jeff Zucker
\&      <jeff@vpservices.com>
.Ve
The original author is Jochen Wiedmann.
.PP
Copyright (C) 1998 by Jochen Wiedmann
.PP
All rights reserved.
.PP
You may distribute this module under the terms of either the GNU
General Public License or the Artistic License, as specified in
the Perl README file.
.SH "SEE ALSO"
the \fIDBI(3)\fR manpage, the \fIText::CSV_XS(3)\fR manpage, the \fISQL::Statement(3)\fR manpage
.PP
For help on the use of DBD::CSV, see the DBI users mailing list:
.PP
.Vb 1
\&  http://www.isc.org/dbi-lists.html
.Ve
For general information on DBI see
.PP
.Vb 1
\&  http://www.symbolstone.org/technology/perl/DBI
.Ve

.rn }` ''
.IX Title "lib::DBD::CSV 3"
.IX Name "DBD::CSV - DBI driver for CSV files"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "WARNING"

.IX Header "DESCRIPTION"

.IX Subsection "Prerequisites"

.IX Item "\s-1DBI\s0"

.IX Item "\s-1SQL::\s0Statement"

.IX Item "Text::\s-1CSV_XS\s0"

.IX Subsection "Installation"

.IX Subsection ""

.IX Subsection "Creating a database handle"

.IX Subsection "Creating and dropping tables"

.IX Subsection "Inserting, fetching and modifying data"

.IX Subsection "Error handling"

.IX Subsection "Metadata"

.IX Item "AutoCommit"

.IX Item "ChopBlanks"

.IX Item "\s-1NUM_OF_FIELDS\s0"

.IX Item "\s-1NUM_OF_PARAMS\s0"

.IX Item "\s-1NAME\s0"

.IX Item "\s-1NULLABLE\s0"

.IX Item "f_dir"

.IX Item "csv_eol"

.IX Item "csv_sep_char"

.IX Item "csv_quote_char"

.IX Item "csv_escape_char"

.IX Item "csv_class"

.IX Item "csv_csv"

.IX Item "csv_tables"

.IX Item "file"

.IX Item "eol"

.IX Item "sep_char"

.IX Item "quote_char"

.IX Item "escape_char"

.IX Item "class"

.IX Item "csv"

.IX Item "col_names"

.IX Item "skip_first_row"

.IX Subsection "Driver private methods"

.IX Item "data_sources"

.IX Item "list_tables"

.IX Subsection "Data restrictions"

.IX Header "TODO"

.IX Item "\s-1CSV\s0 file scanner"

.IX Item "Table name mapping"

.IX Item "Column name mapping"

.IX Header "KNOWN BUGS"

.IX Item "\(bu"

.IX Header "AUTHOR AND COPYRIGHT"

.IX Header "SEE ALSO"

