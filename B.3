.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH B 3 "perl 5.005, patch 53" "5/Nov/98" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
B \- The Perl Compiler
.SH "SYNOPSIS"
.PP
.Vb 1
\&        use B;
.Ve
.SH "DESCRIPTION"
The \f(CWB\fR module supplies classes which allow a Perl program to delve
into its own innards. It is the module used to implement the
\*(L"backends\*(R" of the Perl compiler. Usage of the compiler does not
require knowledge of this module: see the \fIO\fR module for the
user-visible part. The \f(CWB\fR module is of use to those who want to
write new compiler backends. This documentation assumes that the
reader knows a fair amount about perl's internals including such
things as SVs, OPs and the internal symbol table and syntax tree
of a program.
.SH "OVERVIEW OF CLASSES"
The C structures used by Perl's internals to hold SV and OP
information (PVIV, AV, HV, ..., OP, SVOP, UNOP, ...) are modelled on a
class hierarchy and the \f(CWB\fR module gives access to them via a true
object hierarchy. Structure fields which point to other objects
(whether types of SV or types of OP) are represented by the \f(CWB\fR
module as Perl objects of the appropriate class. The bulk of the \f(CWB\fR
module is the methods for accessing fields of these structures. Note
that all access is read-only: you cannot modify the internals by
using this module.
.Sh "\s-1SV\s0\-\s-1RELATED\s0 \s-1CLASSES\s0"
B::\s-1IV\s0, B::\s-1NV\s0, B::\s-1RV\s0, B::\s-1PV\s0, B::\s-1PVIV\s0, B::\s-1PVNV\s0, B::\s-1PVMG\s0, B::\s-1BM\s0, B::\s-1PVLV\s0,
B::\s-1AV\s0, B::\s-1HV\s0, B::\s-1CV\s0, B::\s-1GV\s0, B::\s-1FM\s0, B::\s-1IO\s0. These classes correspond in
the obvious way to the underlying C structures of similar names. The
inheritance hierarchy mimics the underlying C \*(L"inheritance\*(R". Access
methods correspond to the underlying C macros for field access,
usually with the leading \*(L"class indication\*(R" prefix removed (Sv, Av,
Hv, ...). The leading prefix is only left in cases where its removal
would cause a clash in method name. For example, \f(CWGvREFCNT\fR stays
as-is since its abbreviation would clash with the \*(L"superclass\*(R" method
\f(CWREFCNT\fR (corresponding to the C function \f(CWSvREFCNT\fR).
.Sh "B::\s-1SV\s0 \s-1METHODS\s0"
.Ip "\s-1REFCNT\s0" 4
.Ip "\s-1FLAGS\s0" 4
.Sh "B::\s-1IV\s0 \s-1METHODS\s0"
.Ip "\s-1IV\s0" 4
.Ip "\s-1IVX\s0" 4
.Ip "needs64bits" 4
.Ip "packiv" 4
.Sh "B::\s-1NV\s0 \s-1METHODS\s0"
.Ip "\s-1NV\s0" 4
.Ip "\s-1NVX\s0" 4
.Sh "B::\s-1RV\s0 \s-1METHODS\s0"
.Ip "\s-1RV\s0" 4
.Sh "B::\s-1PV\s0 \s-1METHODS\s0"
.Ip "\s-1PV\s0" 4
.Sh "B::\s-1PVMG\s0 \s-1METHODS\s0"
.Ip "\s-1MAGIC\s0" 4
.Ip "SvSTASH" 4
.Sh "B::\s-1MAGIC\s0 \s-1METHODS\s0"
.Ip "\s-1MOREMAGIC\s0" 4
.Ip "\s-1PRIVATE\s0" 4
.Ip "\s-1TYPE\s0" 4
.Ip "\s-1FLAGS\s0" 4
.Ip "\s-1OBJ\s0" 4
.Ip "\s-1PTR\s0" 4
.Sh "B::\s-1PVLV\s0 \s-1METHODS\s0"
.Ip "\s-1TARGOFF\s0" 4
.Ip "\s-1TARGLEN\s0" 4
.Ip "\s-1TYPE\s0" 4
.Ip "\s-1TARG\s0" 4
.Sh "B::\s-1BM\s0 \s-1METHODS\s0"
.Ip "\s-1USEFUL\s0" 4
.Ip "\s-1PREVIOUS\s0" 4
.Ip "\s-1RARE\s0" 4
.Ip "\s-1TABLE\s0" 4
.Sh "B::\s-1GV\s0 \s-1METHODS\s0"
.Ip "\s-1NAME\s0" 4
.Ip "\s-1STASH\s0" 4
.Ip "\s-1SV\s0" 4
.Ip "\s-1IO\s0" 4
.Ip "\s-1FORM\s0" 4
.Ip "\s-1AV\s0" 4
.Ip "\s-1HV\s0" 4
.Ip "\s-1EGV\s0" 4
.Ip "\s-1CV\s0" 4
.Ip "\s-1CVGEN\s0" 4
.Ip "\s-1LINE\s0" 4
.Ip "\s-1FILEGV\s0" 4
.Ip "GvREFCNT" 4
.Ip "\s-1FLAGS\s0" 4
.Sh "B::\s-1IO\s0 \s-1METHODS\s0"
.Ip "\s-1LINES\s0" 4
.Ip "\s-1PAGE\s0" 4
.Ip "\s-1PAGE_LEN\s0" 4
.Ip "\s-1LINES_LEFT\s0" 4
.Ip "\s-1TOP_NAME\s0" 4
.Ip "\s-1TOP_GV\s0" 4
.Ip "\s-1FMT_NAME\s0" 4
.Ip "\s-1FMT_GV\s0" 4
.Ip "\s-1BOTTOM_NAME\s0" 4
.Ip "\s-1BOTTOM_GV\s0" 4
.Ip "\s-1SUBPROCESS\s0" 4
.Ip "IoTYPE" 4
.Ip "IoFLAGS" 4
.Sh "B::\s-1AV\s0 \s-1METHODS\s0"
.Ip "\s-1FILL\s0" 4
.Ip "\s-1MAX\s0" 4
.Ip "\s-1OFF\s0" 4
.Ip "\s-1ARRAY\s0" 4
.Ip "AvFLAGS" 4
.Sh "B::\s-1CV\s0 \s-1METHODS\s0"
.Ip "\s-1STASH\s0" 4
.Ip "\s-1START\s0" 4
.Ip "\s-1ROOT\s0" 4
.Ip "\s-1GV\s0" 4
.Ip "\s-1FILEGV\s0" 4
.Ip "\s-1DEPTH\s0" 4
.Ip "\s-1PADLIST\s0" 4
.Ip "\s-1OUTSIDE\s0" 4
.Ip "\s-1XSUB\s0" 4
.Ip "\s-1XSUBANY\s0" 4
.Ip "CvFLAGS" 4
.Sh "B::\s-1HV\s0 \s-1METHODS\s0"
.Ip "\s-1FILL\s0" 4
.Ip "\s-1MAX\s0" 4
.Ip "\s-1KEYS\s0" 4
.Ip "\s-1RITER\s0" 4
.Ip "\s-1NAME\s0" 4
.Ip "\s-1PMROOT\s0" 4
.Ip "\s-1ARRAY\s0" 4
.Sh "\s-1OP\s0\-\s-1RELATED\s0 \s-1CLASSES\s0"
B::\s-1OP\s0, B::\s-1UNOP\s0, B::\s-1BINOP\s0, B::\s-1LOGOP\s0, B::\s-1CONDOP\s0, B::\s-1LISTOP\s0, B::\s-1PMOP\s0,
B::\s-1SVOP\s0, B::\s-1GVOP\s0, B::\s-1PVOP\s0, B::\s-1CVOP\s0, B::\s-1LOOP\s0, B::\s-1COP\s0.
These classes correspond in
the obvious way to the underlying C structures of similar names. The
inheritance hierarchy mimics the underlying C \*(L"inheritance\*(R". Access
methods correspond to the underlying C structre field names, with the
leading \*(L"class indication\*(R" prefix removed (op_).
.Sh "B::\s-1OP\s0 \s-1METHODS\s0"
.Ip "next" 4
.Ip "sibling" 4
.Ip "ppaddr" 4
This returns the function name as a string (e.g. pp_add, pp_rv2av).
.Ip "desc" 4
This returns the op description from the global C PL_op_desc array
(e.g. \*(L"addition" \*(L"array deref").
.Ip "targ" 4
.Ip "type" 4
.Ip "seq" 4
.Ip "flags" 4
.Ip "private" 4
.Sh "B::\s-1UNOP\s0 \s-1METHOD\s0"
.Ip "first" 4
.Sh "B::\s-1BINOP\s0 \s-1METHOD\s0"
.Ip "last" 4
.Sh "B::\s-1LOGOP\s0 \s-1METHOD\s0"
.Ip "other" 4
.Sh "B::\s-1CONDOP\s0 \s-1METHODS\s0"
.Ip "true" 4
.Ip "false" 4
.Sh "B::\s-1LISTOP\s0 \s-1METHOD\s0"
.Ip "children" 4
.Sh "B::\s-1PMOP\s0 \s-1METHODS\s0"
.Ip "pmreplroot" 4
.Ip "pmreplstart" 4
.Ip "pmnext" 4
.Ip "pmregexp" 4
.Ip "pmflags" 4
.Ip "pmpermflags" 4
.Ip "precomp" 4
.Sh "B::\s-1SVOP\s0 \s-1METHOD\s0"
.Ip "sv" 4
.Sh "B::\s-1GVOP\s0 \s-1METHOD\s0"
.Ip "gv" 4
.Sh "B::\s-1PVOP\s0 \s-1METHOD\s0"
.Ip "pv" 4
.Sh "B::\s-1LOOP\s0 \s-1METHODS\s0"
.Ip "redoop" 4
.Ip "nextop" 4
.Ip "lastop" 4
.Sh "B::\s-1COP\s0 \s-1METHODS\s0"
.Ip "label" 4
.Ip "stash" 4
.Ip "filegv" 4
.Ip "cop_seq" 4
.Ip "arybase" 4
.Ip "line" 4
.SH "FUNCTIONS EXPORTED BY \f(CWB\fR"
The \f(CWB\fR module exports a variety of functions: some are simple
utility functions, others provide a Perl program with a way to
get an initial \*(L"handle\*(R" on an internal object.
.Ip "main_cv" 4
Return the (faked) \s-1CV\s0 corresponding to the main part of the Perl
program.
.Ip "main_root" 4
Returns the root op (i.e. an object in the appropriate B::\s-1OP\s0\-derived
class) of the main part of the Perl program.
.Ip "main_start" 4
Returns the starting op of the main part of the Perl program.
.Ip "comppadlist" 4
Returns the \s-1AV\s0 object (i.e. in class B::\s-1AV\s0) of the global comppadlist.
.Ip "sv_undef" 4
Returns the \s-1SV\s0 object corresponding to the C variable \f(CWsv_undef\fR.
.Ip "sv_yes" 4
Returns the \s-1SV\s0 object corresponding to the C variable \f(CWsv_yes\fR.
.Ip "sv_no" 4
Returns the \s-1SV\s0 object corresponding to the C variable \f(CWsv_no\fR.
.Ip "walkoptree(\s-1OP\s0, \s-1METHOD\s0)" 4
Does a tree-walk of the syntax tree based at \s-1OP\s0 and calls \s-1METHOD\s0 on
each op it visits. Each node is visited before its children. If
\f(CWwalkoptree_debug\fR (q.v.) has been called to turn debugging on then
the method \f(CWwalkoptree_debug\fR is called on each op before \s-1METHOD\s0 is
called.
.Ip "walkoptree_debug(\s-1DEBUG\s0)" 4
Returns the current debugging flag for \f(CWwalkoptree\fR. If the optional
\s-1DEBUG\s0 argument is non-zero, it sets the debugging flag to that. See
the description of \f(CWwalkoptree\fR above for what the debugging flag
does.
.Ip "walksymtable(\s-1SYMREF\s0, \s-1METHOD\s0, \s-1RECURSE\s0)" 4
Walk the symbol table starting at \s-1SYMREF\s0 and call \s-1METHOD\s0 on each
symbol visited. When the walk reached package symbols \*(L"Foo::\*(R" it
invokes \s-1RECURSE\s0 and only recurses into the package if that sub
returns true.
.Ip "svref_2object(\s-1SV\s0)" 4
Takes any Perl variable and turns it into an object in the
appropriate B::\s-1OP\s0\-derived or B::\s-1SV\s0\-derived class. Apart from functions
such as \f(CWmain_root\fR, this is the primary way to get an initial
\*(L"handle\*(R" on a internal perl data structure which can then be followed
with the other access methods.
.Ip "ppname(\s-1OPNUM\s0)" 4
Return the \s-1PP\s0 function name (e.g. \*(L"pp_add") of op number \s-1OPNUM\s0.
.Ip "hash(\s-1STR\s0)" 4
Returns a string in the form \*(L"0x...\*(R" representing the value of the
internal hash function used by perl on string \s-1STR\s0.
.Ip "cast_I32(I)" 4
Casts I to the internal I32 type used by that perl.
.Ip "minus_c" 4
Does the equivalent of the \f(CW-c\fR command-line option. Obviously, this
is only useful in a \s-1BEGIN\s0 block or else the flag is set too late.
.Ip "cstring(\s-1STR\s0)" 4
Returns a double-quote-surrounded escaped version of \s-1STR\s0 which can
be used as a string in C source code.
.Ip "class(\s-1OBJ\s0)" 4
Returns the class of an object without the part of the classname
preceding the first \*(L"::\*(R". This is used to turn \*(L"B::\s-1UNOP\s0\*(R" into
\*(L"\s-1UNOP\s0\*(R" for example.
.Ip "threadsv_names" 4
In a perl compiled for threads, this returns a list of the special
per-thread threadsv variables.
.Ip "byteload_fh(\s-1FILEHANDLE\s0)" 4
Load the contents of \s-1FILEHANDLE\s0 as bytecode. See documentation for
the \fBBytecode\fR module in \fIB::Backend\fR for how to generate bytecode.
.SH "AUTHOR"
Malcolm Beattie, \f(CWmbeattie@sable.ox.ac.uk\fR

.rn }` ''
.IX Title "B 3"
.IX Name "B - The Perl Compiler"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "OVERVIEW OF CLASSES"

.IX Subsection "\s-1SV\s0\-\s-1RELATED\s0 \s-1CLASSES\s0"

.IX Subsection "B::\s-1SV\s0 \s-1METHODS\s0"

.IX Item "\s-1REFCNT\s0"

.IX Item "\s-1FLAGS\s0"

.IX Subsection "B::\s-1IV\s0 \s-1METHODS\s0"

.IX Item "\s-1IV\s0"

.IX Item "\s-1IVX\s0"

.IX Item "needs64bits"

.IX Item "packiv"

.IX Subsection "B::\s-1NV\s0 \s-1METHODS\s0"

.IX Item "\s-1NV\s0"

.IX Item "\s-1NVX\s0"

.IX Subsection "B::\s-1RV\s0 \s-1METHODS\s0"

.IX Item "\s-1RV\s0"

.IX Subsection "B::\s-1PV\s0 \s-1METHODS\s0"

.IX Item "\s-1PV\s0"

.IX Subsection "B::\s-1PVMG\s0 \s-1METHODS\s0"

.IX Item "\s-1MAGIC\s0"

.IX Item "SvSTASH"

.IX Subsection "B::\s-1MAGIC\s0 \s-1METHODS\s0"

.IX Item "\s-1MOREMAGIC\s0"

.IX Item "\s-1PRIVATE\s0"

.IX Item "\s-1TYPE\s0"

.IX Item "\s-1FLAGS\s0"

.IX Item "\s-1OBJ\s0"

.IX Item "\s-1PTR\s0"

.IX Subsection "B::\s-1PVLV\s0 \s-1METHODS\s0"

.IX Item "\s-1TARGOFF\s0"

.IX Item "\s-1TARGLEN\s0"

.IX Item "\s-1TYPE\s0"

.IX Item "\s-1TARG\s0"

.IX Subsection "B::\s-1BM\s0 \s-1METHODS\s0"

.IX Item "\s-1USEFUL\s0"

.IX Item "\s-1PREVIOUS\s0"

.IX Item "\s-1RARE\s0"

.IX Item "\s-1TABLE\s0"

.IX Subsection "B::\s-1GV\s0 \s-1METHODS\s0"

.IX Item "\s-1NAME\s0"

.IX Item "\s-1STASH\s0"

.IX Item "\s-1SV\s0"

.IX Item "\s-1IO\s0"

.IX Item "\s-1FORM\s0"

.IX Item "\s-1AV\s0"

.IX Item "\s-1HV\s0"

.IX Item "\s-1EGV\s0"

.IX Item "\s-1CV\s0"

.IX Item "\s-1CVGEN\s0"

.IX Item "\s-1LINE\s0"

.IX Item "\s-1FILEGV\s0"

.IX Item "GvREFCNT"

.IX Item "\s-1FLAGS\s0"

.IX Subsection "B::\s-1IO\s0 \s-1METHODS\s0"

.IX Item "\s-1LINES\s0"

.IX Item "\s-1PAGE\s0"

.IX Item "\s-1PAGE_LEN\s0"

.IX Item "\s-1LINES_LEFT\s0"

.IX Item "\s-1TOP_NAME\s0"

.IX Item "\s-1TOP_GV\s0"

.IX Item "\s-1FMT_NAME\s0"

.IX Item "\s-1FMT_GV\s0"

.IX Item "\s-1BOTTOM_NAME\s0"

.IX Item "\s-1BOTTOM_GV\s0"

.IX Item "\s-1SUBPROCESS\s0"

.IX Item "IoTYPE"

.IX Item "IoFLAGS"

.IX Subsection "B::\s-1AV\s0 \s-1METHODS\s0"

.IX Item "\s-1FILL\s0"

.IX Item "\s-1MAX\s0"

.IX Item "\s-1OFF\s0"

.IX Item "\s-1ARRAY\s0"

.IX Item "AvFLAGS"

.IX Subsection "B::\s-1CV\s0 \s-1METHODS\s0"

.IX Item "\s-1STASH\s0"

.IX Item "\s-1START\s0"

.IX Item "\s-1ROOT\s0"

.IX Item "\s-1GV\s0"

.IX Item "\s-1FILEGV\s0"

.IX Item "\s-1DEPTH\s0"

.IX Item "\s-1PADLIST\s0"

.IX Item "\s-1OUTSIDE\s0"

.IX Item "\s-1XSUB\s0"

.IX Item "\s-1XSUBANY\s0"

.IX Item "CvFLAGS"

.IX Subsection "B::\s-1HV\s0 \s-1METHODS\s0"

.IX Item "\s-1FILL\s0"

.IX Item "\s-1MAX\s0"

.IX Item "\s-1KEYS\s0"

.IX Item "\s-1RITER\s0"

.IX Item "\s-1NAME\s0"

.IX Item "\s-1PMROOT\s0"

.IX Item "\s-1ARRAY\s0"

.IX Subsection "\s-1OP\s0\-\s-1RELATED\s0 \s-1CLASSES\s0"

.IX Subsection "B::\s-1OP\s0 \s-1METHODS\s0"

.IX Item "next"

.IX Item "sibling"

.IX Item "ppaddr"

.IX Item "desc"

.IX Item "targ"

.IX Item "type"

.IX Item "seq"

.IX Item "flags"

.IX Item "private"

.IX Subsection "B::\s-1UNOP\s0 \s-1METHOD\s0"

.IX Item "first"

.IX Subsection "B::\s-1BINOP\s0 \s-1METHOD\s0"

.IX Item "last"

.IX Subsection "B::\s-1LOGOP\s0 \s-1METHOD\s0"

.IX Item "other"

.IX Subsection "B::\s-1CONDOP\s0 \s-1METHODS\s0"

.IX Item "true"

.IX Item "false"

.IX Subsection "B::\s-1LISTOP\s0 \s-1METHOD\s0"

.IX Item "children"

.IX Subsection "B::\s-1PMOP\s0 \s-1METHODS\s0"

.IX Item "pmreplroot"

.IX Item "pmreplstart"

.IX Item "pmnext"

.IX Item "pmregexp"

.IX Item "pmflags"

.IX Item "pmpermflags"

.IX Item "precomp"

.IX Subsection "B::\s-1SVOP\s0 \s-1METHOD\s0"

.IX Item "sv"

.IX Subsection "B::\s-1GVOP\s0 \s-1METHOD\s0"

.IX Item "gv"

.IX Subsection "B::\s-1PVOP\s0 \s-1METHOD\s0"

.IX Item "pv"

.IX Subsection "B::\s-1LOOP\s0 \s-1METHODS\s0"

.IX Item "redoop"

.IX Item "nextop"

.IX Item "lastop"

.IX Subsection "B::\s-1COP\s0 \s-1METHODS\s0"

.IX Item "label"

.IX Item "stash"

.IX Item "filegv"

.IX Item "cop_seq"

.IX Item "arybase"

.IX Item "line"

.IX Header "FUNCTIONS EXPORTED BY \f(CWB\fR"

.IX Item "main_cv"

.IX Item "main_root"

.IX Item "main_start"

.IX Item "comppadlist"

.IX Item "sv_undef"

.IX Item "sv_yes"

.IX Item "sv_no"

.IX Item "walkoptree(\s-1OP\s0, \s-1METHOD\s0)"

.IX Item "walkoptree_debug(\s-1DEBUG\s0)"

.IX Item "walksymtable(\s-1SYMREF\s0, \s-1METHOD\s0, \s-1RECURSE\s0)"

.IX Item "svref_2object(\s-1SV\s0)"

.IX Item "ppname(\s-1OPNUM\s0)"

.IX Item "hash(\s-1STR\s0)"

.IX Item "cast_I32(I)"

.IX Item "minus_c"

.IX Item "cstring(\s-1STR\s0)"

.IX Item "class(\s-1OBJ\s0)"

.IX Item "threadsv_names"

.IX Item "byteload_fh(\s-1FILEHANDLE\s0)"

.IX Header "AUTHOR"

