.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::MIME::Decoder::NBit 3 "perl 5.007, patch 00" "4/Nov/100" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
MIME::Decoder::NBit \- encode/decode a \*(L"7bit\*(R" or \*(L"8bit\*(R" stream
.SH "SYNOPSIS"
A generic decoder object; see the \fIMIME::Decoder\fR manpage for usage.
.SH "DESCRIPTION"
This is a MIME::Decoder subclass for the \f(CW7bit\fR and \f(CW8bit\fR content
transfer encodings.  These are not \*(L"encodings\*(R" per se: rather, they
are simply assertions of the content of the message.
From RFC\-2045 Section 6.2.:
.PP
.Vb 3
\&   Three transformations are currently defined: identity, the "quoted-
\&   printable" encoding, and the "base64" encoding.  The domains are
\&   "binary", "8bit" and "7bit".
.Ve
.Vb 6
\&   The Content-Transfer-Encoding values "7bit", "8bit", and "binary" all
\&   mean that the identity (i.e. NO) encoding transformation has been
\&   performed.  As such, they serve simply as indicators of the domain of
\&   the body data, and provide useful information about the sort of
\&   encoding that might be needed for transmission in a given transport
\&   system.  
.Ve
In keeping with this: as of MIME\-tools 4.x, 
\fIthis class does no modification of its input when encoding;\fR 
all it does is attempt to \fIdetect violations\fR of the 7bit/8bit assertion, 
and issue a warning (one per message) if any are found.
.Sh "Legal 7bit data"
\s-1RFC\s0\-2045 Section 2.7 defines legal \f(CW7bit\fR data:
.PP
.Vb 6
\&   "7bit data" refers to data that is all represented as relatively
\&   short lines with 998 octets or less between CRLF line separation
\&   sequences [RFC-821].  No octets with decimal values greater than 127
\&   are allowed and neither are NULs (octets with decimal value 0).  CR
\&   (decimal value 13) and LF (decimal value 10) octets only occur as
\&   part of CRLF line separation sequences.
.Ve
.Sh "Legal 8bit data"
\s-1RFC\s0\-2045 Section 2.8 defines legal \f(CW8bit\fR data:
.PP
.Vb 5
\&   "8bit data" refers to data that is all represented as relatively
\&   short lines with 998 octets or less between CRLF line separation
\&   sequences [RFC-821]), but octets with decimal values greater than 127
\&   may be used.  As with "7bit data" CR and LF octets only occur as part
\&   of CRLF line separation sequences and no NULs are allowed.
.Ve
.Sh "How decoding is done"
The \fBdecoder\fR does a line-by-line pass-through from input to output,
leaving the data unchanged \fIexcept\fR that an end-of-line sequence of
\s-1CRLF\s0 is converted to a newline \*(L"\en\*(R".  Given the line-oriented nature
of 7bit and 8bit, this seems relatively sensible.
.Sh "How encoding is done"
The \fBencoder\fR does a line-by-line pass-through from input to output,
and simply attempts to \fIdetect\fR violations of the \f(CW7bit\fR/\f(CW8bit\fR
domain.  The default action is to warn once per encoding if violations
are detected; the warnings may be silenced with the \s-1QUIET\s0 configuration
of the \fI\s-1MIME::\s0Tools\fR manpage.
.SH "AUTHOR"
Eryq (\fIeryq@zeegee.com\fR), ZeeGee Software Inc (\fIhttp://www.zeegee.com\fR).
.PP
All rights reserved.  This program is free software; you can redistribute 
it and/or modify it under the same terms as Perl itself.
.SH "VERSION"
$Revision: 5.403 $ \f(CW$Date:\fR 2000/11/04 19:54:48 $

.rn }` ''
.IX Title "lib::MIME::Decoder::NBit 3"
.IX Name "MIME::Decoder::NBit - encode/decode a "7bit" or "8bit" stream"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Subsection "Legal 7bit data"

.IX Subsection "Legal 8bit data"

.IX Subsection "How decoding is done"

.IX Subsection "How encoding is done"

.IX Header "AUTHOR"

.IX Header "VERSION"

