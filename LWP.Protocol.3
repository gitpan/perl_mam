.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::LWP::Protocol 3 "perl 5.004, patch 01" "7/May/97" "User Contributed Perl Documentation"
.IX Title "lib::LWP::Protocol 3"
.UC
.IX Name "LWP::Protocol - Base class for LWP protocols"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
LWP::Protocol \- Base class for LWP protocols
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 3
\& package LWP::Protocol::foo;
\& require LWP::Protocol;
\& @ISA=qw(LWP::Protocol);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class is used a the base class for all protocol implementations
supported by the LWP library.
.PP
When creating an instance of this class using
\f(CWLWP::Protocol::create($url)\fR, and you get an initialised subclass
appropriate for that access method. In other words, the
\fILWP::Protocol::create()\fR function calls the constructor for one of its
subclasses.
.PP
All derived LWP::Protocol classes need to override the \fIrequest()\fR
method which is used to service a request. The overridden method can
make use of the \fIcollect()\fR function to collect together chunks of data
as it is received.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Inspect the \fILWP/Protocol/file.pm\fR and \fILWP/Protocol/http.pm\fR files
for examples of usage.
.SH "METHODS AND FUNCTIONS"
.IX Header "METHODS AND FUNCTIONS"
.Sh "\f(CW$prot\fR = new \s-1HTTP::\s0Protocol;"
.IX Subsection "\f(CW$prot\fR = new \s-1HTTP::\s0Protocol;"
The \s-1LWP::\s0Protocol constructor is inherited by subclasses. As this is a
virtual base class this method should \fBnot\fR be called directly.
.Sh "\f(CW$prot\fR = \fI\s-1LWP::\s0Protocol::create\fR\|($url)"
.IX Subsection "\f(CW$prot\fR = \fI\s-1LWP::\s0Protocol::create\fR\|($url)"
Create an object of the class implementing the protocol to handle the
given scheme. This is a function, not a method. It is more an object
factory than a constructor. This is the function user agents should
use to access protocols.
.Sh "\f(CW$class\fR = \fI\s-1LWP::\s0Protocol::implementor\fR\|($scheme, [$class])"
.IX Subsection "\f(CW$class\fR = \fI\s-1LWP::\s0Protocol::implementor\fR\|($scheme, [$class])"
Get and/or set implementor class for a scheme.  Returns \*(L'\*(R' if the
specified scheme is not supported.
.Sh "\f(CW$prot\fR\->\fIrequest\fR\|(...)"
.IX Subsection "\f(CW$prot\fR\->\fIrequest\fR\|(...)"
.PP
.Vb 3
\& $response = $protocol->request($request, $proxy, undef);
\& $response = $protocol->request($request, $proxy, '/tmp/sss');
\& $response = $protocol->request($request, $proxy, \e&callback, 1024);
.Ve
Dispactches a request over the protocol, and returns a response
object. This method needs to be overridden in subclasses.  Referer to
the \fI\s-1LWP::\s0UserAgent\fR manpage for description of the arguments.
.Sh "\f(CW$prot\fR\->\fItimeout\fR\|($seconds)"
.IX Subsection "\f(CW$prot\fR\->\fItimeout\fR\|($seconds)"
Get and set the timeout value in seconds
.Sh "\f(CW$prot\fR\->\fIuse_alarm\fR\|($yesno)"
.IX Subsection "\f(CW$prot\fR\->\fIuse_alarm\fR\|($yesno)"
Indicates if the library is allowed to use the core \fIalarm()\fR
function to implement timeouts.
.Sh "\f(CW$prot\fR\->\fIparse_head\fR\|($yesno)"
.IX Subsection "\f(CW$prot\fR\->\fIparse_head\fR\|($yesno)"
Should we initialize response headers from the <head> section of \s-1HTML\s0
documents.
.Sh "\f(CW$prot\fR\->\fIcollect\fR\|($arg, \f(CW$response\fR, \f(CW$collector\fR)"
.IX Subsection "\f(CW$prot\fR\->\fIcollect\fR\|($arg, \f(CW$response\fR, \f(CW$collector\fR)"
Called to collect the content of a request, and process it
appropriately into a scalar, file, or by calling a callback.  If \f(CW$arg\fR
is undefined, then the content is stored within the \f(CW$response\fR.  If
\f(CW$arg\fR is a simple scalar, then \f(CW$arg\fR is interpreted as a file name and
the content is written to this file.  If \f(CW$arg\fR is a reference to a
routine, then content is passed to this routine.
.PP
The \f(CW$collector\fR is a routine that will be called and which is
reponsible for returning pieces (as ref to scalar) of the content to
process.  The \f(CW$collector\fR signals \s-1EOF\s0 by returning a reference to an
empty sting.
.PP
The return value from \fIcollect()\fR is the \f(CW$response\fR object reference.
.PP
\fBNote:\fR We will only use the callback or file argument if
\f(CW$response\fR\->\fIis_success()\fR.  This avoids sendig content data for
redirects and authentization responses to the callback which would be
confusing.
.Sh "\f(CW$prot\fR\->\fIcollect_once\fR\|($arg, \f(CW$response\fR, \f(CW$content\fR)"
.IX Subsection "\f(CW$prot\fR\->\fIcollect_once\fR\|($arg, \f(CW$response\fR, \f(CW$content\fR)"
Can be called when the whole response content is available as
\f(CW$content\fR.  This will invoke \fIcollect()\fR with a collector callback that
returns a reference to \f(CW$content\fR the first time and an empty string the
next.

.rn }` ''
