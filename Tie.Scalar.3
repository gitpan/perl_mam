.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Tie/Scalar 3 "perl 5.003, patch 05" "16/Aug/96" "Perl Programmers Reference Guide"
.IX Title "Tie/Scalar 3"
.UC
.IX Name "Tie::Scalar, Tie::StdScalar - base class definitions for tied scalars"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
Tie::Scalar, Tie::StdScalar \- base class definitions for tied scalars
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 22
\&    package NewScalar;
\&    require Tie::Scalar;
\&     
\&    @ISA = (Tie::Scalar);
\&     
\&    sub FETCH { ... }           # Provide a needed method
\&    sub TIESCALAR { ... }       # Overrides inherited method
\&         
\&     
\&    package NewStdScalar;
\&    require Tie::Scalar;
\&    
\&    @ISA = (Tie::StdScalar);
\&    
\&    # All methods provided by default, so define only what needs be overridden
\&    sub FETCH { ... }
\&    
\&    
\&    package main;
\&    
\&    tie $new_scalar, 'NewScalar';
\&    tie $new_std_scalar, 'NewStdScalar';
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides some skeletal methods for scalar-tying classes. See
the \fIperltie\fR manpage for a list of the functions required in tying a scalar to a
package. The basic \fBTie::Scalar\fR package provides a \f(CWnew\fR method, as well
as methods \f(CWTIESCALAR\fR, \f(CWFETCH\fR and \f(CWSTORE\fR. The \fBTie::StdScalar\fR
package provides all the methods specified in  the \fIperltie\fR manpage. It inherits from
\fBTie::Scalar\fR and causes scalars tied to it to behave exactly like the
built-in scalars, allowing for selective overloading of methods. The \f(CWnew\fR
method is provided as a means of grandfathering, for classes that forget to
provide their own \f(CWTIESCALAR\fR method.
.PP
For developers wishing to write their own tied-scalar classes, the methods
are summarized below. The the \fIperltie\fR manpage section not only documents these, but
has sample code as well:
.Ip "\s-1TIESCALAR\s0 classname, \s-1LIST\s0" 5
.IX Item "\s-1TIESCALAR\s0 classname, \s-1LIST\s0"
The method invoked by the command \f(CWtie $scalar, classname\fR. Associates a new
scalar instance with the specified class. \f(CWLIST\fR would represent additional
arguments (along the lines of the \fIAnyDBM_File\fR manpage and compatriots) needed to
complete the association.
.Ip "\s-1FETCH\s0 this" 5
.IX Item "\s-1FETCH\s0 this"
Retrieve the value of the tied scalar referenced by \fIthis\fR.
.Ip "\s-1STORE\s0 this, value" 5
.IX Item "\s-1STORE\s0 this, value"
Store data \fIvalue\fR in the tied scalar referenced by \fIthis\fR.
.Ip "\s-1DESTROY\s0 this" 5
.IX Item "\s-1DESTROY\s0 this"
Free the storage associated with the tied scalar referenced by \fIthis\fR.
This is rarely needed, as Perl manages its memory quite well. But the
option exists, should a class wish to perform specific actions upon the
destruction of an instance.
.SH "MORE INFORMATION"
.IX Header "MORE INFORMATION"
The the \fIperltie\fR manpage section uses a good example of tying scalars by associating
process IDs with priority.

.rn }` ''
