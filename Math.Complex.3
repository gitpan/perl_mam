.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH Math::Complex 3 "perl 5.004, patch 01" "24/Apr/97" "Perl Programmers Reference Guide"
.IX Title "Math::Complex 3"
.UC
.IX Name "Math::Complex - complex numbers and associated mathematical functions"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
Math::Complex \- complex numbers and associated mathematical functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 5
\&        use Math::Complex;
\&        
\&        $z = Math::Complex->make(5, 6);
\&        $t = 4 - 3*i + $z;
\&        $j = cplxe(1, 2*pi/3);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package lets you create and manipulate complex numbers. By default,
\fIPerl\fR limits itself to real numbers, but an extra \f(CWuse\fR statement brings
full complex support, along with a full set of mathematical functions
typically associated with and/or extended to complex numbers.
.PP
If you wonder what complex numbers are, they were invented to be able to solve
the following equation:
.PP
.Vb 1
\&        x*x = -1
.Ve
and by definition, the solution is noted \fIi\fR (engineers use \fIj\fR instead since
\fIi\fR usually denotes an intensity, but the name does not matter). The number
\fIi\fR is a pure \fIimaginary\fR number.
.PP
The arithmetics with pure imaginary numbers works just like you would expect
it with real numbers... you just have to remember that
.PP
.Vb 1
\&        i*i = -1
.Ve
so you have:
.PP
.Vb 5
\&        5i + 7i = i * (5 + 7) = 12i
\&        4i - 3i = i * (4 - 3) = i
\&        4i * 2i = -8
\&        6i / 2i = 3
\&        1 / i = -i
.Ve
Complex numbers are numbers that have both a real part and an imaginary
part, and are usually noted:
.PP
.Vb 1
\&        a + bi
.Ve
where \f(CWa\fR is the \fIreal\fR part and \f(CWb\fR is the \fIimaginary\fR part. The
arithmetic with complex numbers is straightforward. You have to
keep track of the real and the imaginary parts, but otherwise the
rules used for real numbers just apply:
.PP
.Vb 2
\&        (4 + 3i) + (5 - 2i) = (4 + 5) + i(3 - 2) = 9 + i
\&        (2 + i) * (4 - i) = 2*4 + 4i -2i -i*i = 8 + 2i + 1 = 9 + 2i
.Ve
A graphical representation of complex numbers is possible in a plane
(also called the \fIcomplex plane\fR, but it's really a 2D plane).
The number
.PP
.Vb 1
\&        z = a + bi
.Ve
is the point whose coordinates are (a, b). Actually, it would
be the vector originating from (0, 0) to (a, b). It follows that the addition
of two complex numbers is a vectorial addition.
.PP
Since there is a bijection between a point in the 2D plane and a complex
number (i.e. the mapping is unique and reciprocal), a complex number
can also be uniquely identified with polar coordinates:
.PP
.Vb 1
\&        [rho, theta]
.Ve
where \f(CWrho\fR is the distance to the origin, and \f(CWtheta\fR the angle between
the vector and the \fIx\fR axis. There is a notation for this using the
exponential form, which is:
.PP
.Vb 1
\&        rho * exp(i * theta)
.Ve
where \fIi\fR is the famous imaginary number introduced above. Conversion
between this form and the cartesian form \f(CWa + bi\fR is immediate:
.PP
.Vb 2
\&        a = rho * cos(theta)
\&        b = rho * sin(theta)
.Ve
which is also expressed by this formula:
.PP
.Vb 1
\&        z = rho * exp(i * theta) = rho * (cos theta + i * sin theta) 
.Ve
In other words, it's the projection of the vector onto the \fIx\fR and \fIy\fR
axes. Mathematicians call \fIrho\fR the \fInorm\fR or \fImodulus\fR and \fItheta\fR
the \fIargument\fR of the complex number. The \fInorm\fR of \f(CWz\fR will be
noted \f(CWabs(z)\fR.
.PP
The polar notation (also known as the trigonometric
representation) is much more handy for performing multiplications and
divisions of complex numbers, whilst the cartesian notation is better
suited for additions and substractions. Real numbers are on the \fIx\fR
axis, and therefore \fItheta\fR is zero.
.PP
All the common operations that can be performed on a real number have
been defined to work on complex numbers as well, and are merely
\fIextensions\fR of the operations defined on real numbers. This means
they keep their natural meaning when there is no imaginary part, provided
the number is within their definition set.
.PP
For instance, the \f(CWsqrt\fR routine which computes the square root of
its argument is only defined for positive real numbers and yields a
positive real number (it is an application from \fBR+\fR to \fBR+\fR).
If we allow it to return a complex number, then it can be extended to
negative real numbers to become an application from \fBR\fR to \fBC\fR (the
set of complex numbers):
.PP
.Vb 1
\&        sqrt(x) = x >= 0 ? sqrt(x) : sqrt(-x)*i
.Ve
It can also be extended to be an application from \fBC\fR to \fBC\fR,
whilst its restriction to \fBR\fR behaves as defined above by using
the following definition:
.PP
.Vb 1
\&        sqrt(z = [r,t]) = sqrt(r) * exp(i * t/2)
.Ve
Indeed, a negative real number can be noted \f(CW[x,pi]\fR
(the modulus \fIx\fR is always positive, so \f(CW[x,pi]\fR is really \f(CW-x\fR, a
negative number)
and the above definition states that
.PP
.Vb 1
\&        sqrt([x,pi]) = sqrt(x) * exp(i*pi/2) = [sqrt(x),pi/2] = sqrt(x)*i
.Ve
which is exactly what we had defined for negative real numbers above.
.PP
All the common mathematical functions defined on real numbers that
are extended to complex numbers share that same property of working
\fIas usual\fR when the imaginary part is zero (otherwise, it would not
be called an extension, would it?).
.PP
A \fInew\fR operation possible on a complex number that is
the identity for real numbers is called the \fIconjugate\fR, and is noted
with an horizontal bar above the number, or \f(CW~z\fR here.
.PP
.Vb 2
\&         z = a + bi
\&        ~z = a - bi
.Ve
Simple... Now look:
.PP
.Vb 1
\&        z * ~z = (a + bi) * (a - bi) = a*a + b*b
.Ve
We saw that the norm of \f(CWz\fR was noted \f(CWabs(z)\fR and was defined as the
distance to the origin, also known as:
.PP
.Vb 1
\&        rho = abs(z) = sqrt(a*a + b*b)
.Ve
so
.PP
.Vb 1
\&        z * ~z = abs(z) ** 2
.Ve
If z is a pure real number (i.e. \f(CWb == 0\fR), then the above yields:
.PP
.Vb 1
\&        a * a = abs(a) ** 2
.Ve
which is true (\f(CWabs\fR has the regular meaning for real number, i.e. stands
for the absolute value). This example explains why the norm of \f(CWz\fR is
noted \f(CWabs(z)\fR: it extends the \f(CWabs\fR function to complex numbers, yet
is the regular \f(CWabs\fR we know when the complex number actually has no
imaginary part... This justifies \fIa posteriori\fR our use of the \f(CWabs\fR
notation for the norm.
.SH "OPERATIONS"
.IX Header "OPERATIONS"
Given the following notations:
.PP
.Vb 3
\&        z1 = a + bi = r1 * exp(i * t1)
\&        z2 = c + di = r2 * exp(i * t2)
\&        z = <any complex or real number>
.Ve
the following (overloaded) operations are supported on complex numbers:
.PP
.Vb 14
\&        z1 + z2 = (a + c) + i(b + d)
\&        z1 - z2 = (a - c) + i(b - d)
\&        z1 * z2 = (r1 * r2) * exp(i * (t1 + t2))
\&        z1 / z2 = (r1 / r2) * exp(i * (t1 - t2))
\&        z1 ** z2 = exp(z2 * log z1)
\&        ~z1 = a - bi
\&        abs(z1) = r1 = sqrt(a*a + b*b)
\&        sqrt(z1) = sqrt(r1) * exp(i * t1/2)
\&        exp(z1) = exp(a) * exp(i * b)
\&        log(z1) = log(r1) + i*t1
\&        sin(z1) = 1/2i (exp(i * z1) - exp(-i * z1))
\&        cos(z1) = 1/2 (exp(i * z1) + exp(-i * z1))
\&        abs(z1) = r1
\&        atan2(z1, z2) = atan(z1/z2)
.Ve
The following extra operations are supported on both real and complex
numbers:
.PP
.Vb 3
\&        Re(z) = a
\&        Im(z) = b
\&        arg(z) = t
.Ve
.Vb 3
\&        cbrt(z) = z ** (1/3)
\&        log10(z) = log(z) / log(10)
\&        logn(z, n) = log(z) / log(n)
.Ve
.Vb 1
\&        tan(z) = sin(z) / cos(z)
.Ve
.Vb 3
\&        csc(z) = 1 / sin(z)
\&        sec(z) = 1 / cos(z)
\&        cot(z) = 1 / tan(z)
.Ve
.Vb 3
\&        asin(z) = -i * log(i*z + sqrt(1-z*z))
\&        acos(z) = -i * log(z + sqrt(z*z-1))
\&        atan(z) = i/2 * log((i+z) / (i-z))
.Ve
.Vb 3
\&        acsc(z) = asin(1 / z)
\&        asec(z) = acos(1 / z)
\&        acot(z) = -i/2 * log((i+z) / (z-i))
.Ve
.Vb 3
\&        sinh(z) = 1/2 (exp(z) - exp(-z))
\&        cosh(z) = 1/2 (exp(z) + exp(-z))
\&        tanh(z) = sinh(z) / cosh(z) = (exp(z) - exp(-z)) / (exp(z) + exp(-z))
.Ve
.Vb 7
\&        csch(z) = 1 / sinh(z)
\&        sech(z) = 1 / cosh(z)
\&        coth(z) = 1 / tanh(z)
\&        
\&        asinh(z) = log(z + sqrt(z*z+1))
\&        acosh(z) = log(z + sqrt(z*z-1))
\&        atanh(z) = 1/2 * log((1+z) / (1-z))
.Ve
.Vb 3
\&        acsch(z) = asinh(1 / z)
\&        asech(z) = acosh(1 / z)
\&        acoth(z) = atanh(1 / z) = 1/2 * log((1+z) / (z-1))
.Ve
\fIlog\fR, \fIcsc\fR, \fIcot\fR, \fIacsc\fR, \fIacot\fR, \fIcsch\fR, \fIcoth\fR,
\fIacosech\fR, \fIacotanh\fR, have aliases \fIln\fR, \fIcosec\fR, \fIcotan\fR,
\fIacosec\fR, \fIacotan\fR, \fIcosech\fR, \fIcotanh\fR, \fIacosech\fR, \fIacotanh\fR,
respectively.
.PP
The \fIroot\fR function is available to compute all the \fIn\fR
roots of some complex, where \fIn\fR is a strictly positive integer.
There are exactly \fIn\fR such roots, returned as a list. Getting the
number mathematicians call \f(CWj\fR such that:
.PP
.Vb 1
\&        1 + j + j*j = 0;
.Ve
is a simple matter of writing:
.PP
.Vb 1
\&        $j = ((root(1, 3))[1];
.Ve
The \fIk\fRth root for \f(CWz = [r,t]\fR is given by:
.PP
.Vb 1
\&        (root(z, n))[k] = r**(1/n) * exp(i * (t + 2*k*pi)/n)
.Ve
The \fIspaceship\fR comparison operator, <=>, is also defined. In
order to ensure its restriction to real numbers is conform to what you
would expect, the comparison is run on the real part of the complex
number first, and imaginary parts are compared only when the real
parts match.
.SH "CREATION"
.IX Header "CREATION"
To create a complex number, use either:
.PP
.Vb 2
\&        $z = Math::Complex->make(3, 4);
\&        $z = cplx(3, 4);
.Ve
if you know the cartesian form of the number, or
.PP
.Vb 1
\&        $z = 3 + 4*i;
.Ve
if you like. To create a number using the trigonometric form, use either:
.PP
.Vb 2
\&        $z = Math::Complex->emake(5, pi/3);
\&        $x = cplxe(5, pi/3);
.Ve
instead. The first argument is the modulus, the second is the angle
(in radians, the full circle is 2*pi).  (Mnmemonic: \f(CWe\fR is used as a
notation for complex numbers in the trigonometric form).
.PP
It is possible to write:
.PP
.Vb 1
\&        $x = cplxe(-3, pi/4);
.Ve
but that will be silently converted into \f(CW[3,-3pi/4]\fR, since the modulus
must be positive (it represents the distance to the origin in the complex
plane).
.SH "STRINGIFICATION"
.IX Header "STRINGIFICATION"
When printed, a complex number is usually shown under its cartesian
form \fIa+bi\fR, but there are legitimate cases where the polar format
\fI[r,t]\fR is more appropriate.
.PP
By calling the routine \f(CWMath::Complex::display_format\fR and supplying either
\f(CW"polar"\fR or \f(CW"cartesian"\fR, you override the default display format,
which is \f(CW"cartesian"\fR. Not supplying any argument returns the current
setting.
.PP
This default can be overridden on a per-number basis by calling the
\f(CWdisplay_format\fR method instead. As before, not supplying any argument
returns the current display format for this number. Otherwise whatever you
specify will be the new display format for \fIthis\fR particular number.
.PP
For instance:
.PP
.Vb 1
\&        use Math::Complex;
.Ve
.Vb 5
\&        Math::Complex::display_format('polar');
\&        $j = ((root(1, 3))[1];
\&        print "j = $j\en";               # Prints "j = [1,2pi/3]
\&        $j->display_format('cartesian');
\&        print "j = $j\en";               # Prints "j = -0.5+0.866025403784439i"
.Ve
The polar format attempts to emphasize arguments like \fIk*pi/n\fR
(where \fIn\fR is a positive integer and \fIk\fR an integer within [\-9,+9]).
.SH "USAGE"
.IX Header "USAGE"
Thanks to overloading, the handling of arithmetics with complex numbers
is simple and almost transparent.
.PP
Here are some examples:
.PP
.Vb 1
\&        use Math::Complex;
.Ve
.Vb 3
\&        $j = cplxe(1, 2*pi/3);  # $j ** 3 == 1
\&        print "j = $j, j**3 = ", $j ** 3, "\en";
\&        print "1 + j + j**2 = ", 1 + $j + $j**2, "\en";
.Ve
.Vb 2
\&        $z = -16 + 0*i;                 # Force it to be a complex
\&        print "sqrt($z) = ", sqrt($z), "\en";
.Ve
.Vb 2
\&        $k = exp(i * 2*pi/3);
\&        print "$j - $k = ", $j - $k, "\en";
.Ve
.SH "ERRORS DUE TO DIVISION BY ZERO"
.IX Header "ERRORS DUE TO DIVISION BY ZERO"
The division (/) and the following functions
.PP
.Vb 16
\&        tan
\&        sec
\&        csc
\&        cot
\&        asec
\&        acsc
\&        atan
\&        acot
\&        tanh
\&        sech
\&        csch
\&        coth
\&        atanh
\&        asech
\&        acsch
\&        acoth
.Ve
cannot be computed for all arguments because that would mean dividing
by zero. These situations cause fatal runtime errors looking like this
.PP
.Vb 3
\&        cot(0): Division by zero.
\&        (Because in the definition of cot(0), the divisor sin(0) is 0)
\&        Died at ...
.Ve
For the \f(CWcsc\fR, \f(CWcot\fR, \f(CWasec\fR, \f(CWacsc\fR, \f(CWcsch\fR, \f(CWcoth\fR, \f(CWasech\fR,
\f(CWacsch\fR, the argument cannot be \f(CW0\fR (zero). For the \f(CWatanh\fR,
\f(CWacoth\fR, the argument cannot be \f(CW1\fR (one). For the \f(CWatan\fR, \f(CWacot\fR,
the argument cannot be \f(CWi\fR (the imaginary unit).  For the \f(CWtan\fR,
\f(CWsec\fR, \f(CWtanh\fR, \f(CWsech\fR, the argument cannot be \fIpi/2 + k * pi\fR, where
\fIk\fR is any integer.
.SH "BUGS"
.IX Header "BUGS"
Saying \f(CWuse Math::Complex;\fR exports many mathematical routines in the
caller environment and even overrides some (\f(CWsin\fR, \f(CWcos\fR, \f(CWsqrt\fR,
\f(CWlog\fR, \f(CWexp\fR).  This is construed as a feature by the Authors,
actually... ;\-)
.PP
The code is not optimized for speed, although we try to use the cartesian
form for addition-like operators and the trigonometric form for all
multiplication-like operators.
.PP
The \fIarg()\fR routine does not ensure the angle is within the range [\-pi,+pi]
(a side effect caused by multiplication and division using the trigonometric
representation).
.PP
All routines expect to be given real or complex numbers. Don't attempt to
use BigFloat, since Perl has currently no rule to disambiguate a \*(L'+\*(R'
operation (for instance) between two overloaded entities.
.SH "AUTHORS"
.IX Header "AUTHORS"
Raphael Manfredi <\fIRaphael_Manfredi@grenoble.hp.com\fR> and
Jarkko Hietaniemi <\fIjhi@iki.fi\fR>.

.rn }` ''
