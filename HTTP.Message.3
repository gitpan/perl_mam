.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH MESSAGE 1 "perl 5.003, patch 93" "25/Nov/96" "User Contributed Perl Documentation"
.IX Title "MESSAGE 1"
.UC
.IX Name "HTTP::Message - Class encapsulating HTTP messages"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
HTTP::Message \- Class encapsulating HTTP messages
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \f(CWHTTP::Message\fR object contains some headers and a content (body).
The class is abstract, i.e. it only used as a base class for
\f(CWHTTP::Request\fR and \f(CWHTTP::Response\fR and should never instantiated
as itself.
.SH "METHODS"
.IX Header "METHODS"
.Sh "\f(CW$mess\fR = new \s-1HTTP::\s0Message;"
.IX Subsection "\f(CW$mess\fR = new \s-1HTTP::\s0Message;"
This is the object constructor.  It should only be called internally
by this library.  External code should construct \f(CWHTTP::Request\fR or
\f(CWHTTP::Response\fR objects.
.Sh "\f(CW$mess\fR\->\fIclone()\fR"
.IX Subsection "\f(CW$mess\fR\->\fIclone()\fR"
Returns a copy of the object.
.Sh "\f(CW$mess\fR\->\fIprotocol\fR\|([$proto])"
.IX Subsection "\f(CW$mess\fR\->\fIprotocol\fR\|([$proto])"
Sets the \s-1HTTP\s0 protocol used for the message.  The \fIprotocol()\fR is a string
like \*(L"\s-1HTTP/1\s0.0\*(R" or \*(L"\s-1HTTP/1\s0.1\*(R".
.Sh "\f(CW$mess\fR\->\fIcontent\fR\|([$content])"
.IX Subsection "\f(CW$mess\fR\->\fIcontent\fR\|([$content])"
The \fIcontent()\fR method sets the content if an argument is given.  If no
argument is given the content is not touched.  In either case the
previous content is returned.
.Sh "\f(CW$mess\fR\->\fIadd_content\fR\|($data)"
.IX Subsection "\f(CW$mess\fR\->\fIadd_content\fR\|($data)"
The \fIadd_content()\fR methods appends more data to the end of the previous
content.
.Sh "\f(CW$mess\fR\->content_ref"
.IX Subsection "\f(CW$mess\fR\->content_ref"
The \fIcontent_ref()\fR method will return a reference to content string.
It can be more efficient to access the content this way if the content
is huge, and it can be used for direct manipulation of the content,
for instance:
.PP
.Vb 1
\&  ${$res->content_ref} =~ s/\ebfoo\eb/bar/g;
.Ve
.SH "HEADER METHODS"
.IX Header "HEADER METHODS"
All unknown \f(CWHTTP::Message\fR methods are delegated to the
\f(CWHTTP::Headers\fR object that is part of every message.  This allows
convenient access to these methods.  Refer to the \fIHTTP::Headers\fR manpage for
details of these methods:
.PP
.Vb 4
\&  $mess->header($field => $val);
\&  $mess->scan(&doit);
\&  $mess->push_header($field => $val);
\&  $mess->remove_header($field);
.Ve
.Vb 15
\&  $mess->date;
\&  $mess->expires;
\&  $mess->if_modified_since;
\&  $mess->last_modified;
\&  $mess->content_type;
\&  $mess->content_encoding;
\&  $mess->content_length;
\&  $mess->title;
\&  $mess->user_agent;
\&  $mess->server;
\&  $mess->from;
\&  $mess->referer;
\&  $mess->www_authenticate;
\&  $mess->authorization;
\&  $mess->authorization_basic;
.Ve
.Sh "\f(CW$mess\fR\->\fIheaders_as_string\fR\|([$endl])"
.IX Subsection "\f(CW$mess\fR\->\fIheaders_as_string\fR\|([$endl])"
Call the \s-1HTTP::\s0Headers->\fIas_string()\fR method for the headers in the
message.

.rn }` ''
