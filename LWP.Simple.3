.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::LWP::Simple 3 "perl 5.004, patch 01" "25/Nov/96" "User Contributed Perl Documentation"
.IX Title "lib::LWP::Simple 3"
.UC
.IX Name "get, head, getprint, getstore, mirror - Procedural LWP interface"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
get, head, getprint, getstore, mirror \- Procedural LWP interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 1
\& perl -MLWP::Simple -e 'getprint "http://www.sn.no"'
.Ve
.Vb 8
\& use LWP::Simple;
\& $content = get("http://www.sn.no/")
\& if (mirror("http://www.sn.no/", "foo") == RC_NOT_MODIFIED) {
\&     ...
\& }
\& if (is_success(getprint("http://www.sn.no/"))) {
\&     ...
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface is intended for those who want a simplified view of the
libwww-perl library.  This interface should also be suitable for
one-liners.  If you need more control or access to the header fields
in the requests sent and responses received you should use the full OO
interface provided by the LWP::UserAgent module.
.PP
This following functions are provided (and exported) by this module:
.Ip "get($url)" 3
.IX Item "get($url)"
This function will get the document identified by the given \s-1URL\s0.  The
\fIget()\fR function will return the document if successful or \*(L'undef\*(R' if it
fails.  The \f(CW$url\fR argument can be either a simple string or a reference
to a \s-1URI::URL\s0 object.
.Sp
You will not be able to examine the response code or response headers
(like \fIContent-Type\fR) when you are accessing the web using this
function.  If you need this you should use the full \s-1OO\s0 interface.
.Ip "head($url)" 3
.IX Item "head($url)"
Get document headers. Returns the following values if successful:
($content_type, \f(CW$document_length\fR, \f(CW$modified_time\fR, \f(CW$expires\fR, \f(CW$server\fR)
.Sp
Returns an empty list if it fails.
.Ip "getprint($url)" 3
.IX Item "getprint($url)"
Get and print a document identified by a \s-1URL\s0. The document is printet
on \s-1STDOUT\s0. The error message (formatted as \s-1HTML\s0) is printed on \s-1STDERR\s0
if the request fails.  The return value is the \s-1HTTP\s0 response code.
.Ip "getstore($url, $file)" 3
.IX Item "getstore($url, $file)"
Gets a document identified by a \s-1URL\s0 and stores it in the file. The
return value is the \s-1HTTP\s0 response code.
.Ip "mirror($url, $file)" 3
.IX Item "mirror($url, $file)"
Get and store a document identified by a \s-1URL\s0, using
\fIIf-modified-since\fR, and checking of the \fIContent-Length\fR.  Returns
the \s-1HTTP\s0 response code.
.PP
This module also exports the \s-1HTTP::\s0Status constants and
procedures.  These can be used when you check the response code from
\fIgetprint()\fR, \fIgetstore()\fR and \fImirror()\fR.  The constants are:
.PP
.Vb 37
\&   RC_CONTINUE
\&   RC_SWITCHING_PROTOCOLS
\&   RC_OK
\&   RC_CREATED
\&   RC_ACCEPTED
\&   RC_NON_AUTHORITATIVE_INFORMATION
\&   RC_NO_CONTENT
\&   RC_RESET_CONTENT
\&   RC_PARTIAL_CONTENT
\&   RC_MULTIPLE_CHOICES
\&   RC_MOVED_PERMANENTLY
\&   RC_MOVED_TEMPORARILY
\&   RC_SEE_OTHER
\&   RC_NOT_MODIFIED
\&   RC_USE_PROXY
\&   RC_BAD_REQUEST
\&   RC_UNAUTHORIZED
\&   RC_PAYMENT_REQUIRED
\&   RC_FORBIDDEN
\&   RC_NOT_FOUND
\&   RC_METHOD_NOT_ALLOWED
\&   RC_NOT_ACCEPTABLE
\&   RC_PROXY_AUTHENTICATION_REQUIRED
\&   RC_REQUEST_TIMEOUT
\&   RC_CONFLICT
\&   RC_GONE
\&   RC_LENGTH_REQUIRED
\&   RC_PRECONDITION_FAILED
\&   RC_REQUEST_ENTITY_TOO_LARGE
\&   RC_REQUEST_URI_TOO_LARGE
\&   RC_UNSUPPORTED_MEDIA_TYPE
\&   RC_INTERNAL_SERVER_ERROR
\&   RC_NOT_IMPLEMENTED
\&   RC_BAD_GATEWAY
\&   RC_SERVICE_UNAVAILABLE
\&   RC_GATEWAY_TIMEOUT
\&   RC_HTTP_VERSION_NOT_SUPPORTED
.Ve
The \s-1HTTP::\s0Status classification functions are:
.Ip "is_success($rc)" 3
.IX Item "is_success($rc)"
Check if response code indicated successfull request.
.Ip "is_error($rc)" 3
.IX Item "is_error($rc)"
Check if response code indicated that an error occured.
.PP
The module will also export the \s-1LWP::\s0UserAgent object as \f(CW$ua\fR if you
ask for it explicitly.
.PP
The user agent created by this module will identify itself as
\*(L"\s-1LWP::\s0Simple/0.00\*(R" and will initialize its proxy defaults from the
environment (by calling \f(CW$ua\fR\->env_proxy).
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the \fILWP\fR manpage, the \fILWP::UserAgent\fR manpage, the \fIHTTP::Status\fR manpage, the \fIrequest\fR manpage, the \fImirror\fR manpage

.rn }` ''
