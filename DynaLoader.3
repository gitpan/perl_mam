.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH DynaLoader 3 "perl 5.004, patch 01" "11/Apr/97" "Perl Programmers Reference Guide"
.IX Title "DynaLoader 3"
.UC
.IX Name "DynaLoader - Dynamically load C libraries into Perl code"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
DynaLoader \- Dynamically load C libraries into Perl code
.PP
\fIdl_error()\fR, \fIdl_findfile()\fR, \fIdl_expandspec()\fR, \fIdl_load_file()\fR, \fIdl_find_symbol()\fR, \fIdl_find_symbol_anywhere()\fR, \fIdl_undef_symbols()\fR, \fIdl_install_xsub()\fR, \fIdl_load_flags()\fR, \fIbootstrap()\fR \- routines used by DynaLoader modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 4
\&    package YourPackage;
\&    require DynaLoader;
\&    @ISA = qw(... DynaLoader ...);
\&    bootstrap YourPackage;
.Ve
.Vb 2
\&    # optional method for 'global' loading
\&    sub dl_load_flags { 0x01 }     
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document defines a standard generic interface to the dynamic
linking mechanisms available on many platforms.  Its primary purpose is
to implement automatic dynamic loading of Perl modules.
.PP
This document serves as both a specification for anyone wishing to
implement the DynaLoader for a new platform and as a guide for
anyone wishing to use the DynaLoader directly in an application.
.PP
The DynaLoader is designed to be a very simple high-level
interface that is sufficiently general to cover the requirements
of SunOS, HP\-UX, NeXT, Linux, VMS and other platforms.
.PP
It is also hoped that the interface will cover the needs of OS/2, NT
etc and also allow pseudo-dynamic linking (using \f(CWld -A\fR at runtime).
.PP
It must be stressed that the DynaLoader, by itself, is practically
useless for accessing non-Perl libraries because it provides almost no
Perl-to-C \*(L'glue\*(R'.  There is, for example, no mechanism for calling a C
library function or supplying arguments.  It is anticipated that any
glue that may be developed in the future will be implemented in a
separate dynamically loaded module.
.PP
DynaLoader Interface Summary
.PP
.Vb 11
\&  @dl_library_path
\&  @dl_resolve_using
\&  @dl_require_symbols
\&  $dl_debug
\&  @dl_librefs
\&  @dl_modules
\&                                                  Implemented in:
\&  bootstrap($modulename)                               Perl
\&  @filepaths = dl_findfile(@names)                     Perl
\&  $flags = $modulename->dl_load_flags                  Perl
\&  $symref  = dl_find_symbol_anywhere($symbol)          Perl
.Ve
.Vb 5
\&  $libref  = dl_load_file($filename, $flags)           C
\&  $symref  = dl_find_symbol($libref, $symbol)          C
\&  @symbols = dl_undef_symbols()                        C
\&  dl_install_xsub($name, $symref [, $filename])        C
\&  $message = dl_error                                  C
.Ve
.Ip "@dl_library_path" 4
.IX Item "@dl_library_path"
The standard/default list of directories in which \fIdl_findfile()\fR will
search for libraries etc.  Directories are searched in order:
\f(CW$dl_library_path\fR[0], [1], ... etc
.Sp
@dl_library_path is initialised to hold the list of \*(L'normal\*(R' directories
(\fI/usr/lib\fR, etc) determined by \fBConfigure\fR (\f(CW$Config{'libpth'}\fR).  This should
ensure portability across a wide range of platforms.
.Sp
@dl_library_path should also be initialised with any other directories
that can be determined from the environment at runtime (such as
\s-1LD_LIBRARY_PATH\s0 for SunOS).
.Sp
After initialisation \f(CW@dl_library_path\fR can be manipulated by an
application using push and unshift before calling \fIdl_findfile()\fR.
Unshift can be used to add directories to the front of the search order
either to save search time or to override libraries with the same name
in the \*(L'normal\*(R' directories.
.Sp
The load function that \fIdl_load_file()\fR calls may require an absolute
pathname.  The \fIdl_findfile()\fR function and \f(CW@dl_library_path\fR can be
used to search for and return the absolute pathname for the
library/object that you wish to load.
.Ip "@dl_resolve_using" 4
.IX Item "@dl_resolve_using"
A list of additional libraries or other shared objects which can be
used to resolve any undefined symbols that might be generated by a
later call to \fIload_file()\fR.
.Sp
This is only required on some platforms which do not handle dependent
libraries automatically.  For example the Socket Perl extension
library (\fIauto/Socket/Socket.so\fR) contains references to many socket
functions which need to be resolved when it's loaded.  Most platforms
will automatically know where to find the \*(L'dependent\*(R' library (e.g.,
\fI/usr/lib/libsocket.so\fR).  A few platforms need to be told the
location of the dependent library explicitly.  Use \f(CW@dl_resolve_using\fR
for this.
.Sp
Example usage:
.Sp
.Vb 1
\&    @dl_resolve_using = dl_findfile('-lsocket');
.Ve
.Ip "@dl_require_symbols" 4
.IX Item "@dl_require_symbols"
A list of one or more symbol names that are in the library/object file
to be dynamically loaded.  This is only required on some platforms.
.Ip "@dl_librefs" 4
.IX Item "@dl_librefs"
An array of the handles returned by successful calls to \fIdl_load_file()\fR,
made by bootstrap, in the order in which they were loaded.
Can be used with \fIdl_find_symbol()\fR to look for a symbol in any of
the loaded files.
.Ip "@dl_modules" 4
.IX Item "@dl_modules"
An array of module (package) names that have been bootstrap'ed.
.Ip "dl_error()" 4
.IX Item "dl_error()"
Syntax:
.Sp
.Vb 1
\&    $message = dl_error();
.Ve
Error message text from the last failed DynaLoader function.  Note
that, similar to errno in unix, a successful function call does not
reset this message.
.Sp
Implementations should detect the error as soon as it occurs in any of
the other functions and save the corresponding message for later
retrieval.  This will avoid problems on some platforms (such as SunOS)
where the error message is very temporary (e.g., \fIdlerror()\fR).
.Ip "$dl_debug" 4
.IX Item "$dl_debug"
Internal debugging messages are enabled when \f(CW$dl_debug\fR is set true.
Currently setting \f(CW$dl_debug\fR only affects the Perl side of the
DynaLoader.  These messages should help an application developer to
resolve any DynaLoader usage problems.
.Sp
$dl_debug is set to \f(CW$ENV{'PERL_DL_DEBUG'}\fR if defined.
.Sp
For the DynaLoader developer/porter there is a similar debugging
variable added to the C code (see dlutils.c) and enabled if Perl was
built with the \fB\-\s-1DDEBUGGING\s0\fR flag.  This can also be set via the
\s-1PERL_DL_DEBUG\s0 environment variable.  Set to 1 for minimal information or
higher for more.
.Ip "dl_findfile()" 4
.IX Item "dl_findfile()"
Syntax:
.Sp
.Vb 1
\&    @filepaths = dl_findfile(@names)
.Ve
Determine the full paths (including file suffix) of one or more
loadable files given their generic names and optionally one or more
directories.  Searches directories in \f(CW@dl_library_path\fR by default and
returns an empty list if no files were found.
.Sp
Names can be specified in a variety of platform independent forms.  Any
names in the form \fB\-lname\fR are converted into \fIlibname.*\fR, where \fI.*\fR is
an appropriate suffix for the platform.
.Sp
If a name does not already have a suitable prefix and/or suffix then
the corresponding file will be searched for by trying combinations of
prefix and suffix appropriate to the platform: \*(L"$name.o\*(R", \*(L"lib$name.*\*(R"
and \*(L"$name\*(R".
.Sp
If any directories are included in \f(CW@names\fR they are searched before
\f(CW@dl_library_path\fR.  Directories may be specified as \fB\-Ldir\fR.  Any other
names are treated as filenames to be searched for.
.Sp
Using arguments of the form \f(CW-Ldir\fR and \f(CW-lname\fR is recommended.
.Sp
Example: 
.Sp
.Vb 1
\&    @dl_resolve_using = dl_findfile(qw(-L/usr/5lib -lposix));
.Ve
.Ip "dl_expandspec()" 4
.IX Item "dl_expandspec()"
Syntax:
.Sp
.Vb 1
\&    $filepath = dl_expandspec($spec)
.Ve
Some unusual systems, such as \s-1VMS\s0, require special filename handling in
order to deal with symbolic names for files (i.e., \s-1VMS\s0's Logical Names).
.Sp
To support these systems a \fIdl_expandspec()\fR function can be implemented
either in the \fIdl_*.xs\fR file or code can be added to the autoloadable
\fIdl_expandspec()\fR function in \fIDynaLoader.pm\fR.  See \fIDynaLoader.pm\fR for
more information.
.Ip "dl_load_file()" 4
.IX Item "dl_load_file()"
Syntax:
.Sp
.Vb 1
\&    $libref = dl_load_file($filename, $flags)
.Ve
Dynamically load \f(CW$filename\fR, which must be the path to a shared object
or library.  An opaque \*(L'library reference\*(R' is returned as a handle for
the loaded object.  Returns undef on error.
.Sp
The \f(CW$flags\fR argument to alters dl_load_file behaviour.  
Assigned bits:
.Sp
.Vb 3
\& 0x01  make symbols available for linking later dl_load_file's.
\&       (only known to work on Solaris 2 using dlopen(RTLD_GLOBAL))
\&       (ignored under VMS; this is a normal part of image linking)
.Ve
(On systems that provide a handle for the loaded object such as SunOS
and \s-1HPUX\s0, \f(CW$libref\fR will be that handle.  On other systems \f(CW$libref\fR will
typically be \f(CW$filename\fR or a pointer to a buffer containing \f(CW$filename\fR.
The application should not examine or alter \f(CW$libref\fR in any way.)
.Sp
This is the function that does the real work.  It should use the
current values of \f(CW@dl_require_symbols\fR and \f(CW@dl_resolve_using\fR if required.
.Sp
.Vb 5
\&    SunOS: dlopen($filename)
\&    HP-UX: shl_load($filename)
\&    Linux: dld_create_reference(@dl_require_symbols); dld_link($filename)
\&    NeXT:  rld_load($filename, @dl_resolve_using)
\&    VMS:   lib$find_image_symbol($filename,$dl_require_symbols[0])
.Ve
(The \fIdlopen()\fR function is also used by Solaris and some versions of
Linux, and is a common choice when providing a \*(L"wrapper\*(R" on other
mechanisms as is done in the \s-1OS/2\s0 port.)
.Ip "dl_loadflags()" 4
.IX Item "dl_loadflags()"
Syntax:
.Sp
.Vb 1
\&    $flags = dl_loadflags $modulename;
.Ve
Designed to be a method call, and to be overridden by a derived class
(i.e. a class which has DynaLoader in its \f(CW@ISA\fR).  The definition in
DynaLoader itself returns 0, which produces standard behavior from
\fIdl_load_file()\fR.
.Ip "dl_find_symbol()" 4
.IX Item "dl_find_symbol()"
Syntax:
.Sp
.Vb 1
\&    $symref = dl_find_symbol($libref, $symbol)
.Ve
Return the address of the symbol \f(CW$symbol\fR or \f(CWundef\fR if not found.  If the
target system has separate functions to search for symbols of different
types then \fIdl_find_symbol()\fR should search for function symbols first and
then other types.
.Sp
The exact manner in which the address is returned in \f(CW$symref\fR is not
currently defined.  The only initial requirement is that \f(CW$symref\fR can
be passed to, and understood by, \fIdl_install_xsub()\fR.
.Sp
.Vb 5
\&    SunOS: dlsym($libref, $symbol)
\&    HP-UX: shl_findsym($libref, $symbol)
\&    Linux: dld_get_func($symbol) and/or dld_get_symbol($symbol)
\&    NeXT:  rld_lookup("_$symbol")
\&    VMS:   lib$find_image_symbol($libref,$symbol)
.Ve
.Ip "dl_find_symbol_anywhere()" 4
.IX Item "dl_find_symbol_anywhere()"
Syntax:
.Sp
.Vb 1
\&    $symref = dl_find_symbol_anywhere($symbol)
.Ve
Applies \fIdl_find_symbol()\fR to the members of \f(CW@dl_librefs\fR and returns
the first match found.
.Ip "dl_undef_symbols()" 4
.IX Item "dl_undef_symbols()"
Example
.Sp
.Vb 1
\&    @symbols = dl_undef_symbols()
.Ve
Return a list of symbol names which remain undefined after \fIload_file()\fR.
Returns \f(CW()\fR if not known.  Don't worry if your platform does not provide
a mechanism for this.  Most do not need it and hence do not provide it,
they just return an empty list.
.Ip "dl_install_xsub()" 4
.IX Item "dl_install_xsub()"
Syntax:
.Sp
.Vb 1
\&    dl_install_xsub($perl_name, $symref [, $filename])
.Ve
Create a new Perl external subroutine named \f(CW$perl_name\fR using \f(CW$symref\fR as
a pointer to the function which implements the routine.  This is simply
a direct call to \fInewXSUB()\fR.  Returns a reference to the installed
function.
.Sp
The \f(CW$filename\fR parameter is used by Perl to identify the source file for
the function if required by \fIdie()\fR, \fIcaller()\fR or the debugger.  If
\f(CW$filename\fR is not defined then \*(L"DynaLoader\*(R" will be used.
.Ip "bootstrap()" 4
.IX Item "bootstrap()"
Syntax:
.Sp
\fIbootstrap\fR\|($module)
.Sp
This is the normal entry point for automatic dynamic loading in Perl.
.Sp
It performs the following actions:
.Ip "\(bu" 12
.IX Item "\(bu"
locates an auto/$module directory by searching \f(CW@INC\fR
.Ip "\(bu" 12
.IX Item "\(bu"
uses \fIdl_findfile()\fR to determine the filename to load
.Ip "\(bu" 12
.IX Item "\(bu"
sets \f(CW@dl_require_symbols\fR to \f(CW("boot_$module")\fR
.Ip "\(bu" 12
.IX Item "\(bu"
executes an \fIauto/$module/$module.bs\fR file if it exists
(typically used to add to \f(CW@dl_resolve_using\fR any files which
are required to load the module on the current platform)
.Ip "\(bu" 12
.IX Item "\(bu"
calls \fIdl_load_flags()\fR to determine how to load the file.
.Ip "\(bu" 12
.IX Item "\(bu"
calls \fIdl_load_file()\fR to load the file
.Ip "\(bu" 12
.IX Item "\(bu"
calls \fIdl_undef_symbols()\fR and warns if any symbols are undefined
.Ip "\(bu" 12
.IX Item "\(bu"
calls \fIdl_find_symbol()\fR for \*(L"boot_$module\*(R"
.Ip "\(bu" 12
.IX Item "\(bu"
calls \fIdl_install_xsub()\fR to install it as \*(L"${module}::bootstrap\*(R"
.Ip "\(bu" 12
.IX Item "\(bu"
calls &{"${module}::bootstrap"} to bootstrap the module (actually
it uses the function reference returned by dl_install_xsub for speed)
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, 11 August 1994.
.PP
This interface is based on the work and comments of (in no particular
order): Larry Wall, Robert Sanders, Dean Roehrich, Jeff Okamoto, Anno
Siegel, Thomas Neumann, Paul Marquess, Charles Bailey, myself and others.
.PP
Larry Wall designed the elegant inherited bootstrap mechanism and
implemented the first Perl 5 dynamic loader using it.
.PP
Solaris global loading added by Nick Ing-Simmons with design/coding
assistance from Tim Bunce, January 1996.

.rn }` ''
