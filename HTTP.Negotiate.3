.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib::HTTP::Negotiate 3 "perl 5.004, patch 55" "3/Apr/97" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
choose \- choose a variant of a document to serve (HTTP content negotiation)
.SH "SYNOPSIS"
.PP
.Vb 1
\& use HTTP::Negotiate;
.Ve
.Vb 6
\& #  ID       QS     Content-Type   Encoding Char-Set        Lang   Size
\& $variants =
\&  [['var1',  1.000, 'text/html',   undef,   'iso-8859-1',   'en',   3000],
\&   ['var2',  0.950, 'text/plain',  'gzip',  'us-ascii',     'no',    400],
\&   ['var3',  0.3,   'image/gif',   undef,   undef,          undef, 43555],
\&  ];
.Ve
.Vb 2
\& @prefered = choose($variants, $request_headers);
\& $the_one  = choose($variants);
.Ve
.SH "DESCRIPTION"
This module provide a complete implementation of the HTTP content
negotiation algorithm specified in \fIdraft-ietf-http-v11-spec-00.ps\fR
chapter 12.  Content negotiation allows for the selection of a
preferred content representation based upon attributes of the
negotiable variants and the value of the various Accept* header fields
in the request.
.PP
The variants are ordered by preference by calling the function
\fIchoose()\fR.
.PP
The first parameter is a description of the variants that we can
choose among.  The variants are described by a reference to an array.
Each element in this array is an array with the values [$id, \f(CW$qs\fR,
\f(CW$content_type\fR, \f(CW$content_encoding\fR, \f(CW$charset\fR, \f(CW$content_language\fR,
\f(CW$content_length\fR].  The meaning of these values are described
below. The \f(CW$content_encoding\fR and \f(CW$content_language\fR can be either a
single scalar value or an array reference if there are several values.
.PP
The second optional parameter is a reference to the request headers.
This is used to look for \*(L"Accept*\*(R" headers.  You can pass a reference
to either a HTTP::Request or a HTTP::Headers object.  If this
parameter is missing, then the accept specification is initialized
from the CGI environment variables HTTP_ACCEPT, HTTP_ACCEPT_CHARSET,
HTTP_ACCEPT_ENCODING and HTTP_ACCEPT_LANGUAGE.
.PP
In array context, \fIchoose()\fR returns a list of variant
identifier/calculated quality pairs.  The values are sorted by
quality, highest quality first.  If the calculated quality is the same
for two variants, then they are sorted by size (smallest first). \fIE.g.\fR:
.PP
.Vb 1
\&  (['var1' => 1], ['var2', 0.3], ['var3' => 0]);
.Ve
Note that also zero quality variants are included in the return list
even if these should never be served to the client.
.PP
In scalar context, it returns the identifier of the variant with the
highest score or \f(CWundef\fR if none have non-zero quality.
.PP
If the \f(CW$HTTP::Negotiate::DEBUG\fR variable is set to TRUE, then a lot of
noise is generated on STDOUT during evaluation of \fIchoose()\fR.
.SH "VARIANTS"
A variant is described by a list of the following values.  If the
attribute does not make sense or is unknown for a variant, then use
\f(CWundef\fR instead.
.Ip "identifier" 3
This is just some string that you use as a name for the variant.  The
identifier of the preferred variant is returned by \fIchoose()\fR.
.Ip "qs" 3
This is a number between 0.000 and 1.000 that describes the \*(L"source
quality\*(R".  This is what \fIdraft-ietf-http-v11-spec-00.ps\fR says about this
value:
.Sp
Source quality is measured by the content provider as representing the
amount of degradation from the original source.  For example, a
picture in \s-1JPEG\s0 form would have a lower qs when translated to the \s-1XBM\s0
format, and much lower qs when translated to an \s-1ASCII\s0\-art
representation.  Note, however, that this is a function of the source
\- an original piece of \s-1ASCII\s0\-art may degrade in quality if it is
captured in \s-1JPEG\s0 form.  The qs values should be assigned to each
variant by the content provider; if no qs value has been assigned, the
default is generally \*(L"qs=1\*(R".
.Ip "content-type" 3
This is the media type of the variant.  The media type does not
include a charset attribute, but might contain other parameters.
Examples are:
.Sp
.Vb 5
\&  text/html
\&  text/html;version=2.0
\&  text/plain
\&  image/gif
\&  image/jpg
.Ve
.Ip "content-encoding" 3
This is one or more content encodings that has been applied to the
variant.  The content encoding is generally used as a modifier to the
content media type.  The most common content encodings are:
.Sp
.Vb 2
\&  gzip
\&  compress
.Ve
.Ip "content-charset" 3
This is the character set used when the variant contains textual
content.  The charset value should generally be \f(CWundef\fR or one of these:
.Sp
.Vb 8
\&  us-ascii
\&  iso-8859-1 ... iso-8859-9
\&  iso-2022-jp
\&  iso-2022-jp-2
\&  iso-2022-kr
\&  unicode-1-1
\&  unicode-1-1-utf-7
\&  unicode-1-1-utf-8
.Ve
.Ip "content-language" 3
This describes one or more languages that are used in the variant.
Language is described like this in \fIdraft-ietf-http-v11-spec-00.ps\fR: A
language is in this context a natural language spoken, written, or
otherwise conveyed by human beings for communication of information to
other human beings.  Computer languages are explicitly excluded.
.Sp
The language tags are the same as those defined by \s-1RFC\s0\-1766.  Examples
are:
.Sp
.Vb 4
\&  no               Norwegian
\&  en               International English
\&  en-US            US English
\&  en-cockney
.Ve
.Ip "content-length" 3
This is the number of bytes used to represent the content.
.SH "ACCEPT HEADERS"
The following Accept* headers can be used for describing content
preferences in a request (This description is an edited extract from
\fIdraft-ietf-http-v11-spec-00.ps\fR):
.Ip "Accept" 3
This header can be used to indicate a list of media ranges which are
acceptable as a reponse to the request.  The \*(L"*\*(R" character is used to
group media types into ranges, with \*(L"*/*\*(R" indicating all media types
and \*(L"type/*\*(R" indicating all subtypes of that type.
.Sp
The parameter q is used to indicate the quality factor, which
represents the user's preference for that range of media types.  The
parameter mbx gives the maximum acceptable size of the response
content. The default values are: q=1 and mbx=infinity. If no Accept
header is present, then the client accepts all media types with q=1.
.Sp
For example:
.Sp
.Vb 1
\&  Accept: audio/*;q=0.2;mbx=200000, audio/basic
.Ve
would mean: \*(L"I prefer audio/basic (of any size), but send me any audio
type if it is the best available after an 80% mark-down in quality and
its size is less than 200000 bytes\*(R"
.Ip "Accept-Charset" 3
Used to indicate what character sets are acceptable for the response.
The \*(L"us-ascii\*(R" character set is assumed to be acceptable for all user
agents.  If no Accept-Charset field is given, the default is that any
charset is acceptable.  Example:
.Sp
.Vb 1
\&  Accept-Charset: iso-8859-1, unicode-1-1
.Ve
.Ip "Accept-Encoding" 3
Restricts the Content-Encoding values which are acceptable in the
response.  If no Accept-Encoding field is present, the server may
assume that the client will accept any content encoding.  An empty
Accept-Encoding means that no content encoding is acceptable.  Example:
.Sp
.Vb 1
\&  Accept-Encoding: compress, gzip
.Ve
.Ip "Accept-Language" 3
This field is similar to Accept, but restrict the set of natural
languages that are preferred as a response.  Each language may be
given an associated quality value which represents an estimate of the
user's comprehension of that language.  For example:
.Sp
.Vb 1
\&  Accept-Language: no, en-gb;q=0.8, de;q=0.55
.Ve
would mean: \*(L"I prefer Norwegian, but will accept British English (with
80% comprehension) or German (with 55% comprehension).
.SH "COPYRIGHT"
Copyright 1996, Gisle Aas.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "AUTHOR"
Gisle Aas <aas@sn.no>

.rn }` ''
.IX Title "lib::HTTP::Negotiate 3"
.IX Name "choose - choose a variant of a document to serve (HTTP content negotiation)"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "VARIANTS"

.IX Item "identifier"

.IX Item "qs"

.IX Item "content-type"

.IX Item "content-encoding"

.IX Item "content-charset"

.IX Item "content-language"

.IX Item "content-length"

.IX Header "ACCEPT HEADERS"

.IX Item "Accept"

.IX Item "Accept-Charset"

.IX Item "Accept-Encoding"

.IX Item "Accept-Language"

.IX Header "COPYRIGHT"

.IX Header "AUTHOR"

