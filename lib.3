.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH lib 3 "perl 5.004, patch 01" "23/Jan/97" "Perl Programmers Reference Guide"
.IX Title "lib 3"
.UC
.IX Name "lib - manipulate @INC at compile time"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
lib \- manipulate \f(CW@INC\fR at compile time
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PP
.Vb 1
\&    use lib LIST;
.Ve
.Vb 1
\&    no lib LIST;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a small simple module which simplifies the manipulation of \f(CW@INC\fR
at compile time.
.PP
It is typically used to add extra directories to perl's search path so
that later \f(CWuse\fR or \f(CWrequire\fR statements will find modules which are
not located on perl's default search path.
.Sh "\s-1ADDING\s0 \s-1DIRECTORIES\s0 \s-1TO\s0 \f(CW@INC\fR"
.IX Subsection "\s-1ADDING\s0 \s-1DIRECTORIES\s0 \s-1TO\s0 \f(CW@INC\fR"
The parameters to \f(CWuse lib\fR are added to the start of the perl search
path. Saying
.PP
.Vb 1
\&    use lib LIST;
.Ve
is \fIalmost\fR the same as saying
.PP
.Vb 1
\&    BEGIN { unshift(@INC, LIST) }
.Ve
For each directory in \s-1LIST\s0 (called \f(CW$dir\fR here) the lib module also
checks to see if a directory called \f(CW$dir\fR/$archname/auto exists.
If so the \f(CW$dir\fR/$archname directory is assumed to be a corresponding
architecture specific directory and is added to \f(CW@INC\fR in front of \f(CW$dir\fR.
.PP
If \s-1LIST\s0 includes both \f(CW$dir\fR and \f(CW$dir\fR/$archname then \f(CW$dir\fR/$archname will
be added to \f(CW@INC\fR twice (if \f(CW$dir\fR/$archname/auto exists).
.Sh "\s-1DELETING\s0 \s-1DIRECTORIES\s0 \s-1FROM\s0 \f(CW@INC\fR"
.IX Subsection "\s-1DELETING\s0 \s-1DIRECTORIES\s0 \s-1FROM\s0 \f(CW@INC\fR"
You should normally only add directories to \f(CW@INC\fR.  If you need to
delete directories from \f(CW@INC\fR take care to only delete those which you
added yourself or which you are certain are not needed by other modules
in your script.  Other modules may have added directories which they
need for correct operation.
.PP
By default the \f(CWno lib\fR statement deletes the \fIfirst\fR instance of
each named directory from \f(CW@INC\fR.  To delete multiple instances of the
same name from \f(CW@INC\fR you can specify the name multiple times.
.PP
To delete \fIall\fR instances of \fIall\fR the specified names from \f(CW@INC\fR you can
specify \*(L':\s-1ALL\s0\*(R' as the first parameter of \f(CWno lib\fR. For example:
.PP
.Vb 1
\&    no lib qw(:ALL .);
.Ve
For each directory in \s-1LIST\s0 (called \f(CW$dir\fR here) the lib module also
checks to see if a directory called \f(CW$dir\fR/$archname/auto exists.
If so the \f(CW$dir\fR/$archname directory is assumed to be a corresponding
architecture specific directory and is also deleted from \f(CW@INC\fR.
.PP
If \s-1LIST\s0 includes both \f(CW$dir\fR and \f(CW$dir\fR/$archname then \f(CW$dir\fR/$archname will
be deleted from \f(CW@INC\fR twice (if \f(CW$dir\fR/$archname/auto exists).
.Sh "\s-1RESTORING\s0 \s-1ORIGINAL\s0 \f(CW@INC\fR"
.IX Subsection "\s-1RESTORING\s0 \s-1ORIGINAL\s0 \f(CW@INC\fR"
When the lib module is first loaded it records the current value of \f(CW@INC\fR
in an array \f(CW@lib::ORIG_INC\fR. To restore \f(CW@INC\fR to that value you
can say
.PP
.Vb 1
\&    @INC = @lib::ORIG_INC;
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
FindBin \- optional module which deals with paths relative to the source file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, 2nd June 1995.

.rn }` ''
